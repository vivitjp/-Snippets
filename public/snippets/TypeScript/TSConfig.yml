---
#-------------------------------
# TSConfig Compiler Options
#-------------------------------
- KEY: tsc.include
  EXPLAIN: Include
  BODY: |
    "include": ["src"],

- KEY: tsc.references
  EXPLAIN: References
  BODY: |
    "references": [{ "path": "./tsconfig.node.json" }]

#-------------------------------
# Async
#-------------------------------

- KEY: tsc.type.checking
  EXPLAIN: Type Checking
  BODY: |
    ■ allowUnreachableCode                        // 到達不可能なコードに対する警告

      function fn(n: number) {
        if (n > 5) return true;
        else return false;
        return true;                              => Unreachable code detected.
      }

    ■ allowUnusedLabels                           // 利用していない Label についての警告

      function verifyAge(age: number) {           // 'return'の記述が抜けている
        if (age > 18) {
          verified: true;                         => Unused label.
        }
      }

    ■ alwaysStrict                                // ECMAScriptのstrict モードで解釈
                                                  // 各ファイルへ”use strict”を出力することを保証
                                                  
    ■ exactOptionalPropertyTypes                  // 型の ? 処理方法で厳格なルール適用

      colorThemeOverride?: "dark" | "light";
      settings.colorThemeOverride = undefined;    <= NG

    ■ noFallthroughCasesInSwitch                  // 次の case へ処理を持ち越し抑制

      switch (a) {
        case 0:                                   => Fallthrough case in switch.
          console.log("even");
        case 1:
          console.log("odd");
          break;
      }

    ■ noImplicitAny                               // 推論による any を抑制

      function fn(s) {                            => Parameter 's' implicitly has an 'any' type.
        console.log(s.subtr(3));
      }

    ■ noImplicitOverride                          // 明示的な オーバーロード

      class Album {
        download() { ... }                        // Default behavior
      }
      
      class SharedAlbum extends Album {
        override download() { ... }               // Override 必要になる
      }

    ■ noImplicitReturns                           // 関数内のすべてのコードパスについて値を返却

      function func(color: "blue" | "red"): string {  <= Function lacks ending return statement and
                                                         return type does not include 'undefined'.
          if (color === "blue") {
            return "beats";
          } else {
            ("bose");                             <= NG
          }
        }

    ■ noImplicitThis                              // 暗黙的にany型となる this 式でエラーを発生

      class Rectangle {
        age: number;
        constructor(age: number) { this.age = age }
      
        doubleAge() {
          return function () {                    // 関数ファクトリ
            return this.age * 2;                  <= 'this' implicitly has type 'any' because it 
          };                                          does not have a type annotation.
        }
      }

    ■ noPropertyAccessFromIndexSignature          // index signature による.アクセス制限

      interface GameSettings {
        speed: "fast" | "medium" | "slow";        // 宣言された属性
        [key: string]: string;                    // 拡張可能な属性( index signature )
      }
      
      const settings = getSettings();
      settings.speed;
      settings.username;                          <= Property 'username' comes from an index signature,
                                                     so it must be accessed with ['username'].

    ■ noUncheckedIndexedAccess                    // index signature による.アクセスに undefined 追加

      interface EnvironmentVars {
        NAME: string;
        [propName: string]: string;
      }
      declare const env: EnvironmentVars;
      
      const sysName = env.NAME;                   // string
      const nodeEnv = env.NODE_ENV;               // string | undefined

    ■ noUnusedLocals                              // 非利用ローカル変数にエラー

      const createKeyboard = (modelID: number) => {
        const id = 23;                            => 'id' is declared but its value is never read.
        return { type: "keyboard", modelID };
      };      

    ■ noUnusedParameters                          // 非利用関数パラメータにエラー

      const func = (id: number) => {              => 'id' is declared but its value is never read.
        const someID = 23;
        return { type: "keyboard", modelID: someID };
      };

    ■ strict                                      // 幅広い型チェックの挙動を有効化

      strictファミリーをすべてonに設定。個別にoff可能。

    ■ strict => strictBindCallApply               // call,bind,apply で元関数に対する引数をチェック

      function fn(x: string) {
        return parseInt(x);
      }
      
      const n1 = fn.call(undefined, "10");
      const n2 = fn.call(undefined, false);       => Argument of type 'boolean' is not assignable to
                                                     parameter of type 'string'.

    ■ strict => strictFunctionTypes               // パラメータをより正しくチェック

      function fn(x: string) {
        console.log("Hello, " + x.toLowerCase());
      }
      
      type StringOrNumberFunc = (ns: string | number) => void;  //パラメタの型違い
      let func: StringOrNumberFunc = fn;          => Type '(x: string) => void' is not assignable ...

    ■ strict => strictNullChecks                  // nullとundefinedは言語により事実上無視

      declare const username: string;
      const users = [
        { name: "Oby", age: 12 },
        { name: "Heera", age: 32 },
      ];
      
      const loggedInUser = users.find((u) => u.name === username);
      console.log(loggedInUser.age);              => 'loggedInUser' is possibly 'undefined'

    ■ strict => strictPropertyInitialization      // コンストラクターで値がセットされないClass属性 エラー

      class UserAccount {
        name: string;                             // コンストラクタで値を設定
        accountType = "user";                     // デフォルト値設定
        address: string | undefined;              // undefinedを設定
        email: string;                            => Property 'email' has no initializer and is not
                                                     definitely assigned in the constructor.
        constructor(name: string) {
          this.name = name;
        }
      }

    ■ useUnknownInCatchVariables                  // catch 内の変数型を any から unknown に変更可能に

      try {
        // ...
      } catch (err: unknown) {                    // err 型を any -> unknown
        if (err instanceof Error) {
          console.log(err.message);
        }
      }

- KEY: tsc.modules
  EXPLAIN: Modules
  BODY: |
    ■ allowArbitraryExtensions                    // .cssなど、.js,.ts 以外の拡張子なら、宣言ファイルを
                                                     {ファイルベース名}.d.{拡張子} で検索
      /* app.css */
      .cookie-banner {
        display: none;
      }

      /* app.d.css.ts */                          // このファイル名を型ファイルとして検索
      declare const css: {
        cookieBanner: string;
      };
      export default css;

      /* App.tsx */
      import styles from "./app.css";
      styles.cookieBanner;                        // string: 型が定義済

    ■ allowImportingTsExtensions                  // .ts,.mts,.tsx などTS固有の拡張子で相互にインポート

      * TS インポート パスは JS出力ファイルで実行時に解決できないため、このフラグは --noEmit または --emitDeclarationOnly が有効な場合にのみ許可
      * リゾルバー(バンドラー、ランタイム、のツール)が .ts ファイル間のインポートを機能させる

    ■ allowUmdGlobalAccess

      モジュール内部から UMD へグローバルにアクセスできる。このフラグなしで UMD モジュールを利用するには import 宣言文が必要

      特定のライブラリ(jQuery,Lodashなど）が実行時に利用可能であると分かっているが、import 文ではそのライブラリにアクセスできないような web プロジェクト

    ■ baseUrl                                     // 相対PATHモジュール名解決の基点ディレクトリを設定
                                                     ルートフォルダも決定可能
      baseUrl
      ├── ex.ts
      ├── hello
      │   └── world.ts
      └── tsconfig.json

      import { helloWorld } from "hello/world";   // "baseUrl":"./" と設定
      console.log(helloWorld);

    ■ customConditions

      "customConditions": ["my-condition"]        // node16 以下

    ■ module => 次項目参照

    ■ moduleResolution                            // 不必要
    ■ moduleSuffixes

      "moduleSuffixes": [".ios", ".native", ""]   // モジュールの拡張子を指定
      => 以下順で検索 ./foo.ios.ts, ./foo.native.ts, ./foo.ts.

    ■ noResolve                                   // 起動時に import チェックを不実行
    ■ paths

      1)サンプル
      "baseUrl": ".",                             // "paths"に必要
      "paths": {                                  // "baseUrl"からの相対パス
        "jquery": ["node_modules/jquery/dist/jquery"]  => import "jquery" と記述可能になる
      }
      
      2)サンプル
      "baseUrl": "src",
      "paths": {
          "app/*": ["app/*"],
          "config/*": ["app/_config/*"],
          "environment/*": ["environments/*"],
          "shared/*": ["app/_shared/*"],
          "helpers/*": ["helpers/*"],
          "tests/*": ["tests/*"]
      },

    ■ resolveJsonModule                           // .json ファイルをモジュールインポート

      [settings.json]
      {
          "repo": "TypeScript",
          "dry": false,
          "debug": false
      }

      import settings from "./settings.json";
      settings.dry === 2;                         <= 型Error
      settings.debug === true;

    ■ resolvePackageJsonExports                   // package.json内の exports 参照
                                                  // node16以下、デフォルト

    ■ resolvePackageJsonImports                   // package.json内の imports 参照

    ■ rootDir                                     // ソースRootディレクトリ

      デフォルト: 型定義ファイル以外の最長の共通パス
      以下では src/ が該当し、出力ディレクトリに src/ が含まれない

      MyProj
      ├── tsconfig.json
      ├── src
      │   ├── a.ts
      │   ├── b.ts
      │   ├── sub
      │   │   ├── c.ts
      ├── types.d.ts

    ■ rootDirs                                    // 仮想的ディレクトリ(エミュレート)

      "rootDirs": ["src/views", "generated/templates/views"]

      src
      └── views
          └── view1.ts (can import "./template1", "./view2`)
          └── view2.ts (can import "./template1", "./view1`)
      generated
      └── templates
              └── views
                  └── template1.ts (can import "./view1", "./view2")

    ■ typeRoots                                   // デフォルトinclude root 変更 

      デフォルトinclude
        ./node_modules/@types/
        ../node_modules/@types/
        ../../node_modules/@types/

      "typeRoots": ["./typings", "./vendor/types"]

    ■ types                                       // デフォルトinclude変更 

      デフォルトinclude
        ./node_modules/@types/
        ../node_modules/@types/
        ../../node_modules/@types/

      "types": ["node", "lodash", "express"]

- KEY: tsc.modules.export
  EXPLAIN: Modules Export
  BODY: |
    ■ オリジナル

    import { valueOfPi } from "./constants";
    export const twoPi = valueOfPi * 2;

    ■ module: "CommonJS"

    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.twoPi = void 0;
    const constants_1 = require("./constants");
    exports.twoPi = constants_1.valueOfPi * 2;

    ■ module: "UMD"

    (function (factory) {
        if (typeof module === "object" && typeof module.exports === "object") {
            var v = factory(require, exports);
            if (v !== undefined) module.exports = v;
        }
        else if (typeof define === "function" && define.amd) {
            define(["require", "exports", "./constants"], factory);
        }
    })(function (require, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.twoPi = void 0;
        const constants_1 = require("./constants");
        exports.twoPi = constants_1.valueOfPi * 2;
    });

    ■ module: "AMD"

    define(["require", "exports", "./constants"], function (require, exports, constants_1) {
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.twoPi = void 0;
        exports.twoPi = constants_1.valueOfPi * 2;

    ■ module: "System"

    System.register(["./constants"], function (exports_1, context_1) {
        "use strict";
        var constants_1, twoPi;
        var __moduleName = context_1 && context_1.id;
        return {
            setters: [
                function (constants_1_1) {
                    constants_1 = constants_1_1;
                }
            ],
            execute: function () {
                exports_1("twoPi", twoPi = constants_1.valueOfPi * 2);
            }
        };
    });

    ■ module: "ESNext" / "ES2020"

    import { valueOfPi } from "./constants";
    export const twoPi = valueOfPi * 2;

- KEY: tsc.emit
  EXPLAIN: Emit
  BODY: |
    ■ declaration: boolean                        // 全変数型定義

      [helloWorld.ts]
      export let helloWorld = "hi";

      [helloWorld.d.ts]                           // 生成
      export declare let helloWorld: string;

    ■ declarationDir: string                      // 型定義出力ルートディレクトリ

      "declaration": true,
      "declarationDir": "./types"                 // 以下に型ファイル

    ■ declarationMap: boolean                     // .d.tsのソースマップ生成

      エディターは、Go to Definitionのような機能で元の.tsファイルにジャンプできる

    ■ downlevelIteration: boolean                 // ダウンレベルでの反復処理サポート

      ECMAScript 6以下で Symbol.iterator がない場合は正確な挙動せず

      for / of => for
      const arr = [1, ...arr2]; => const arr = [1].concat(arr2);

      ・問題点
      let missing = [0, , 1];                     // 「1」の要素が欠落している配列
      let spreaded = [...missing];
      "1" in spreaded;                            // true
      let concated = [].concat(missing);
      "1" in concated;                            // false

    ■ emitBOM: boolean                            // バイトオーダーマーク(BOM)出力

    ■ emitDeclarationOnly: boolean                // .d.ts型ファイルのみ出力

      ・JS生成に TypeScript 以外のトランスパイラ使用
      ・d.ts型ファイルのみ必要時

    ■ importHelpers: boolean                      // Spread構文,async 機能などのダウンレベル

      ・downlevelIteration 時に importHelpers が false だとゴリゴリのコード生成
      ・downlevelIterationとimportHelpersの両方を有効化

      import { __read, __spreadArray } from "tslib"; // ヘルパー関数はtslibからインポート
      export function fn(arr) {
        var arr2 = __spreadArray([1], __read(arr), false);
      }

    ■ importsNotUsedAsValues: "remove", "preserve", "error" // import動作制御

      remove:   型のみ参照 import 削除(デフォルト)
      preserve: 未使用値/型の import 保持(副作用保持)
      error:    import 保持(=preserve)、値の import が型としてのみ使用されたらエラー

    ■ inlineSourceMap                             // ソースマップを.js.map => .js 埋め込み

      目的: .map 不許可 web サーバーでデバッグ
      sourceMapとは互いに排他的

      "use strict";
      const helloWorld = "hi";
      console.log(helloWorld);
      //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb......

    ■ inlineSources
    ■ mapRoot
    ■ newLine
    ■ noEmit
    ■ noEmitHelpers
    ■ noEmitOnError
    ■ outDir
    ■ outFile
    ■ preserveConstEnums
    ■ preserveValueImports
    ■ removeComments
    ■ sourceMap
    ■ sourceRoot
    ■ stripInternal

- KEY: tsc.js
  EXPLAIN: JavaScript Support
  BODY: |
    ■ allowJs
    ■ checkJs
    ■ maxNodeModuleJsDepth

- KEY: tsc.editor
  EXPLAIN: Editor Support
  BODY: |
    ■ disableSizeLimit
    ■ plugins

- KEY: tsc.interop
  EXPLAIN: Interop Constraints
  BODY: |
    ■ allowSyntheticDefaultImports
    ■ esModuleInterop
    ■ forceConsistentCasingInFileNames
    ■ isolatedModules
    ■ preserveSymlinks
    ■ verbatimModuleSyntax

- KEY: tsc.backwards
  EXPLAIN: Backwards Compatibility
  BODY: |
    ■ charset
    ■ keyofStringsOnly
    ■ noImplicitUseStrict
    ■ noStrictGenericChecks
    ■ out
    ■ suppressExcessPropertyErrors
    ■ suppressImplicitAnyIndexErrors

- KEY: tsc.lang.env
  EXPLAIN: Language Environment
  BODY: |
    ■ emitDecoratorMetadata
    ■ experimentalDecorators
    ■ jsx
    ■ jsxFactory
    ■ jsxFragmentFactory
    ■ jsxImportSource
    ■ lib
    ■ moduleDetection
    ■ noLib
    ■ reactNamespace
    ■ target
    ■ useDefineForClassFields

- KEY: tsc.compiler.diagnostics
  EXPLAIN: Compiler Diagnostics
  BODY: |
    ■ diagnostics
    ■ explainFiles
    ■ extendedDiagnostics
    ■ generateCpuProfile
    ■ listEmittedFiles
    ■ listFiles
    ■ traceResolution

- KEY: tsc.projects
  EXPLAIN: Projects
  BODY: |
    ■ composite
    ■ disableReferencedProjectLoad
    ■ disableSolutionSearching
    ■ disableSourceOfProjectReferenceRedirect
    ■ incremental
    ■ tsBuildInfoFile

- KEY: tsc.output.formatting
  EXPLAIN: Output Formatting
  BODY: |
    ■ noErrorTruncation
    ■ preserveWatchOutput
    ■ pretty

- KEY: tsc.completeness
  EXPLAIN: Completeness
  BODY: |
    ■ skipDefaultLibCheck
    ■ skipLibCheck
