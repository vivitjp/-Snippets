---
#-------------------------------
# TypeScript
#-------------------------------

#-------------------------------
# Utilities
#-------------------------------
- KEY: ts.Util.Partial<T>
  EXPLAIN: |
    Partial<T>: オプショナルに変換
  BODY: |
    interface Person {
      name: string
      age: number
    }
    const person: Partial<Person> = {
      name: "John",
    }
  FOLD: |
    type Partial<T> = { [P in keyof T]?: T[P] | undefined; }

- KEY: ts.Util.Required<T>
  EXPLAIN: |
    Required<T>: 必須に変換
  BODY: |
    interface Person {
      name?: string
      age?: number
    }
    const person: Required<Person> = {
      name: 'John', //NG age is missing
    }
  FOLD: |
    type Required<T> = { [P in keyof T]-?: T[P]; }

- KEY: ts.Util.Readonly<T>
  EXPLAIN: |
    Readonly<T>: readonlyに変換
  BODY: |
    interface Person {
      name: string
    }
    const person: Readonly<Person> = {
      name: "John",
    }
    person.name = "Smith" //NG
  FOLD: |
    type Readonly<T> = { readonly [P in keyof T]: T[P]; }

- KEY: ts.Util.Record<K,T>
  EXPLAIN: |
    Record<K,T>: { K名: T型 }のレコード型作成
  BODY: |
    type Attribute = Record<string, number>
    const attr: Attribute = {"A": 1}

    const person = ["name", "age"] as const

    type People = Record<typeof person[number], string>
    const people: People = { name: "John", age: "18" }

    ■ 同義の型宣言
    type PeopleMap = {[K in typeof person[number]]: string}
    const peopleMap: PeopleMap = { name: "John", age: "18" }

  FOLD: |
    type Record<K extends keyof any, T> = { [P in K]: T; }

- KEY: ts.Util.Pick<T,K>
  EXPLAIN: |
    Pick<T,K>: T型 から T[K] 選択
  BODY: |
    interface Person {
      name: string
      address: string
      age: number
    }
    type PersonAge = Pick<Person, "name" | "age">
    const people: PersonAge[] = [
      { name: "John", age: 32 },
      { name: "Steve", age: 45 },
    ]
  FOLD: |
    type Pick<T, K extends keyof T> = { [P in K]: T[P]; }

- KEY: ts.Util.Omit<T,K>
  EXPLAIN: |
    Omit<T,K>: T型 から T[K] 排除
  BODY: |
    interface Person {
      name: string
      address: string
      age: number
    }
    type PersonName = Omit<Person, "address" | "age">
    const people: PersonName[] = [{ name: "John" }, { name: "Steve" }]
  FOLD: |
    type Omit<T, K extends keyof any> = { [P in Exclude<keyof T, K>]: T[P]; }

- KEY: ts.Util.Exclude<Keys,K>
  EXPLAIN: |
    Exclude<Keys,K>: Keys から K 除外 (Key操作のみ)
  BODY: |
    interface TypeA {
      id: number
      name: string
    }
    interface TypeB {
      id: number
      address: string
    }

    type Excluded1 = Exclude<keyof TypeA, keyof TypeB> // 重複する "id" を削除
    type Excluded2 = Exclude<string | number | boolean, string | boolean> // 残り: number
  FOLD: |
    type Exclude<Keys,K> = Keys extends K ? never : Keys

- KEY: ts.Util.Extract<Keys,K>
  EXPLAIN: |
    Extract<Keys,K>: Keys から K 抽出 (Key操作のみ)
  BODY: |
    interface A {
      id: number
      name: string
    }
    interface B {
      id: number
      address: string
    }

    type Extracted1 = Extract<keyof A, keyof B> // 重複する "id" を抽出
    type Extracted2 = Extract<string | number | boolean, string | Function> // 抽出: string
  FOLD: |
    type Extract<Keys,K> = Keys extends K ? Keys : never

- KEY: ts.Util.NonNullable<T>
  EXPLAIN: |
    NonNullable<T>: null/undefined 除外
  BODY: |
    interface A {
      id?: number | null
      name: string | undefined
    }
    type ANonNU = NonNullable<A["id"]> // number
  FOLD: |
    type NonNullable<T> = T & {}

- KEY: ts.Util.DeepNonNullable<T>
  EXPLAIN: |
    DeepNonNullable<T>: 再帰的に null/undefined 除外(カスタムUtility)
  BODY: |
    type Primitive = number|string|boolean|bigint|symbol|undefined|null
    type Builtin = Primitive | Function | Date | Error | RegExp
    type DeepNonNullable<T> = T extends Builtin
      ? NonNullable<T>
      : { [key in keyof T]-?: DeepNonNullable<T[key]> }

    interface A {
      id?: number | null
      name: string | undefined
      address:{ 
        zip: string | undefined
        city: string | null
      }|undefined
    }
    type ANonNU = DeepNonNullable<A>
  FOLD: |

- KEY: ts.Util.Maybe<T>
  EXPLAIN: |
    Maybe<T>: undefined/null追加(ApolloGraphQLカスタムUtility)
  BODY: |
    type Maybe<T> = { [P in keyof T]: P | undefined | null }
  FOLD: |

- KEY: ts.Util.Parameters<T>
  EXPLAIN: |
    Parameters<T>: メソッドの引数型取得
  BODY: |
    const funcA = (text: string, num: number) => { }
    type A1 = Parameters<typeof funcA> // [string, number]
    type A2 = Parameters<typeof funcA>[number] // string | number
  FOLD: |
    type Parameters<T extends (...args: any) => any>
      = T extends (...args: infer P) => any ? P : never

- KEY: ts.Util.ConstructorParameters<T>
  EXPLAIN: |
    ConstructorParameters<T>: コンストラクタの属性型群取得
  BODY: |
    class Person {
      name: string
      age: number
      constructor(name: string, age: number) {
        this.name = name
        this.age = age
      }
    }
    type A = ConstructorParameters<typeof Person> // [string, number]
  FOLD: |
    type ConstructorParameters<T extends abstract new (...args: any) => any>
      = T extends abstract new (...args: infer P) => any ? P : never

- KEY: ts.Util.ReturnType<T>
  EXPLAIN: |
    ReturnType<T>: メソッドの戻り型取得
  BODY: |
    const func2 = (): number => 1
    type A = ReturnType<typeof func2> // number
  FOLD: |
    type ReturnType<T extends (...args: any) => any> 
      = T extends (...args: any) => infer R ? R : any

- KEY: ts.Util.Awaited<T>
  EXPLAIN: |
    Awaited<T>: 非同期awaitの戻り型取得
  BODY: |
    ■ 非同期関数の戻り型Promise<string> から Promise を除去

    type A = Awaited<Promise<string>> //string
    type B = Awaited<Promise<Promise<number>>> //number
  FOLD: |
    type Awaited<T> = T extends null | undefined ? T : T extends object & {
        then(onfulfilled: infer F, ...args: infer _): any;
    } ? F extends (value: infer V, ...args: infer _) => any ? Awaited<...> : never : T

- KEY: ts.Util.InstanceType<T>
  EXPLAIN: |
    InstanceType<T>: インスタンス型
  BODY: |
    class C {
      x = 0;
      y = 0;
    }
    type T0 = InstanceType<typeof C>;             = C
    type T1 = InstanceType<any>;                  = any
    type T2 = InstanceType<never>;                = never
    type T3 = InstanceType<string>;               = any
         * 'string' does not satisfy the constraint 'abstract new (...args: any) => any'
    type T4 = InstanceType<Function>;             = any
         * 'Function' does not satisfy the constraint 'abstract new (...args: any) => any'
         * 'Function' provides no match for the signature 'new (...args: any): any'
  FOLD: |
    type InstanceType<T extends abstract new (...args: any) => any> 
      = T extends abstract new (...args: any) => infer R ? R : any

- KEY: ts.Util.NoInfer<T>
  EXPLAIN: |
    NoInfer<T>: 型推論ブロック
  BODY: |
    function getColor<C extends string>(
      colors: C[],
      defaultColor?: NoInfer<C>,
    ) { }

    getColor(["red", "yellow", "green"], "red");   // OK
    getColor(["red", "yellow", "green"], "blue");  // Error
  FOLD: |
    type NoInfer<T> = intrinsic

#-------------------------------
# object Literal
#-------------------------------

- KEY: ts.objectLiteral.Util.Union
  EXPLAIN: |
    Key名(オブジェクトリテラル)の連結
  BODY: |
    type Id = "A" | "B"
    type Kind = "X" | "Y"
    type NewId = `${Id | Kind}_id`
    const newId: NewId = "A_id" // 'B_id', 'X_id', 'Y_id'

- KEY: ts.objectLiteral.Util.Uppercase<T>
  EXPLAIN: |
    Uppercase<T>: Key名(オブジェクトリテラル)の大文字化
  BODY: |
    type A = "name"
    type C = Uppercase<A> //"NAME"

- KEY: ts.objectLiteral.Util.Lowercase<T>
  EXPLAIN: |
    Lowercase<T>: Key名(オブジェクトリテラル)の小文字化
  BODY: |
    type A = "NAME"
    type S = Lowercase<A> //"name"

- KEY: ts.objectLiteral.Util.Capitalize<T>
  EXPLAIN: |
    Capitalize<T>: Key名(オブジェクトリテラル)の先頭文字の大文字化
  BODY: |
    type A1 = "name"
    type S1 = Capitalize<A1> //"Name"
    type A2 = "NAME"
    type S2 = Capitalize<A2> //注意:"NAME"
    type S3 = Capitalize<Lowercase<A2>> //"Name"

- KEY: ts.objectLiteral.Util.Uncapitalize<T>
  EXPLAIN: |
    Uncapitalize<T>: Key名(オブジェクトリテラル)の先頭文字の小文字化
  BODY: |
    type A1 = "Name"
    type S1 = Uncapitalize<A1> //"name"
    type A2 = "NAME"
    type S2 = Uncapitalize<A2> //注意:"NAME"
