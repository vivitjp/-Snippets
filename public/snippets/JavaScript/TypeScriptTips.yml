---
#-------------------------------
# TypeScript
#-------------------------------

#-------------------------------
# union
#-------------------------------
- KEY: ts.union.fromObject
  EXPLAIN: unionをobjectから生成
  BODY: |
    const person = {
      a: "Name",
      b: "Address",
    } as const

    type Person = typeof person[keyof typeof person]
    // "Name" | "Address"

- KEY: ts.union.fromArray
  EXPLAIN: unionをarrayから生成
  BODY: |
    const person = ["Name","Address"] as const
    type Person = (typeof person)[number]
    // "Name" | "Address"

#-------------------------------
# Switch
#-------------------------------
- KEY: ts.switch.never
  EXPLAIN: switchでneverチェック
  BODY: |
    export const func = (name: Person) => {
      switch (name) {
        case "Name":
          break
        case "Address":
          break
        default: {
          const _exhaustiveCheck: never = name
          throw new Error(`Switch Error: ${name}`)
        }
      }
    }

#-------------------------------
# 判別可能なUnion型
#-------------------------------
- KEY: ts.unionToBranch
  EXPLAIN: 判別可能なUnion型
  BODY: |
    interface Square {
      kind: "square"
      size: number
    }
    interface Rectangle {
      kind: "rectangle"
      width: number
      height: number
    }
    type Shape = Square | Rectangle

    const area = (s: Shape) => {
      switch (s.kind) {
        case "square":    return s.size * s.size
        case "rectangle": return s.width * s.height
        default:          return null
      }
    }

#-------------------------------
# 関数のオーバーロード
#-------------------------------
- KEY: ts.overload
  EXPLAIN: 関数のオーバーロード
  BODY: |
    interface Overloaded {
      (foo: string): string
      (foo: number): number
    }

    // Arrow 関数NG
    function stringOrNumber(foo: number): number
    function stringOrNumber(foo: string): string
    function stringOrNumber(foo: any): any {
      if (typeof foo === "number") {
        return foo * foo
      } else if (typeof foo === "string") {
        return `Hello ${foo}`
      }
    }

#-------------------------------
# 構造的部分型とその例外: Freshness
#-------------------------------
- KEY: ts.freshness
  EXPLAIN: 構造的部分型の例外
  BODY: |
    const foo = { x: 1, y: 2, z: 3 }
    const onlyX: { x: number } = foo //OK

    const func1 = ({ name }: { name: string }) => {
      console.log(name)
    }
    const func2 = ({ name, ...args }: { name: string; [key: string]: unknown }) => {
      console.log(name)
    }

    var person = { name: "matt", job: "officer" }
    func1(person) //構造的部分型 OK
    func1({ name: "matt", job: "officer" }) //構造的部分型の例外 Object Literal: NG
    func2({ name: "matt", job: "officer" }) //OK

#-------------------------------
# 型ガード(in)
#-------------------------------
- KEY: ts.typeGuard.in
  EXPLAIN: 型ガード(in)
  BODY: |
    interface A { x: number }
    interface B { y: string }
    function typeGuardIn(q: A | B) {
      if ("x" in q) console.log(q.x)
      else console.log(q.y)
    }

#-------------------------------
# 型ガード
#-------------------------------
- KEY: ts.typeGuard.user
  EXPLAIN: 型ガード(ユーザ定義)
  BODY: |
    interface A { a: number; common: string }
    interface B { b: number; common: string }

    function isFoo(arg: any): arg is A {
      return arg.a !== undefined
    }

    export function func(arg: A | B) {
      if (isFoo(arg)) {
        console.log(arg.a) // OK, NG:arg.b
      } else {
        console.log(arg.b) // OK, NG:arg.a
      }
    }

#-------------------------------
# 型判定
#-------------------------------
- KEY: ts.typeGuard.string
  EXPLAIN: 型ガード(文字列)
  BODY: |
    const isString = (value: unknown): value is string => {
      return typeof value === "string" && value !== null
    }

- KEY: ts.typeGuard.stringArray
  EXPLAIN: 型ガード(文字列配列)
  BODY: |
    const isStringArray = (value: unknown): value is string[] => {
      return (
        typeof value === "object" &&
        value !== null &&
        Array.isArray(value) &&
        !value.some((v) => !isString(v))
      )
    }

- KEY: ts.typeGuard.object
  EXPLAIN: 型ガード(object)
  BODY: |
    // 全属性を"Optional"、全値はunknown型を返す
    type WouldBe<T> = { [P in keyof T]?: unknown }

    const isTypeObject = <T extends Record<string, unknown>>(
      value: unknown
    ): value is WouldBe<T> => typeof value === "object" && value !== null

- KEY: ts.typeGuard.custom
  EXPLAIN: 型ガード(任意の型)
  BODY: |
    type Foo = {
      a: string
      b: number
    }
    const isFoo = (value: unknown): value is Foo =>
      isTypeObject<Foo>(value) &&
      typeof value.a === "string" &&
      typeof value.b === "number"

#-------------------------------
# Literal 型 推論
#-------------------------------
- KEY: ts.objectLiteral.guess
  EXPLAIN: Literal型推論
  BODY: |
    function func(A: "foo") {}

    const objA = { A: "foo" }
    func(objA.A) //NG: objA.A = string

    const objB = { B: "foo" as const }
    func(objB.B) //OK

    const objC = { C: "foo" } as const
    func(objC.C) //OK

    const objD: { [key: string]: "foo" } = {
      D: "foo",
    }
    func(objD.D) //OK

#-------------------------------
# ReadOnly
#-------------------------------
- KEY: ts.readonly
  EXPLAIN: 読み取り専用型
  BODY: |
    const foo: number[] = [1, 2, 3]
    foo.push(4) // OK

    const fooRO: ReadonlyArray<number> = [1, 2, 3]
    fooRO.push(4) // NG
