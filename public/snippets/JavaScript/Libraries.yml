---
#-------------------------------
# JavaScript
#-------------------------------

#-------------------------------
# libraries（数学）
#-------------------------------
- KEY: js.libraries.title
  CATEGORY: ライブラリ

- KEY: js.libraries.npm
  EXPLAIN: npm 検索
  BODY: |
    https://www.npmjs.com/

- KEY: js.libraries.formulajs
  EXPLAIN: |
    エクセル: formulajs
  BODY: |
    Microsoft Excelフォーミュラ関数のJavaScriptの実装を構築

    officail: https://formulajs.info/
    github: 
    npm:    https://www.npmjs.com/package/@formulajs/formulajs
    cdn:    <script src="https://cdn.jsdelivr.net/npm/jstat@1.9.2/dist/jstat.min.js"></script>

    // Install
    npm i @formulajs/formulajs

- KEY: js.libraries.simple-statistics
  EXPLAIN: |
    統計: simple-statistics
  BODY: |
    github: https://github.com/simple-statistics/simple-statistics
    URL:    https://simple-statistics.github.io/docs/

    // IMPORT
    import * as ss from 'simple-statistics'
    import {min} from 'simple-statistics'

#-------------------------------
# libraries（数学）
#-------------------------------
- KEY: js.libraries.math
  CATEGORY: 数学ライブラリ

- KEY: js.libraries.math.round
  EXPLAIN: 四捨五入
  BODY: |
    /**
    * 四捨五入
    * @param value 数値
    * @param fp 整数:少数点,マイナスで任意の桁
    * @returns 四捨五入された数値
    */
    const round = (value: number, fp = 0) => {
      const k = value < 0 ? -1 : 1
      return (k * Math.round(value * k * 10 ** fp)) / 10 ** fp
    }

- KEY: js.libraries.math.roundUp
  EXPLAIN: 切り上げ
  BODY: |
    /**
    * 切り上げ
    * @param value 数値
    * @param fp 整数:少数点,マイナスで任意の桁
    * @returns 切り上げされた数値
    */
    const roundUp = (value: number, fp = 0) => {
      const k = value < 0 ? -1 : 1
      return (k * Math.ceil(value * k * 10 ** fp)) / 10 ** fp
    }

- KEY: js.libraries.math.roundDown
  EXPLAIN: 切り下げ
  BODY: |
    /**
    * 切り下げ
    * @param value 数値
    * @param fp 整数:少数点,マイナスで任意の桁
    * @returns 切り下げされた数値
    */
    const roundDown = (value: number, fp = 0) => {
      const k = value < 0 ? -1 : 1
      return (k * Math.floor(value * k * 10 ** fp)) / 10 ** fp
    }

- KEY: js.libraries.math.ceiling
  EXPLAIN: ceiling
  BODY: |
    /**
    * Excel Ceiling(指定基準値の最も近い倍数に数値切り上げ)
    * @param value 数値
    * @param significance 倍数の基準値
    *    以下、エクセルと仕様一致
    *    1) 0値では 0 を返す
    *    2) マイナス値では null を返す
    * @param fp 整数:少数点
    * @returns 切り上げ後、丸め誤差を削除した数値
    */
    const ceiling = (target: number, significance: number, fp: number) => {
      if (significance === 0) return 0
      if (significance < 0) return null
      return (
        Math.round(Math.ceil(target / significance) * significance * 10 ** fp) /
        10 ** fp
      )
    }

- KEY: js.libraries.math.minMax
  EXPLAIN: MIN ＆ MAX(文字列)
  BODY: |
    /**
    * MIN ＆ MAX
    * @param 文字列数字配列(["","20","10"]) 空文字対応
    * @returns 空白や０以外で最も MIN/MAX を"数値"で返す
    *
    * エクセルの MIN(PARAM1[, PARAM2,...])は空白を除外するが、
    * JSの Math.min関数は0も精査するので、簡単な置換では戻り値に違いがでる。
    */

    function min(...args: string[]) {
      return args.reduce((acc, cur) => {
        const curNum = Number(cur)
        if (isNaN(curNum) || cur === "") return acc
        return acc === null || (acc !== null && acc > curNum) ? curNum : acc
      }, null as null | number)
    }

    function max(...args: string[]) {
      return args.reduce((acc, cur) => {
        const curNum = Number(cur)
        if (isNaN(curNum) || cur === "") return acc
        return acc === null || (acc !== null && acc < curNum) ? curNum : acc
      }, null as null | number)
    }

#-------------------------------
# libraries（数学）
#-------------------------------
- KEY: js.sampleCode.title
  CATEGORY: サンプルコード

- KEY: js.sampleCode.fileUpload
  EXPLAIN: ファイルアップロード
  BODY: |
    import { Box, Button, Flex } from "@chakra-ui/react";
    import { ChangeEvent, Dispatch, SetStateAction, useRef, useState } from "react";

    export const FileUploadButton = ({
      setSavedData,
      type = ".txt",
    }: {
      setSavedData: Dispatch<SetStateAction<string | undefined>>;
      type?: string;
    }) => {
      const refInput = useRef<HTMLInputElement>(null);
      const handleButton = () => {
        refInput.current?.click();
      };
      const [msg, setMsg] = useState("");

      const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {
        if (!e.target.files || e.target.files.length === 0) {
          console.error("保存データファイル選択");
          return;
        }

        const file = e.target.files[0];

        const reader = new FileReader();
        reader.onload = (event) => {
          const content = event.target?.result;
          try {
            setSavedData(content as string);
            setMsg("ロードされました");
          } catch (error) {
            console.error(error);
            setMsg("ロード失敗しました");
          }
        };
        reader.readAsText(file);
      };

      return (
        <Flex alignItems={"center"}>
          <Button onClick={handleButton}>保存データファイル使用</Button>
          <input
            ref={refInput}
            hidden={true}
            type="file"
            accept={type}
            onChange={handleFileChange}
          />
          <Box ml={5}>{msg}</Box>
        </Flex>
      );
    };
