# ----------------------------
# JavaScript Methods
# ----------------------------
- KEY: js.methods.version
  EXPLAIN: Version
  OPTIONS:
    COLS: 2
  BODY: |
    ■ ECMAScript 5.1 2009/12
    ■ ES2015(別名ES6) 2011/6

    ■ ES2016(別名ES7) 2016/6
      Array.includes
      Exponentiation operator

    ■ ES2017(別名ES8) 2017/6
      Object.values/Object.entries
      String.padStart/String.padEnd
      Object.getOwnPropertyDescriptors
      末尾カンマ許容
      Async/Await
      Shared memory and atomics

    ■ ES2018(別名ES9) 2018/6
      オブジェクトのRest/Spread
      Promise.finally
      テンプレートリテラルの改修
      正規表現:sオプション
      正規表現:名前付きグループ
      正規表現:後読み
      正規表現:uオプション
      for-await-of

    ■ ES2019(別名ES10)
      catch引数の不要化
      JSON superset
      Symbol.description
      Function.toString revision
      Object.fromEntries
      Well-formed JSON.stringify
      String.trimStart/String.trimEnd
      Array.flat/Array.flatMap

    ■ ES2020(別名ES11)
      BigInt
      for-in ループにおける順序保証
      ヌル合体(??)演算子
      Optional Chaining(?.)
      globalThis
      String.matchAll
      Dynamic Import
      export * as ns from module
      import.meta
      Promise.allSettled

    ■ ES2021(別名ES12)
      ||= &&= ??=
      数値セパレータ(_)
      String.replaceAll
      Promise.any
      WeakRef

    ■ ES2022(別名ES13)
      Top-level await
      Array.at/String.at
      Private fields(#)
      Static fields
      静的イニシャライザーブロック
      Object.hasOwn
      Error.cause
      正規表現:dオプション

- KEY: js.methods.structural
  EXPLAIN: structural
  OPTIONS:
    COLS: 2
  BODY: |
    try{ throw }
    catch([e]){ ... }
    finally{ ... }

    switch(){ case: break; default: }
    if(){ ... }else{ ... }
    for(in/of){ ... }
    while(){ ... }
    do{ ... } while()
    break/continue
    label/goto
    with(trg){ ... }

- KEY: js.methods.debug
  EXPLAIN: debug
  BODY: |
    debugger
    console.log()

- KEY: js.methods.function
  EXPLAIN: Function
  OPTIONS:
    COLS: 2
  BODY: |
    this/arguments

    func.length
    .length: 引数数
    .caller[X]
    .call => class使用
    .apply => class使用
    .bind(thisArg,arg1,...)
    .toString()

    (a1,a2) =>{return a1+a2}
    (a1,a2) => a1+a2
    (a1) => a1*2
    a1 => a1*2
    () => { return }

- KEY: js.methods.operator
  EXPLAIN: Operator
  OPTIONS:
    COLS: 2
  BODY: |
    a=b
    a=b=c
    a=(b=c)
    + - * / % ** ++ --
    == != === !== && || !
    A ? B : C
    &:AND |:OR ^:XOR ~:NOT
    << >> >>>
    += -= *= /= %= **=
    &= |= ^= <<= >>= >>>=

- KEY: js.methods.type
  EXPLAIN: Type
  BODY: |
    var
    let
    const
    typeof

    ■ Primitive
    undefined
    null
    boolean
    string
    number
    bigint
    symbol

    function
    object

- KEY: js.methods.object
  EXPLAIN: Object
  OPTIONS:
    COLS: 2
  BODY: |
    new Object([val])
    obj={key:val,...}

    Object.create(child,prp)
    Object.prototype.prop
    Object.getPrototypeOf(obj)
    Object.setPrototypeOf(obj)
    Object.isPrototypeOf(obj)
    __proto__[X]

    Object.keys(obj)
    Object.values(obj)
    Object.entries(obj)
    Object.fromEntries(obj)

    Object.getOwnPropertyNames()
    Object.getOwnPropertySymbols()
    Object.hasOwnProperty()
    Object.propertyIsEnumerable

    Object.defineProperty(o,p,d)
    Object.defineProperties(o,p)
    Object.getOwnProperty

    Object.freeze(obj)
    Object.seal(obj)
    Object.preventExtensions(obj)
    Object.isFrozen(obj)
    Object.isSealed(obj)
    Object.isExtensible(obj)

    Object.toString()
    Object.toLocaleString()
    Object.toSource[X]

    .constructor :参照
    assign(trg,obj,obj)
    is(obj,obj)
    .valueOf()

    set(val)/get
    ...obj

    instanceof

- KEY: js.methods.class
  EXPLAIN: Class
  BODY: |
    class
    new/delete
    constructor()
    extends
    static prop/func
    this/super
    get/set

- KEY: js.methods.date/time
  EXPLAIN: Date/Time
  OPTIONS:
    COLS: 2
  BODY: |
    new Date()
    .get/setFullYear/UTC
    .get/setYear/UTC[X]
    .get/setMonth/UTC
    .get/setDate/UTC
    .getDay/UTC
    .get/setHours/UTC
    .get/setMinutes/UTC
    .get/setSeconds/UTC
    .get/setMillis../UTC

    .getTime()
    .setTime()
    .getTimezoneOffset

    Date.now()
    Date.parse()
    Date.UTC()

    ■ フォーマット
    .toString()
    .toDateString()
    .toTimeString()
    .toUTCString()
    .toLocaleString()
    .toLocaleDateString()
    .toLocaleTimeString()
    .toGMTString()
    .toISOString()
    .toJSON()

- KEY: js.methods.math
  EXPLAIN: Math
  OPTIONS:
    COLS: 2
  BODY: |
    ■ 定数
    Math.PI
    Math.E
    Math.exp/expm1()
    Math.log/log2/log10/log1p()
    Math.LN2/LN10/LOG2E/LOG10E

    ■ Methods
    Math.random()
    Math.abs()
    Math.ceil/floor()
    Math.round()    *丸目誤差
    Math.max/min()
    Math.pow()
    Math.sqrt()
    Math.cbrt()
    Math.SQRT1_2
    Math.SQRT2

    Math.cos/sin/tan()
    Math.acos/asin/atan()
    Math.acosh/asinh/atanh()
    Math.atan2(x,y)

    Math.clz32()
    Math.fround()
    Math.hypot()
    Math.imul(x,y)
    Math.sign()

- KEY: js.methods.number
  EXPLAIN: Number
  OPTIONS:
    COLS: 2
  BODY: |
    ■ 定数
    Number.NaN
    Number.isNaN(isNaN)
    Number.MAX_VALUE
    Number.MIM_VALUE
    Number.POSITIVE_INFINITY
    Number.NEGATIVE_INFINITY
    Number.isFinite()
    Number.isInteger()
    Number.EPSILON
    Number.MIN_SAFE_INTEGER
    Number.MAX_SAFE_INTEGER
    Number.isSafeInteger

    ■ Methods
    number.toString(radix)
    number.toExponential
    number.toFixed(digi)
    number.toPrecision()
    Intl.NumberFormat

- KEY: js.methods.string
  EXPLAIN: String
  OPTIONS:
    COLS: 2
  BODY: |
    new String()
    string.length
    string.charAt()
    string.substring(from,to)
    string.split(from,to)
    string.substr(from,len)
    string.trim()
    string.trimStart/trimEnd()
    string.split(sep,limit)
    string.concat()
    string.repeat(n)
    string.replace(reg,new) *
    string.toLowerCase()
    string.toUpperCase()

    string.indexOf()
    string.lastIndexOf()
    string.startsWith(str)
    string.endsWith(str)
    string.includes(str)

    string.match(reg)
    string.search(reg)

    string.charCodeAt(n)
    string.codePointAt(n)

    string.padStart(len, str)
    string.padEnd(len, str)

    JSON.parse()
    JSON.stringify()

    Number(str)
    parseInt(str)
    Number.parseInt(str)
    parseFloat(str)
    Number.parseFloat(str)

    .anchor/link()
    .fontcolor/fontsize()
    .big/small()
    .blink()
    .bold/italics()
    .strike()
    .sub/sup()

    .normalize: unicode

- KEY: js.methods.regular expression
  EXPLAIN: Regular Expression
  OPTIONS:
    COLS: 2
  BODY: |
    newRegExp(/ptn/flag)

    ptn = /[0-9]+/
    ptn.exec(str)
    ptn.test(str)
    str.match(ptn)

    ptn.compile(/ptn/flag)[X]

    x               文字
    xyz             文字列
    (x)             キャプチャリング
    [xyz]           x,y,zの1文字
    [x-z]           x～zどれか
    [^xyz]          x,y,zでない
    .               任意1(\n,\r以外)
    (a|b)           a or b
    ^x              始
    x$              終
    x*              0個>(量指定子)
    x+              1個>(量指定子)
    x?              =x{0,1}
    x{n}            n個
    x{n,}           n個>
    x{n,m}          n～m個
    x*?             0個> NonGreedy
    x+?             1個> NonGreedy
    x??             0~1個 NonGreedy
    x{n}?           n個 NonGreedy
    x{n,}?          n個> NonGreedy
    x{n,m}?         n～m個 NonGreedy
    [\b]            バックスペース
    (?:x)           x,$1..$n参照除外
    x(?=y)          x後のy: x
    x(?!y)          x後のyない: x
    (?<=x)y         x後のy: y
    (?<!x)y         x後のyない: y

    \0              NUL
    \b              区切
    \B              \b以外
    \cX             Ctrl-X
    \d              =[0-9]
    \D              =[^0-9]
    \f              改Page
    \n              改行
    \r              復帰
    \s              WhiteSpace
    \S              \s以外
    \t              タブ
    \v              垂直タブ
    \w              =[A-Za-z0-9_]
    \W              =[^A-Za-z0-9_]
    \n              マッチn番目
    \xhh            16進数hh
    \uhh            UTF-16hh
    \/              slash
    \\              back slash
    \.              dot
    \他             他自身
    \p              {sc=Hiragana}等

    g               Global
    i               Ignore case
    m               Multiline
    u               Unicode surrogate
    y               lastIndex後検索
    s               (.)が全文字

    regexp.flags
    .global
    .ignoreCase
    .multiline
    .unicode
    .sticky
    .source: ptn文字
    .lastIndex

    .$記号[X]/.$n[X]
    .lastMatch[X]
    .leftContext[X]
    .rightContext[X]
    .lastParen[X]
    .input[X]

    ?<名>ptn/flg(u)/groups
    res="2019-12";
    res.match(/(?<y>\d+)-(?<m>\d+)/u)
    res.groups.y
    res.groups.m

- KEY: js.methods.replace
  EXPLAIN: Replace
  BODY: |
    str.replace(/ptn/flg,rep)
    $&              全体挿入
    $`              前部分挿入
    $'              後部分挿入
    $n              n(1-2桁)数
    $<name>         nameを挿入
    $$              "$"挿入

- KEY: js.methods.array
  EXPLAIN: Array
  OPTIONS:
    COLS: 2
  BODY: |
    Array([n])
    Array(e1,e2,..)
    Array.from(arrLike)
    Array.of(e1,e2,..)
    .length

    for(...)
    .forEach(cbm,this)
    .entries()
    .keys()
    .values()
    .map(cb,this)
    .reduce(cb,this)
    .reduceRight(cb,this)

    .indexOf(e1)
    .includes(e1)
    .isArray(val)
    idx in arr
    .some(cb,this)
    .every(cb,this)
    .find(cb,this)
    .findIndex(cb,this)

    .concat(arr2)
    .join(sep)
    .unshift(e1,e2,...):top
    .push(e1,e2,...):btm
    .shift():top
    .pop():btm
    .slice(bgn,end)
    .splice(bgn,n,e1,e2,..)
    delete arr[n]
    .filter(cb,this)

    .sort(func)
    .reverse()

    .toString()
    .toLocaleString()

    .fill(val,bgn,end)
    .copyWithin(trg,bgn,end)
    .flat(depth)
    .flatMap(cb)

    [...]
    [a,b]=[c,d]

    ArrayBuffer()
    .buffer
    .byteLength
    Int8Array()
    Uint8Array()
    Uint8ClampedArray()
    Int16Array()
    Uint16Array()
    Int32Array()
    Uint32Array()
    Float32Array()
    Float64Array()

- KEY: js.methods.map (weakmap)
  EXPLAIN: Map (Weakmap)
  BODY: |
    new Map()
    .set('1', 'str1')
    .set(1, 'num1')
    .set(true, 'bool1')

    .set(k,v)
    .get(k)
    .size
    .keys()
    .values()
    .entries()
    .forEach(cb,this)
    .has(k)
    .delete(k)
    .clear()

- KEY: js.methods.set (weakset)
  EXPLAIN: Set (Weakset)
  OPTIONS:
    COLS: 2
  BODY: |
    new Set([iterable])
    john = { name:"John" }
    pete = { name:"Pete" }
    .add(john)
    .add(pete)
    .add(john)      // dup

    .add(obj)
    .size
    .has(obj)
    .delete(obj)
    .clear()
    .keys()
    .values()
    .entries()      // key=val

    for(v of set){ ... }
    for(k of .keys()){ ... }
    for(v of.values()){ ... }
    for([k,v]of .entries())

    .forEach((v)=>{ ... })
    .forEach((v,k)=>{ ... })
    .forEach((v,k,set)=>{ ... })
    .forEach((v,k)=>{ ... }, set)

- KEY: js.methods.symbol
  EXPLAIN: Symbol
  OPTIONS:
    COLS: 2
  BODY: |
    sym = Symbol("")
    .description
    .prototype
    .keyFor(sym)
    .iterator
    .asyncIterator
    .match
    .replace
    .search
    .split
    .hasInstance
    .isConcatSpreadable
    .unscopables
    .species
    .toPrimitive
    .toStringTag

- KEY: js.methods.module
  EXPLAIN: Module
  BODY: |
    import './'
    import { ... } from './'
    import { as } from './'
    import * as from './'
    export function/var/let

- KEY: js.methods.promise/then
  EXPLAIN: Promise/then
  OPTIONS:
    COLS: 2
  BODY: |
    function getProm(){
      new *P((ok,no)=>{
        return ok(1)/no(0);
      });
    }
    prom = getProm();
    prom.then(
      (res)=>{f_ok(res)},
      (err)=>{f_no(err)}
    ).catch()

    ■ new Promise((y,n)=>{
      y(1)/n(0)
    }).then(
      (res)=>{f_ok(res)},
      (err)=>{f_no(err)}
    ).catch()

    ■ Promise.all([
      new *P((y,n)=>{ ... }),
      new *P((y,n)=>{ ... }),
    ]).then(
      (res)=>{f_ok(res)},
      (err)=>{f_no(err)}
    )

    ■ Promise.race([
      new *P((y,n)=>{ ... }),
      new *P((y,n)=>{ ... }),
    ]).then(
      (res)=>{f_ok(res)},
      (err)=>{f_no(err)}
    )

- KEY: js.methods.async/await
  EXPLAIN: Async/Await
  BODY: |
    例)async funcion func(a){
      try{
        val= await getProm();
        val= await getProm();
      } catch(e){ ... }
    }

    例)asyObj={
    [Symbol.asyncIterator](){
      return {
        next() {
        return new *P(a=>{ ... });
      }};
    }};

    async funcion for_await_of(){
      for await(n of asyObj){ ... }
    };
