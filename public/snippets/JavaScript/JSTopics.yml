---
#-------------------------------
# JavaScript
#-------------------------------

#-------------------------------
# protoType
#-------------------------------
- KEY: js.protoType.title
  CATEGORY: プロトタイプ

- KEY: js.protoType.method
  EXPLAIN: ProtoType 追加
  BODY: |
    String.addId = function (str: string) {
      return this + (this.length ? "-" + str : str)
    }
    //types.d.ts への追加
    export declare global {
      interface String {
        addId(id: string): string
      }
    }

#-------------------------------
# Class
#-------------------------------
- KEY: js.class.title
  CATEGORY: クラス(Class)

- KEY: js.class.private
  EXPLAIN: プライベートプロパティ
  BODY: |
    ■ Static版

    const Foo1 = (() => {
      function privateStaticMethod (string) { console.log(string); }

      return class Foo1 {
        bar () { privateStaticMethod('Hello, World!'); }
      };
    })();
    new Foo1().bar();

    ■ Instance版1

    const Foo2 = (() => {
      var privateMap = new WeakMap;

      return class Foo2 {
        constructor (message) {
          const privateObject = Object.create(null);
          privateObject.message = message;
          privateMap.set(this, privateObject);
        }

        bar () { console.log(privateMap.get(this).message); }
      };
    })();

    new Foo2('Hello, World!').bar();
    new Foo2('Hello, JavaScript!').bar();

    ■ Instance版2

    const createPivateMap = () => {
      const wm = new WeakMap;
      return function (key /* [, value] */) {
        return wm.has(key) ? wm.get(key) : wm.set(key, arguments[1]);
      };
    };

    const Foo3 = (() => {
      var pm = createPivateMap();

      return class Foo3 {
        constructor (message) {
          pm(this, {message: message});
        }
        bar () { console.log(pm(this).message); }
      };
    })();

    new Foo3('Hello, World!').bar();
    new Foo3('Hello, JavaScript!').bar();

#-------------------------------
# Object
#-------------------------------
- KEY: js.obj.title
  CATEGORY: オブジェクト(Object)

- KEY: js.obj.isObject
  EXPLAIN: Object判定関数
  BODY: |
    const isObject = (obj: any) => {
      return obj !== null && typeof obj === "object"
    }

- KEY: js.obj.isEmpty
  EXPLAIN: Object「空」判定関数
  BODY: |
    const isEmpty = (obj: any) => {
      return Object.keys(obj).length === 0 && obj.constructor === Object
    }

- KEY: js.obj.removeUndefined
  EXPLAIN: object から undefined を削除
  BODY: |
    const removeUndefined = (obj: object) => {
      return Object.fromEntries(
        Object.entries(obj).filter(([, v]) => v !== undefined)
      )
    }

- KEY: js.obj.deepCopy.OK
  EXPLAIN: 望ましい DeepCopy
  BODY: |
    const copiedObject = structuredClone(object)

- KEY: js.obj.deepCopy.NG
  EXPLAIN: 望ましくない DeepCopy
  BODY: |
    //Undefined が削除される
    const deepCopyNG = (objOrArr: object) => {
      return JSON.parse(JSON.stringify(objOrArr))
    }

- KEY: js.obj.deepCopy.sample
  EXPLAIN: サンプル
  BODY: |
    //オブジェクト
    const objectFrom = {
      a: 12,
      b: "A",
      c: undefined,
      d: null,
      e: true,
      f: [1, undefined],
      g: { a: 1, b: "B", c: [5, undefined], d: { k: 1 } },
    };
    --------------------------------------------------
    //■ structuredClone
    const objectToClone = structuredClone(objectFrom);
    objectFrom.a = 13;
    console.log(objectFrom);
    console.log(objectToClone);  // objectFromから影響を受けない
    --------------------------------------------------
    //■ JSON.parse & stringify
    const objectToJsonCopy = JSON.parse(JSON.stringify(objectFrom));
    //console.log(objectToJsonCopy);
    const objectToJsonCopy_Result = {
      a: 12,
      b: "A",
      // c: undefined, <--- 消失
      d: null,
      e: true,
      f: [1, undefined],
      g: { a: 1, b: "B", c: [5, undefined], d: { k: 1 } },
    };
    // objectFrom.f[1] = 0
    // console.log(objectFrom.f);
    // console.log(objectToJsonCopy.f);  // objectFromから影響を受けない

- KEY: js.obj.shallowCopy
  EXPLAIN: 配列の階層限定のDeepCopy
  BODY: |
    const shallowCopy = <T,>(arr: T[]) => {
      return arr.map((list) => ({ ...list }))
    }

- KEY: js.obj.deepCopy.Lodash
  EXPLAIN: lodashのcloneDeepでDeepCopy
  BODY: |
    //npm i --save lodash
    import _ from 'lodash'
    let copyLists = _.cloneDeep(lists)

- KEY: js.obj.obj2arr
  EXPLAIN: object=>arr
  BODY: |
    const objArr = { id: 23, name: "apple", address: "Tokyo" }
    const arr = Object.entries(objArr)
    console.log(arr)

#-------------------------------
# Array
#-------------------------------
- KEY: js.array.title
  CATEGORY: 配列(Array)

- KEY: js.array.sequence
  EXPLAIN: 連番配列作成
  BODY: |
    const arr1 = [...Array(20)].map((_, idx) => idx)
    const arr2 = Array.from({ length: 20 }, (_, i) => i)
    const arr3 = [...Array(20)].fill(0)

#-------------------------------
# Array map,reduce
#-------------------------------

- KEY: js.array.method.map
  EXPLAIN: map(配列)
  BODY: |
    const sample: number[] = [1, 4, 7]
    const res: number[] = sample.map((id) => id * 2)
    --------------------------------------------------
    type Obj = { id: number }
    const sample: Obj[] = [{ id: 1 }, { id: 4 }, { id: 7 }]
    const res: number[] = sample.map(({ id }) => id * 2)

- KEY: js.array.method.reduce
  EXPLAIN: reduce(配列)
  BODY: |
    //配列サンプル
    const sample: number[] = [1, 4, 7]
    const res: number[] = sample.reduce((acc, id) => {
      return [...acc, id * 2]
    }, [] as number[])
    -----------------------------------------------
    //オブジェクトサンプル
    type Obj = { id: number }
    const sample: Obj[] = [{ id: 1 }, { id: 4 }, { id: 7 }]
    const res: number[] = sample.reduce((acc, { id }) => {
      return [...acc, id * 2]
    }, [] as number[])

- KEY: js.array.method.reduce.average
  EXPLAIN: reduce(平均値)
  BODY: |
    const getAverage = (arr: number[]) => reduce((acc, elm) => acc + elm, 0) / arr.length

#-------------------------------
# Array methods
#-------------------------------
- KEY: js.array.method.repeat
  EXPLAIN: 配列・反復
  BODY: |
    arr.forEach(elm=>{})                         //void
    arr.map(elm=>{})                             //配列
    arr.reduce((acc,elm,arr)=>{}, 初期値)        //any
    arr.reduceRight((acc,elm,arr)=>{}, 初期値)   //any

- KEY: js.array.method.copy
  EXPLAIN: 配列・コピー
  BODY: |
    arr.slice([start, end])                    //部分配列(シャローコピー)
    arr.splice(start, [delCount, item1, item2, itemN]) //削除配列
    arr.copyWithin([target, start, end])       //内部コピー後の配列
    -----------------------------------------------------------
    spliced = arr.toSpliced([start, [delCount, item1, item2, itemN]]) //2023 削除配列(新規配列)
    [X]sliced = arr.toSliced([start, end])     //存在せず

- KEY: js.array.method.search
  EXPLAIN: 配列・検索
  BODY: |
    arr.filter(value => value>1)        //条件一致要素の配列
    arr.find(value => value>1)          //最初の該当要素
    arr.findIndex(value => value>1)     //最初の該当index
    arr.findLast(value => value>1)      //最後の該当要素
    arr.findLastIndex(value => value>1) //最後の該当index
    arr.indexOf(要素)                   //最初の該当要素
    arr.lastIndexOf(要素)               //最後の該当要素

- KEY: js.array.method.judge
  EXPLAIN: 配列・判定
  BODY: |
    Array.isArray(配列)
    arr.includes(要素)                  //Boolean 判定
    arr.some(value => value>1)          //該当が1でもあれば true
    arr.every(value => value>1)         //全てが該当すれば true

- KEY: js.array.method.object
  EXPLAIN: 配列・オブジェクト反復
  BODY: |
    arr.entries(([key, {id,name}])=>{}) //キーと値iterator
    arr.values(value => {})             //値iterator
    arr.keys(key=>{})                   //キーiterator

- KEY: js.array.method.make.arrange
  EXPLAIN: 配列・Index/生成/変更
  BODY: |
    arr.at(index)                       //要素取得(2022)
    Array.of(1,2,3)                     //配列もどきから配列生成
    Array.from(文字列,Map,Set)          //配列生成
    arr.fill(値)                        //全上書き(破壊的)
    arr.flat(深さ数値)                   //配列: 多重配列のフラット化
    arr.flatMap(value=>value)           //配列: 多重配列のフラット化
    arr.concat(配列)                    //配列合体
    arr.join(配列)                      //文字列化
    -----------------------------------------------------------
    result = arr.with(index, value) //2023 指定Index要素の置換で新配列を戻す

- KEY: js.array.method.pushPop
  EXPLAIN: 配列・挿入/取得
  BODY: |
    arr.pop()                           //最後の要素取得(破壊的)
    arr.push(value)                     //末尾に追加(破壊的)
    arr.shift()                         //最初の要素取得(破壊的)
    arr.unshift(value)                  //先頭に追加(破壊的)

- KEY: js.array.method.sort
  EXPLAIN: 配列・ソート
  BODY: |
    arr.sort((a,b)=>a-b)                //昇順ソート(破壊的)
    arr.sort((a,b)=>b-a)                //降順ソート(破壊的)
    arr.reverse()                       //逆ソート(破壊的)
    -----------------------------------------------------------
    sorted = arr.toSorted((a,b)=>a-b)   //昇順ソート(2023)
    sorted = arr.toReversed()           //逆ソート(2023)

- KEY: js.array.method.toString
  EXPLAIN: 配列・文字列化
  BODY: |
    arr.toLocaleString() //文字列化
    arr.toString()       //文字列化

- KEY: js.array.function.shuffle
  EXPLAIN: シャッフルアルゴリズム
  BODY: |
    ■ フィッシャーイェーツの配列シャッフルアルゴリズム
    const shuffleArray_FisherYates = (arrParam: number[]) => {
      let arr = [...arrParam]
      for (let i = arr.length - 1; i >= 0; i--) {
        const j = Math.floor(Math.random() * (i + 1))
        ;[arr[i], arr[j]] = [arr[j], arr[i]]
      }
      return arr
    }

#-------------------------------
# Map (Array & Object)
#-------------------------------
- KEY: js.map.title
  CATEGORY: Map & Set

- KEY: js.map.obj2map
  EXPLAIN: Object->Map
  BODY: |
    const objArr = [
      { id: 23, name: "apple" },
      { id: 45, name: "orange" },
    ]
    const map = new Map<number, string>(objArr.map(({ id, name }) => [id, name]))

- KEY: js.map.map2arr
  EXPLAIN: Map->Array
  BODY: |
    const map = new Map([["a", 1],["b", 2]])
    const arr = Array.from(map)

- KEY: js.map.map2obj
  EXPLAIN: Map->Object(制限あり)
  BODY: |
    //keyはstringに変換
    const map = new Map([["a", 1],["b", 2]])
    const obj = Object.fromEntries(map)

- KEY: js.map.map2map
  EXPLAIN: Map->Map
  BODY: |
    const map1 = new Map<string,number>()
    const map2 = new Map(map1)

#-------------------------------
# Set & Map
#-------------------------------

- KEY: js.map.array2Map
  EXPLAIN: Array->Map 型エラーに注意
  BODY: |
    ■ [NG] Array => Map 生成
    const data = [["A","M1"],["B","M2"]];  

    [NG] 型エラー: Type 'string[]' is not assignable to type 'readonly [unknown, unknown]'

    const map1 = new Map(data);             // [NG] 型エラー
    const map2 = new Map(Array.from(data)); // [NG] 型エラー
    const map3 = new Map(data.map(n=>n));   // [NG] 型エラー

    ■ [OK] Array => Map 生成
    const data = [["A","M1"],["B","M2"]] as const; <----- [OK] 注意

    const map1 = new Map(data);             // [OK]
    const map2 = new Map(Array.from(data)); // [OK]
    const map3 = new Map(data.map(n=>n));   // [OK]

- KEY: js.map.set2map
  EXPLAIN: Obj->Set->Map
  BODY: |
    const data = [
      { name: "A", type: "M1" },
      { name: "B", type: "M2" },
    ];

    ■ Object => Set 生成
    const noDupSet = new Set(
      data.map((n) => [n.name, n.type]),
    );

    ■ Set => Map 生成
    const noDupMap = new Map(
      Array.from(noDupSet, ([v1,v2])=>[v1, v2])   // Iterator必須
    );

    ■ [NG] Set => Map 生成
    const error = new Map(noDupSet);              // NG

    ■ [NG] Set => Array => Map 生成: Error
    const noDupArray = Array.from(noDupSet);
    const error = new Map(noDupArray);            // NG

    ■ [NG] Set => Array(Iterator) => Map 生成: Error
    const noDupArrayIte = Array.from(noDupSet, ([v1,v2])=>[v1, v2]);
    const noDupMap = new Map(noDupArrayIte);      // これもNG!

- KEY: js.map.weakMap1
  EXPLAIN: Map と WeakMap 比較(key 単位のスコープ分割)
  BODY: |
    ■ Map
    var map = new Map();
    function sample3 () {
      var obj = {};
      map.set(obj, 1);
      console.log(map.get(obj));        // 1
    }
    sample3();                          // obj は map から参照され、メモリから解放されない

    ■ WeakMap
    var wm = new WeakMap();
    function foo () {
      var bar = {};
      wm.set(bar, 1);
      console.log(wm.get(bar));
    }
    function hello () {
      var world = {};
      wm.set(world, 2);
      console.log(wm.get(world));
    }
    foo();         // 1
    hello();       // 2 (1はスコープ外=メモリは開放されていない！)

- KEY: js.map.weakMap2
  EXPLAIN: WeakMap(WeakMap 単位のスコープ分割)
  BODY: |
    const object = {};
    function foo () {
      const wm1 = new WeakMap([[object, 1]]);
      console.log(wm1.get(object));     // 1
    }
    function bar () {
      const wm2 = new WeakMap([[object, 2]]);
      console.log(wm2.get(object));     // 2
    }
    foo();
    bar();

- KEY: js.map.weakMap2
  EXPLAIN: WeakMap 比較
  BODY: |
    WeakMap 比較
  TABLE:
    OPTION:
      ALIGN:
        - left
        - center
        - center
        - left
      HAS_TITLE: true
      WIDTH:
        - 30%
        - 12%
        - 12%
    BODY: |
      プロパティ/機能 	Map 	WeakMap 	機能説明
      *.prototype.constructor	〇	〇	インスタンス生成元のコンストラクタ(書き換え可能)
      *.prototype.size	〇	×	要素数
      *.prototype.delete()	〇	〇	対要素削除
      *.prototype.get()	〇	〇	要素を返す
      *.prototype.has()	〇	〇	要素の存在判定
      *.prototype.set()	〇	〇	[key,value]を要素に格納
      *.prototype.clear()	〇	×	全要素を削除
      *.prototype.entries()	〇	×	[key,value]を持つItelator
      *.prototype.forEach()	〇	×	定義順で要素を列挙
      *.prototype.keys()	〇	×	keyを持つItelator
      *.prototype.values()	〇	×	valueを持つItelator
      *.prototype[@@iterator]()	〇	×	要素列挙時に実行されるIterator関数
      *.prototype[@@toStringTag]()	〇	〇	インスタンスに与えられるオブジェクト種を表す名前
      弱参照	×	〇	keyオブジェクト参照が切れた時、WeakMap 上からも要素を削除

#-------------------------------
# 置換
#-------------------------------
- KEY: js.replace
  CATEGORY: 置換

- KEY: js.replace.replaceAll
  EXPLAIN: replaceAllのオーバーロード
  BODY: |
    let sample = "abc aws AWSS AWS DEC"
    const re = new RegExp(`\\baws\\b`, "ig") // \\b は単語のみの検索

    // 第2引数は置換文字列
    const result1 = sample.replaceAll(re, "*AWS*")
    console.log(result1)  // "abc *AWS* AWSS *AWS* DEC" 

    // 第2引数は置換CB関数(結果に対し、CaseSensitiveな挙動可能)
    const result2 = sample.replaceAll(re, (match:string)=>{ return `[${match}]` })
    console.log(result2)  // "abc [aws] AWSS [AWS] DEC"

    // 置換CB関数の型
    function replacer(match:string, regexpMatch1:number, regexpMatch2:string) {
      console.log(match)        // 一致:  "aws"
      console.log(regexpMatch1) // index: 4
      console.log(regexpMatch2) // 全文
      return `[${match}]`;
    }

#-------------------------------
# 日付
#-------------------------------
- KEY: js.date
  CATEGORY: Date 日付

- KEY: js.json.format
  EXPLAIN: 日付フォーマット
  BODY: |
    export const getFormatDate = (targetDate: Date) => {
      return targetDate.toLocaleDateString("ja-JP", {
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
      });
    };

- KEY: js.json.excel
  EXPLAIN: Excel日付 vs JS日付
  BODY: |
    const DAY_MS = 24 * 60 * 60 * 1000; //日数とミリ秒を変換する係数
    const UNIX_EXCEL_DIFF = 70 * 365 + 17 + 1 + 1; //「1900/1/0」～「1970/1/1」 (日数)
    const UTC_JST_DIFF = 9 * 60 * 60 * 1000; //UTCとJSTの時差 (ミリ秒)

    ■ UnixTime -> ExcelDateSerial
    export function convertUnixTime2ExcelDateSerial(unixTimeMS: number) {
      return (unixTimeMS + UTC_JST_DIFF) / DAY_MS + UNIX_EXCEL_DIFF;
    }

    ■ ExcelDateSerial -> UnixTime
    export function convertExcelDateSerial2UnixTime(excelDataSerial: number) {
      return (excelDataSerial - UNIX_EXCEL_DIFF) * DAY_MS - UTC_JST_DIFF;
    }

#-------------------------------
# 乱数
#-------------------------------
- KEY: js.random.title
  CATEGORY: 乱数

- KEY: js.number.randomDigit
  EXPLAIN: ランダム数(桁)
  BODY: |
    const getRandomDigit = (digit: number) => {
      return Math.floor(Math.random() * 10 ** digit)
    }

- KEY: js.number.randomMinMax
  EXPLAIN: ランダム数(MinMax)
  BODY: |
    const getRandomMinMax = (min: number, max: number) => {
      return Math.floor(Math.random() * (max - min) + min)
    }

- KEY: js.string.randomValueID
  EXPLAIN: ランダム文字列(Reactの場合 useMemo 必須)
  BODY: |
    const randStr1 = useMemo(() => window.crypto.randomUUID(), [])
    const typedArray = new Uint32Array(6)
    const randStr2 = useMemo(() => window.crypto.getRandomValues(typedArray), [])

#-------------------------------
# 時間計測
#-------------------------------
- KEY: js.performance.title
  CATEGORY: 処理時間

- KEY: js.function.performance
  EXPLAIN: 処理時間計測
  BODY: |
    const performanceAbout = (func: () => void) => {
      const startTime = Date.now()
      func()
      console.log(`経過時間: ${Date.now() - startTime}`)
    }

- KEY: js.function.performanceAccurate
  EXPLAIN: 処理時間計測(精密)
  BODY: |
    const performanceAccurate = (func: () => void) => {
      const start = performance.now()
      func()
      const elapsed = performance.now() - start
      const elapsedStr = elapsed.toPrecision(3)
      console.log(`経過時間: ${elapsedStr}`)
    }

#-------------------------------
# JSON
#-------------------------------
- KEY: js.json.title
  CATEGORY: JSON

- KEY: js.json
  EXPLAIN: jsonの構造表現
  BODY: |
    JSON.stringify(obj, undefined, 3)
    JSON.parse(jsonObject)

#-------------------------------
# JSON: Null, Undefined,...
#-------------------------------
- KEY: js.json.infinite
  EXPLAIN: infinite/undefined/null
  BODY: |
    isFinite(1)                         //True
    isFinite(Number(""))                //=> 0 True
    isFinite(Number(null))              //=> 0 True
    isFinite(1/0)                       //False
    isFinite(Number(1/0))               //False
    isFinite(Number(undefined))         //False

    Number("")                          // 0
    Number(0)                           // 0
    Number(null)                        // 0
    Number(undefined)                   // NaN
    Number(NaN)                         // NaN
    Number("A")                         // NaN

    String(1 / 1)                       // 1
    String(1 / Number(""))              // "Infinity"
    String(1 / Number(undefined) || "") // ""
    String((1 / Number(null) || "")     // "Infinity"

    1/0 < 0                             // false
    1/0 < 1                             // false
    1/0 === Infinity                    // true
    1/0 === 1/0                         // true

    String(1/0)                         // "Infinity"
    Number(1/0) / 1                     // Infinity
    Number(1/0) / 0                     // Infinity

    1/0)                                // Infinity
    1/(1/0)                             // 0
    1 / (1/0) || ""                     // ""
    1*(1/0) || ""                       // Infinity
    1+(1/0) || ""                       // Infinity
    1-(1/0) || ""                       // -Infinity
    isFinite(1/0)                       // false
    String(1/0)                         // "Inifinity"
    Number(String(1/0))                 // Inifinity

- KEY: js.json.Validity
  EXPLAIN: Validity 検査
  BODY: |
    const isValid = (value: unknown|unknown[]): boolean => {
        const valueArray =(Array.isArray(value)) ? value : [value]
        for(const item of valueArray){
            const numValue = Number(item);
            if(item === null ||
            item === undefined ||
            isNaN(numValue) ||
            !isFinite(numValue)) return false
        }
        return true
    };

    console.log(isValid(1))
    console.log(isValid("0"))
    console.log(isValid("1"))
    console.log(isValid("1.5"))
    console.log(isValid(""))
    console.log(isValid(["0", "1", "1.5", ""]))

    console.log(isValid(null))
    console.log(isValid(undefined))
    console.log(isValid(NaN))
    console.log(isValid("A"))
    console.log(isValid("１"))
    console.log(isValid(["0", "1", "1.5", undefined]))
    console.log(isValid(["0", "1", "1.5", NaN]))
    console.log(isValid(["0", "1", "1.5", null]))
    console.log(isValid(["0", "1", "1.5", Infinity]))
    console.log(isValid([null, undefined, NaN, "A", "1A", "１"]))

#-------------------------------
# JSON: CSV => JSON
#-------------------------------
- KEY: js.json.csv
  EXPLAIN: csv => json
  BODY: |
    //改善の余地が大きい（最初の行のヘッダ有無確認必要）
    const convertCsv2Json = (text: string, headers: string[], div = "\t") => {
      
      //数字の1,000,000桁区切りコンマを削除
      const re = new RegExp(",", "ig"); 

      const jsonArr: { [key: string]: string }[] = [];
      text
        .split("\n")
        .filter(Boolean)
        .forEach((line) => {
          const obj: { [key: string]: string } = {};

          line.split(div).forEach((v, i) => {
            //文字と数値の違いで挙動を変えること
            obj[headers[i]] = v.trim().replace(re, "");
          });
          jsonArr.push(obj);
        });
      return jsonArr;
    };

    // SAMPLE
    const TABLE_TITLE_配列 = ["DO検索用", "検索エリア", "DO値"] as const;
    type TABLE_KEY = (typeof TABLE_TITLE_配列)[number];
    type TABLE_型 = Record<TABLE_KEY, string>;

    const TABLE_DATA = `
    0	1	≦20
    20	2	20～40
    40	3	40～50
    50	4	50～60
    60	5	60～100
    100	6	100～140
    140	7	140～200
    200	8	≧200
    `;

    const TBOM_TABLE = c2j(
      TABLE_DATA,
      TABLE_TITLE_配列 as unknown as string[],
    ) as TABLE_型[];

#-------------------------------
# ID
#-------------------------------
- KEY: js.id.packages
  CATEGORY: ID 生成 Packages

- KEY: js.id.list
  EXPLAIN: ID 生成パッケージの生成時間比較
  BODY: |
    参照: https://qiita.com/okm-uv/items/0b84c75e7524640dab11

    crypto.randomUUID         21,119,429 ops/sec
    uuid v4                   20,368,447 ops/sec ●
    @napi-rs/uuid             11,493,890 ops/sec
    uid/secure                 8,409,962 ops/sec
    @lukeed/uuid               6,871,405 ops/sec
    nanoid                     5,652,148 ops/sec ●
    customAlphabet             3,565,656 ops/sec
    secure-random-string         394,201 ops/sec
    uid-safe.sync                393,176 ops/sec
    cuid                         208,131 ops/sec ●
    shortid                       49,916 ops/sec

- KEY: js.id.format
  EXPLAIN: 各フォーマットと特徴
  BODY: |
    ■ UUID (v4)

      36文字、128ビット(16進数の文字32個、乱数122ビット)
      Rがランダム、4が固定、rが2ビットだけ固定

      RRRRRRRR-RRRR-4RRR-rRRR-RRRRRRRRRRRR

    ■ NanoID

      21文字、乱数126ビット
      UUIDの問題「生成結果の文字列が長い」を解決

      V1StGXR8_Z5jdHi6B-myT

    ■ ULID

      UUIDの問題(長い,ソート不可)を解消
      16進数ではなく英数字
      前半48bit:timestamp(~10889年)、後半80bit:ランダム
      1.21*(10**24)個/msまでソート可能性維持

      01AN4Z07BY79KA1307SR9X4MV3

    ■ CUID

      スケーラブル、水平方向のスケーラビリティ
      パフォーマンスが良い

      ch72gsb320000udocl363eofy
      c - h72gsb32 - 0000 - udoc - l363eofy
        c:        固定値
        h72gsb32: timestamp
        0000:     Counter
        udoc :    クライアントのfingerprint(複数クライアント間でも衝突回避)
        l363eofy: ランダム
