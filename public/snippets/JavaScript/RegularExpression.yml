---
#-------------------------------
# JavaScript: RegularExpression
#-------------------------------

- KEY: reg.RegExp
  EXPLAIN: 正規表現
  BODY: |
    ■ 正規表現変数
    const re: RegExp = new RegExp(pattern[,flags])     // クラス定義
    const re: RegExp = new RegExp('AB', 'ig');         // クラスインスタンス
    const re: RegExp = /AB/ig;                         // 記述

    ■ Deprecated
    [NG] re.compile(target);

    ■ 正規表現.test(文字列): boolean
    const hits = /A/ig.test('ABA');                    // true

    ■ 正規表現.exec(文字列): RegExpExecArray | null
    const hits = /A/ig.exec('ABA');                    // ["A"]  *gフラグとの相性悪し

    ■ 文字列.match(正規表現): RegExpExecArray | null
    const hits = 'ABA'.match(/A/i);                    // ["A"]
    const hits = 'ABA'.match(/A/ig);                   // ["A", "A"]

    ■ 文字列.matchAll(正規表現): IterableIterator<RegExpExecArray>型 *ES2021
    [NG] const hits = 'ABA'.matchAll(/A/i);            // gフラグなしError
    const hits = 'ABA'.matchAll(/A/ig);                // {}
     => Array.from(hits)                               // [["A"], ["A"]] 

    ■ 文字列.replace(正規表現): string
    const replaced = 'ABA'.replace(/A/i, "X");         // "XBA"
    const replaced = 'ABA'.replace(/A/ig, "X");        // "XBX"

    ■ 文字列.replaceAll(正規表現): string *ES2021
    [NG] const replaced = 'ABA'.replaceAll(/A/i, "X"); // gフラグなしError
    const replaced = 'ABA'.replaceAll(/A/ig, "X");     // "XBX"

- KEY: reg.captureGroup
  EXPLAIN: 名前付きキャプチャグループ [ES2018]
  BODY: |
    const target = '123 456 789';
    const re = /(?<first>[0-9]+)\s(?<second>[0-9]+)/u;

    const hits1 = re.exec(target);                // ["123 456", "123", "456"]
    console.log(hits1?.groups?.first);            // '123'
    console.log(hits1?.groups?.second);           // '456'

    const hits2 = target.match(re);               // gフラグとの相性悪し
    console.log(hits2?.groups?.first);            // '123'
    console.log(hits2?.groups?.second);           // '456'

- KEY: reg.exec()
  EXPLAIN: 一致文字列取得
  BODY: |
    const target = '123 456 789';
    const re = /[0-9]+/g;

    ⭕ 実行する度に内部indexが移動
    let hit = re.exec(target);                    // ["123"]
    hit = re.exec(target);                        // ["456"] 
    hit = re.exec(target);                        // ["789"]
    hit = re.exec(target);                        // null

    while(hit = re.exec(target)){                 // イテレータもどき
      hit;                                        // ["123"],["456"],["789"]
      re.lastIndex;                               // 3,7,11
    }

- KEY: reg.test()
  EXPLAIN: 一致Indexの移動
  BODY: |
    const target = 'table cable maple';
    const re = new RegExp('ab*', 'g');

    ⭕ 実行する度に内部indexが移動
    re.lastIndex;                                 // 0
    re.test(target);                              // true
    re.lastIndex;                                 // 3
    re.test(target);                              // false

- KEY: reg.match()
  EXPLAIN: 一致:値
  BODY: |
    const target = "123 456 789";
    const re = /[0-9]+/g;

    let hit = target.match(re);                   // ['123','456','789']

- KEY: reg.RegExp.replace
  EXPLAIN: 置換
  BODY: |
    ■ 定義
    const 結果 = 対象文字列.replace(正規表現, "置換文字列")

    const target = 'AB ABC BCD';
    const re = /AB/ig;
    const replaced = target.replace(re, "")

    ■ 置換コールバック
    const target = 'AB ABC BCD';
    const re = /AB/ig;
    const replaced = target.replace(re, (substring?: string)=>{
      if(substring) return `[${substring}]`
      else return "null"
    })
    console.log(replaced)                         // "[AB] [AB]C BCD"

- KEY: reg.str.matchAll2022
  EXPLAIN: matchAll 全一致 [ES2022]
  BODY: |
    const target = 'test1 test2';
    const re = /t(e)(st(\d?))/g;                  // g なしだとエラー!!

    const array = [...target.matchAll(re)];
    array[0];                                     // ["test1", "e", "st1", "1"]
    array[1];                                     // ["test2", "e", "st2", "2"]

    const target = 'table football, foosball';
    const re = RegExp('foo[a-z]*','g');

    const hits = target.matchAll(re);
    console.log(hits);                            // {} 空なので要注意
    for (const hit of hits) {                     // 実際には存在
      let idx = hit.index;
      console.log(`${hit[0]}: ${idx}~${idx + hit[0].length - 1}`);
    }

    const res = Array.from(                       // ["football", "foosball"]
      target.matchAll(re),
      m => m[0]
    );

- KEY: reg.flags
  EXPLAIN: フラグ一覧
  BODY: |
    g  global(複数マッチ)
    i  ignoreCase(大小文字区別なし)
    m  multiline(複数行検索)
    u  unicode(サロゲーションペアを1文字として扱う)
    y  sticky(lastIndexで指定した位置から検索)
    s  dotAll([.]がCR,LF,U+2028,U+2029など全文字マッチ)

- KEY: reg.flag.m
  EXPLAIN: m:改行を行頭行末認識
  BODY: |
    行頭(^)や行末($)が、改行(\n)後の行頭行末にもマッチング

    const target = 'ABC\nDEF\nGHI';
    target.match(/ABC$/);                         // null
    target.match(/ABC$/m);                        // ["ABC"]
    target.match(/^DEF/);                         // null
    target.match(/^DEF/m);                        // ["DEF"]
    target.match(/^DEF$/);                        // null
    target.match(/^DEF$/m);                       // ["DEF"]

- KEY: reg.flag.u
  EXPLAIN: u:サロゲーションペア
  BODY: |
    U+10000以上のサロゲーションペア領域の文字も1文字

    console.log('🧲'.match(/^.$/));               // null (2文字だから)
    console.log('🧲'.match(/^.$/u));              // uフラグ(1文字として一致)

- KEY: reg.flag.y
  EXPLAIN: y:lastIndex位置固定
  BODY: |
    yフラグ: lastIndex の位置からから先頭マッチングで位置を固定(lastIndexが先に進まない)。
    gをつけても結果は一つ。挙動要注意

    const target = '123 456 789';
    const re = /[0-9]+/gy;                        // gフラグ + yフラグ
    re.lastIndex = 7;                             // lastIndex指定(位置固定)

    let hit= null;
    hit= re.exec(target);
      console.log(hit, re.lastIndex);             // null, 0
    hit= re.exec(target);
      console.log(hit, re.lastIndex);             // ["123"], 3
    hit= re.exec(target);
      console.log(hit, re.lastIndex);             // null, 0
    hit= re.exec(target);
      console.log(hit, re.lastIndex);             // ["123"], 3

- KEY: reg.flag.s
  EXPLAIN: s:ドットを改行にも一致
  BODY: |
    //.(ドット)を改行文字にも一致
    const target = "ABC\nDEF\nGHI";
    const re = /.+/g;                             // No sフラグ
    for (const hit of target.matchAll(re)) {
      console.log(hit, hit.index);                // ["ABC"],0 | ["DEF"],4 | ["GHI"],8 
    }

    const re = /.+/gs;                            // sフラグ
    for (const hit of target.matchAll(re)) {
      console.log(hit, hit.index);                // [""ABC\nDEF\nGHI""] 0
    }

- KEY: reg.matching
  EXPLAIN: マッチング表現
  BODY: |
    x        xという文字
    xyz      単語マッチ
    [xyz]    []内1文字
    [x-z]    x～zの1文字
    [^xyz]   x,y,z以外の1文字
    .        任意の1文字(以下以外)
              Line Feed(\n), Carriage Return(\r),
              Line Separator(\u2028),Paragraph Separator(\u2029)
    ^x       xで始まる文字列
    x$       xで終わる文字列
    x*?      0文字以上のx
    x+?      1文字以上のx
    x??      0文字または1文字のx
    x{n}?    n個のx
    x{n,}?   n個以上のx
    x{n,m}?  n個～m個のx
    [\b]     バックスペース
    (?:x)    xという文字(参照除外)
    x(?=y)   先読み言明
    x(?!y)   否定先読み言明
    (?<=x)y  後読み言明
    (?<!x)y  否定後読み言明

- KEY: reg.matching.x*?
  EXPLAIN: 最大最小Match(*)
  BODY: |
    "<ABC><DEF>".match(/<.*>/)                    // ["<ABC><DEF>"]
    "<ABC><DEF>".match(/<.*?>/)                   // ["<ABC>"]

- KEY: reg.matching.x+?
  EXPLAIN: 最大最小Match(+)
  BODY: |
    "<ABC><DEF>".match(/<.+>/)                    // ["<ABC><DEF>"]
    "<ABC><DEF>".match(/<.+?>/)                   // ["<ABC>"]

- KEY: reg.matching.x??
  EXPLAIN: 最大最小Match(?)
  BODY: |
    "ABC".match(/AB?/)                            // ["AB"]
    "ABC".match(/AB??/)                           // ["A"]

- KEY: reg.matching.postfix
  EXPLAIN: 先読み言明
  BODY: |
    const target = 'CAT CAS CAN';

    const re = /(CA(?=S))/g;                      // CAに続く"S"がある場合、CAにマッチ
    const hit1 = target.match(re);                // ["CA"]

    const re = /(CA(?=X))/g;                      // CAに続く"X"がある場合、CAにマッチ
    const hit2 = target.match(re);                // null

- KEY: reg.matching.postfix.not
  EXPLAIN: 先読み言明(否定)
  BODY: |
    const target = 'CAT CAS';

    const re = /(CA(?!S))/g;                      // CAに続く"S"がない場合、CAにマッチせず
    const hit1 = target.match(re);                // ["CA"] (CATにマッチ)

    const re = /(CA(?!X))/g;                      // CAに続く"X"がない場合、CAにマッチ
    const hit2 = target.match(re);                // ["CA", "CA"] (全部にマッチ)

- KEY: reg.matching.prefix
  EXPLAIN: 後読み言明
  BODY: |
    const target = 'CAT CASE CAN CAST CAL';

    const re = /((?<=CA)S[^\s]*)/g;               // CAに続く S[^\s] にマッチ
    const hit= target.match(re);                  //  ["SE", "ST"]

- KEY: reg.matching.prefix.not
  EXPLAIN: 後読み言明(否定)
  BODY: |
    const target = 'CAT CASE MAST CAST RISK';

    const re = /((?<!CA)S[^\s]*)/g;               // CAに続かない S[^\s] にマッチ
    const hit= target.match(re);                  // ["ST", "SK"]

- KEY: reg.specialChars
  EXPLAIN: 特殊文字
  BODY: |
    \0     NUL文字
    \b     単語の区切り文字
    \B     \b以外の文字
    \cX    Ctrl-X(X には A-Z のどれかの文字)
    \d     半角数字=[0-9]
    \D     \d 以外の文字=[^0-9]
    \f     改ページ(FF:Form-feed)
    \n     改行文字(LF:Line feed)
    \r     復帰文字(CR:Carriage return)
    \s     1文字のホワイトスペース
    \S     ホワイトスペース以外の1文字
    \t     水平タブ(HT:Horozontal tab)
    \v     垂直タブ(VT:Vertical tab)
    \w     アンダーバー(_)を含む半角英数文字)=[A-Za-z0-9_]
    \W     \w以外の文字 =[^A-Za-z0-9_]
    \n     n番目の (...) にマッチした文字列
    \\\    \ohhh (非)8進数で hhh の文字
    \xhh   16進数で hh の文字

- KEY: reg.specialChar.b
  EXPLAIN: 区切り文字
  BODY: |
    "I like Java.".match(/\bJava\b/)              // ["Java"]
    "I like JavaScript.".match(/\bJava\b/)        // null
    "I like JavaScript.".match(/\bJava/)          // ["Java"]

- KEY: reg.specialChars.unicode
  EXPLAIN: 特殊文字(Unicode)
  BODY: |
    \uhhhh             UTF-16 Unicode文字
    \u{hhhh}           非サロゲートペア領域の UTF-16 Unicode文字、gフラグ指定時のみ利用可能
    \u{hhhhh}          サロゲートペア領域の UTF-16 Unicode文字、gフラグ指定時のみ利用可能
    \p{property}       Binaryプロパティに propety を持つ文字(要u:ES2018)
    \P{property}       Binaryプロパティに propety を持たない文字(要u:ES2018)
    \p{gc=property}    General_Category に propety を持つ文字(要u:ES2018)
    \P{gc=property}    General_Category に propety を持たない文字(要u:ES2018)
    \p{sc=property}    Script が propety にマッチする文字(要u:ES2018)
    \p{sc=Hiragana}    Script が ひらがな にマッチする文字(要u:ES2018)
    \P{sc=property}    Script が propety にマッチしない文字(要u:ES2018)
    \p{scx=property}   Script_Extensions が propety にマッチする文字(要u:ES2018)
    \P{scx=property}   Script_Extensions が propety にマッチしない文字(要u:ES2018)

- KEY: reg.sample.postalCode
  EXPLAIN: 郵便番号
  BODY: |
    ■ 郵便番号(ハイフンなし)
    const re = /^\d{7}$/
    re.test("1234567".trim())                     // true
    re.test("1234567 ".trim())                    // true
    re.test("123456".trim())                      // false
    re.test("A123456".trim())                     // false

    ■ 郵便番号(ハイフンあり)
    const re = /^[0-9]{3}-[0-9]{4}$/
    re.test("111-1111".trim())                    // true
    re.test("111-1111 ".trim())                   // true
    re.test("1111-111".trim())                    // false
    re.test("11A-1111".trim())                    // false

    ■ 郵便番号(ハイフン任意)
    const re = /^[0-9]{3}-?[0-9]{4}$/
    re.test("123-4567".trim())                    // true
    re.test("1234567".trim())                     // true
    re.test("1234-567".trim())                    // false
    re.test("1234A67".trim())                     // false

- KEY: reg.sample.phoneNumber
  EXPLAIN: 電話番号(固定)
  BODY: |
    ■ 電話番号(ハイフンあり)
    const re = /\d{2,4}-\d{2,4}-\d{4}/
    re.test("03-1234-5678".trim())                // true
    re.test("030-2340-5678".trim())               // true
    re.test("0301-240-5678".trim())               // true
    re.test("0301-2400-567".trim())               // false
    re.test("030-2340-5678 ".trim())              // true
    re.test("030-2 40-5678".trim())               // false

    ■ 電話番号(ハイフンなし)
    const re = /^(0{1}\d{9,10})$/
    re.test("0312345678".trim())                  // true
    re.test("0312345A78 ".trim())                 // false
    re.test("03012345678 ".trim())                // true
    re.test("031234568".trim())                   // false
    re.test("03-12345A78".trim())                 // false

- KEY: reg.sample.phoneNumberCell
  EXPLAIN: 電話番号(携帯)
  BODY: |
    ■ 携帯番号(ハイフンあり)1
    const re = /^0[5789]0-[0-9]{4}-[0-9]{4}$/
    re.test("080-1234-5678".trim())               // true
    re.test("080-1234-5678 ".trim())              // true
    re.test("080-123-45678 ".trim())              // false

    ■ 携帯番号(ハイフンあり)2
    const re = /^(050|070|080|090)-\d{4}-\d{4}$/
    re.test("080-1234-5678".trim())               // true
    re.test("080-1234-5678 ".trim())              // true
    re.test("060-1234-5678 ".trim())              // false
