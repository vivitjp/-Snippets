---
#-------------------------------
# React Hook Form
#-------------------------------
- KEY: pk.rhf.keywords
  EXPLAIN: 引数とメソッド
  BODY: |
    ■ useForm
    const method = useForm({
      mode,                  // onChange | onBlur | onSubmit | onTouched | all
      reValidateMode,        // Validation strategy after submitting behaviour.
      defaultValues,         // フォームのデフォルト値
      values,                // フォーム値を更新するためのリアクティブな値
      errors,                // フォームエラーを更新するためのリアクティブエラー
      resetOptions,          // 新しいフォーム値の更新中にフォーム状態の更新をリセットするオプション
      criteriaMode,          // すべての検証エラーを表示するか、一度に 1 つずつ表示
      shouldFocusError,      // 組み込みのフォーカス管理を有効または無効にします
      delayError,            // エラーが即座に表示されるのを遅らせます
      shouldUseNativeValidation, // ブラウザ組み込みのフォーム制約 API を使用
      shouldUnregister,      // アンマウント後の入力登録解除を有効または無効に
    });

    ■ mode
      mode: onChange | onBlur | onSubmit | onTouched | all

    ■ method
    const {
      register,              // フォームフィールド登録
      handleSubmit,          // フォームの送信処理
      reset,                 // フォームリセット
      watch,                 // フィールド値監視
      control,               // Controller で使用
      setValue,              // フィールド値設定(個別)
      getValues,             // フィールド値取得(全体)
      formState,             // フォームステート(dirty, isSubmitted, touched, submitCount, error...)
      -----------------
      trigger,               // 子コンポーネントへの引数
      setFocus,              // ref.current.focus() の代用
      unregister,
      clearErrors,
      setError,
      getFieldState,
      resetField,
    } = method

    ■ formState
    errors                    // object
    defaultValues             // object
    isValid                   // boolean
    isDirty                   // boolean
    dirtyFields               // object
    touchedFields             // object
    isSubmitted               // boolean
    isSubmitSuccessful        // boolean
    isSubmitting              // boolean
    isLoading                 // boolean
    submitCount               // number
    isValidating              // boolean
    validatingFields          // boolean

    ■ field
    type field = {
      value,                  // コンポーネント値
      ref,                    // Reactのref
      name,                   // (String) 登録名
      onChange,               // (Function) 変更イベントメソッド
      onBlur,                 // (Function) ロストフォーカスイベントメソッド
    },

    ■ fieldState
    type fieldState = {
      invalid,                // (Boolean) 全入力値のバリディティ
      isTouched,              // (Boolean) 一度でもタッチされたか
      isDirty,                // (Boolean) 入力が変更されたか
      error,                  // (Object) エラー情報
    }

- KEY: pk.rhf.vlidation
  EXPLAIN: バリデーション
  BODY: |
    required      (共通)   required: "必須項目"
    min           (number) min: { value: 1, message: "1以上の数値" },
    max           (number) 
    minLength     (string) minLength: { value: 4, message: "4文字以上必須" },
    maxLength     (string) 
    pattern       (string) { value: /^[a-zA-Z0-9]+$/, message: '半角英数字のみ' }
    validate      (共通) 
    valueAsNumber (型チェック) valueAsNumber: true,

#-------------------------------
# Data 構造
#-------------------------------

- KEY: pk.rhf.data.structure
  EXPLAIN: データ構造
  BODY: |
    ■ data と error data の構造が違う。取得時の添字の型に注意

    type Phases = "phase1" | "phase2";
    type Attrs = "name" | "age";

    const defaultData = {
      name: "Smith",
      age: 1,
    };
    type DefaultDataHidden = typeof defaultData;

    type Data = Partial<Record<`${Phases}.${Attrs}`, string>>;
    const data: Data = {
      "phase1.name": "John",
      "phase1.age": "Tokyo",
      "phase2.name": "Jim",
      "phase2.age": "LA",
    };

    type ErrorDataHidden = Record<
      Phases,
      Record<keyof DefaultDataHidden, { message: string }>
    >;

    const errorData: ErrorDataHidden = {
      phase1: {
        name: { message: "Must be String" },
        age: { message: "Must be Number" },
      },
      phase2: {
        name: { message: "Must be String" },
        age: { message: "Must be Number" },
      },
    };

    //-----------------------------------------------
    // Data
    //-----------------------------------------------
    {
      type DefaultData = typeof defaultData;
      type DefaultDataKeys = keyof DefaultData;

      type DataKeys = keyof typeof data;
      const phases = ["phase1", "phase2"];

      phases.forEach((phase) => {
        const keyName = "name" as DefaultDataKeys;                              //添字の型
        const res1 = data?.[`${phase}.${keyName}` as DataKeys] || "Unknown";
        console.log(keyName, res1);
      });
    }

    //-----------------------------------------------
    // Error
    //-----------------------------------------------
    {
      type DefaultData = typeof defaultData;
      const dataKeys = Object.keys(data);

      dataKeys.forEach((key) => {
        const [phase, attr] = key.split(".");
        const [phase, attr] = key.split(".") as [Phases, keyof DefaultData] ;   //添字の型
        const res1 = errorData?.[phase]?.[attr]?.message || "Unknown";
        console.log(phase, attr, res1);
      });
    }

#-------------------------------
# By Context
#-------------------------------

- KEY: pk.rhf.byContext.parent
  EXPLAIN: 1) By Context 親
  BODY: |
    import { useForm, SubmitHandler, FormProvider } from "react-hook-form"
    import { ChildByContext } from "./ChildByContext"

    export type SimpleType = { name: string }
    const defaultValues: SimpleType = { name: "By Method" }

    export const Simple = () => {

      const method = useForm<SimpleType>({
        defaultValues,
        mode = "onBlur"                                                         // 離脱時にValidate
      })
      const { handleSubmit } = method

      const onSubmit: SubmitHandler<SimpleType>=(data)=>{
        console.table(data)
      }

      return (
        <FormProvider {...method}>                                              // Context 親
          <form onSubmit={ handleSubmit(onSubmit) }>
            <ChildByContext<SimpleType> />                                      // 子への引数なし
            <button type="submit"> OK </button>
          </form>
        </FormProvider>
      )
    }

- KEY: pk.rhf.byContext.child
  EXPLAIN: 1) By Context 子
  BODY: |
    import { useFormContext } from "react-hook-form"

    export const ChildByContext<T> = () => {
      
      const { register, formState: {errors} } = useFormContext<T>()             // 共通 register を取り出し

      return (                                                                  // 以下、共通
        <div>
          <input {...register("name", { required: true })} />
          {errors.name && <span>必須</span>}
        </div>
      )
    }

#-------------------------------
# By Parameter
#-------------------------------

- KEY: pk.rhf.byPram.parent
  EXPLAIN: 2) By Parameter 親
  BODY: |
    import { useForm, SubmitHandler } from "react-hook-form"
    import { ChildByMethod } from "./ChildByMethod"

    export type SimpleType = { name: string }
    const defaultValues: SimpleType = { name: "By Method" }

    export const ByMethod = () => {

      const method = useForm<SimpleType>({
        defaultValues,
        mode = "onBlur"                                                         // 離脱時にValidate
      })
      const { handleSubmit } = method

      const onSubmit: SubmitHandler<SimpleType> = (data) => {
        console.table(data)
      }

      return (
        <section>
          <form onSubmit = { handleSubmit(onSubmit) }>
            <ChildByMethod method={method} />                                   // 子への引数: method
            <button type="submit"> OK </button>
          </form>
        </section>
      )
    }

- KEY: pk.rhf.byPram.child
  EXPLAIN: 2) By Parameter 子
  BODY: |
    import { UseFormReturn } from "react-hook-form"
    import { SimpleType } from "./RHFByMethod"

    type Props = {
      method: UseFormReturn<SimpleType, any>
    }

    export const ChildByMethod = ({ method }: Props) => {                       // 共通 register を取り出し

      const { register, formState: { errors } } = method

      return (                                                                  // 以下、共通
        <div>
          <input {...register("name", { required: true })} />
          {errors.name && <span>必須</span>}
        </div>
      )
    }

#-------------------------------
# By Control
#-------------------------------

- KEY: pk.rhf.byControl.parent
  EXPLAIN: 3) By Control 親
  BODY: |
    import { SubmitHandler, useForm, useWatch } from "react-hook-form"
    import { SampleControlInput } from "./SampleControlInput"
    import { useMemo, useState } from "react"

    type GFieldType = Record<string, unknown>

    //Data型
    type Person = {
      name: string
      age: number
      act: number //Chakra Checkbox 型
    }

    //Data デフォルト値
    const defaultValues = {
      name: "佐藤",
      age: 55,
      act: 0,
    }

    //Data 制約
    const constrain: Record<keyof Person, GFieldType> = {
      name: {
        required: "必須項目です",
        minLength: { value: 4, message: "4文字以上必須です" },
      },
      age: {
        required: "必須項目です",
        min: { value: 1, message: "1以上の数値です" },
        validate: (item: string) => !!Number(item),
        validateMessage: "数値のみです",
      },
      act: {},
    }

    export const SampleControlForm = () => {
      const method = useForm<Person>({ defaultValues, mode: "onBlur" })
      const {
        watch,
        control,
        handleSubmit,
        formState: { isValid },
      } = method

      const [inputData, setInputData] = useState("")

      const onSubmit: SubmitHandler<Person> = (data) => {
        setInputData(JSON.stringify(data, undefined, 2))
      }

      //watch は 非Reactive
      const [calcAgeMan, setCalcAgeMan] = useState(0)
      const handleWatch = () => {
        const age = Number(watch("age")) * 3 || 0
        setCalcAgeMan(age)
      }

      //useWatch の戻り値変数は Reactive(再描画に注意)
      const watchAge = useWatch({ control, name: "age" })
      const ageCalcAuto = useMemo(() => (Number(watchAge) || 0) * 2, [watchAge])

      return (
        <Row>
          <Column>
            <form onSubmit={handleSubmit(onSubmit)}>
              <Column>
                <Row>
                  <SampleControlInput
                    method={method}
                    target={"name"}
                    title={"氏名"}
                    constrain={constrain.name}
                  />
                </Row>

                {/* age */}
                <Row>
                  <SampleControlInput
                    method={method}
                    target={"age"}
                    title={"年齢"}
                    constrain={constrain.age}
                  />
                </Row>

                <Row>
                  <Div">年(自動)</Div>
                  <BorderDiv>{ageCalcAuto}</BorderDiv>
                </Row>

                <Row>
                  <Button" onClick={handleWatch}>
                    年(手動)
                  </Button>
                  <BorderDiv>{calcAgeMan}</BorderDiv>
                </Row>

                {/* act */}
                <Row>
                  <SampleControlInput
                    method={method}
                    target={"act"}
                    title={"有効"}
                    constrain={constrain.act}
                  />
                </Row>
                <Row>
                  <Submit value={"保存"} disabled={!isValid} />
                </Row>
              </Column>
            </form>
          </Column>
          <DivPre>{inputData}</DivPre>
        </Row>
      )
    }

- KEY: pk.rhf.byControl.child
  EXPLAIN: 3) By Control 子
  BODY: |
    import { Controller, Path, UseFormReturn } from "react-hook-form"
    import { Input as ChakraInput } from "@chakra-ui/react"

    type GFieldType = Record<string, unknown>

    type SampleControlInput<T extends GFieldType, R> = {
      method: UseFormReturn<T>
      target: Path<T>
      title: string
      constrain: GFieldType
    }

    export const SampleControlInput = <
      T extends GFieldType,
      R extends string | number
    >({ method, target, title, constrain }: SampleControlInput<T, R>) => {
      const { control } = method

      return (
        <Row>
          <Div>{title}</Div>
          <Controller
            render={({ field, fieldState: { error } }) => {
              const { value, ...other } = field
              return (
                <>
                  <ChakraInput {...{ ...other, value: value as R }} />
                  {error && <ErrorBox>{error?.message}</ErrorBox>}
                </>
              )
            }}
            name={target}
            control={control}
            rules={constrain}
          />
        </Row>
      )
    }

#-------------------------------
# Generic Parent
#-------------------------------

- KEY: pk.rhf.generic.parent
  EXPLAIN: ジェネリック 親
  BODY: |
    import { useForm, UseFormProps, UseFormReturn } from "react-hook-form"

    export type GFieldType = Record<string, unknown>

    const useDefaultForm = <FormDataType extends GFieldType>(
      props: UseFormProps<FormDataType> & {
        defaultValues: FormDataType
      }
    ): UseFormReturn<FormDataType> => {
      return useForm(props)
    }

    export { useDefaultForm }

- KEY: pk.rhf.generic.child
  EXPLAIN: ジェネリック 子
  BODY: |
    import { Path, UseFormReturn } from "react-hook-form"
    import { GFieldType } from "./useDefaultForm"

    type MyInput<T extends GFieldType, R> = {
      method: UseFormReturn<T>
      target: Path<T>
      constrain: GFieldType
    }

    export const MyInput = <T extends GFieldType, R extends string | number>({
      method,
      target,
      constrain,
    }: MyInput<T, R>) => {
      const { register, formState: { errors } } = method

      return (
        <Row>
          <Input {...register(target, constrain)} />
          {errors?.[target]?.message && (
            <ErrorBox>{`${errors?.[target]?.message || ""}`}</ErrorBox>
          )}
        </Row>
      )
    }

- KEY: pk.rhf.generic.sample
  EXPLAIN: ジェネリック サンプル
  BODY: |
    import { SubmitHandler } from "react-hook-form"
    import { MyInput } from "./SampleInput"
    import { GFieldType, useDefaultForm } from "./useDefaultForm"

    //Data型
    export type Person = {
      name: string
      age: number
    }

    //Data デフォルト値
    const defaultValues: Person = {
      name: "",
      age: 0,
    }

    //Data 制約
    const constrain: Record<keyof Person, GFieldType> = {
      name: {
        required: "必須項目です",
        minLength: { value: 4, message: "4文字以上必須です" },
      },
      age: {
        required: "必須項目です",
        min: { value: 1, message: "1以上の数値です" },
        valueAsNumber: true,
      },
    }

    export const SampleForm = () => {
      const method = useDefaultForm<Person>({ defaultValues })
      const { handleSubmit } = method

      const onSubmit: SubmitHandler<Person> = (data) => {
        console.table(data)
      }
      return (
        <form onSubmit={handleSubmit(onSubmit)}>
          <Row>
            <Column>
              <Div>Name</Div>
              <MyInput<Person, string>
                method={method}
                target={"name"}
                constrain={constrain["name"]}
              />
            </Column>
          </Row>
          <Row>
            <Column>
              <Div>Age</Div>
              <MyInput<Person, number>
                method={method}
                target={"age"}
                constrain={constrain["age"]}
              />
            </Column>
          </Row>
          <Row>
            <Submit value={"OK"} />
          </Row>
        </form>
      )
    }
