---
#-------------------------------
# React Routing
#-------------------------------

- KEY: react.router
  EXPLAIN: パラメタ付nestedルート
  BODY: |
    import { BrowserRouter, Routes, Route } from "react-router-dom"
    import { PageA } from "../pages/PageA"
    import ...

    export const PageRoute = React.memo(() => {
      return (
        <BrowserRouter>
          <Routes>
            <Route path={"/pagea"} element={<PageA />} />
              <Route path="me" element={<PageMe />} />
              <Route path=":id" element={<PageId />} />
            </Route>
          </Routes>
        </BrowserRouter>
      )
    })

- KEY: react.router.lazy
  EXPLAIN: 遅延import
  BODY: |
    import { BrowserRouter, Routes, Route, lazy, Suspense } from "react-router-dom"
    import LoadingPage from "../pages/Loading"

    const PageA = lazy(() => import("../pages/pageA"))

    export const PageRoute = React.memo(() => {
      return (
        <BrowserRouter>
          <Routes>
            <Route
              path={"/pagea"}
              element={
                <Suspense fallback={<LoadingPage />}>
                  <PageA />
                </Suspense>
              }
            />
          </Routes>
        </BrowserRouter>
      )
    })

- KEY: react.router.byList
  EXPLAIN: Listルーティング
  BODY: |
    import React, { LazyExoticComponent } from "react"
    import { Home } from "../pages/Home"

    type MenuGroup = { [key: string]: Menu[] }

    type FCCompo = React.FunctionComponent<{}>
    type FixedElement = () => JSX.Element

    export type Menu = {
      name: string
      path: string
      element: FCCompo | FixedElement | LazyElement
    }

    export const menuGroup: MenuGroup = {
      Home: [
        { name: "Home", path: "/", element: Home },
      ],
    }

- KEY: react.router.byListMap
  EXPLAIN: Listルーティング展開
  BODY: |
    <BrowserRouter>
      <Routes>
        {menuGroup &&
          Object.entries(menuGroup).map(([_, menus]) => {
            return (
              menus && menus.map((menu) => (
                <Route
                  key={menu.path}
                  path={menu.path}
                  element={
                    <Layout>
                      <Section>
                        <Title>{menu.name}</Title>
                        <Suspense fallback={<div>Loading...</div>}>
                          <menu.element />
                        </Suspense>
                      </Section>
                    </Layout>
                  }
                />
              ))
            )
          })}
      </Routes>
    </BrowserRouter>
