---
#-------------------------------
# Aurora
#-------------------------------
- KEY: aws.Aurora.category
  CATEGORY: 概要

- KEY: aws.Aurora.RDS比較
  EXPLAIN: |
    Auroraとは
  BODY: |
    AWS が独自開発した高性能・高可用性のリレーショナルデータベースエンジン 

    ■ MySQL / PostgreSQL 互換
      • Aurora(MySQL互換)とAurora(PostgreSQL互換)の2種類
      • 既存の MySQL / PostgreSQL アプリケーションをそのまま利用可能(微細な違いあり)
      • MySQL 互換の Aurora は、MySQL 5.6 および 5.7 に対応(いずれか一方)
      • PostgreSQL 互換の Aurora は、PostgreSQL 9.6 および 10 に対応
    ■ 高パフォーマンス
      • オリジナルの MySQL や PostgreSQL に比べて最大 5～10 倍のスループット
    ■ ストレージ自動スケール & 高可用性
      • 冗長化: データは6コピーを3AZにまたがって保存。障害に強い
      • ストレージは 10GB～128TB まで段階的にスケーリング
    ■ 高速なフェイルオーバー
      • 高可用性構成(Aurora Replica)を作れば、障害発生時に数十秒以内でフェイルオーバー可能
    ■ コスト
      • RDSのMySQLやPostgreSQLに比べてやや高い
    ■ Aurora Serverless
      • 自動でスケールアップ/ダウンするサーバーレスの Aurora
      • 料金は、実際に使用した分だけ支払う従量課金制
      • Aurora Serverless は、MySQL 互換の Aurora のみ対応

- KEY: aws.Aurora.構成
  EXPLAIN: |
    Aurora DB クラスター構成
  BODY: |
    ┌────────────────────────────────────────────────────────────────────────────┐
    │ ┌──────────────────────┐ ┌──────────────────────┐ ┌──────────────────────┐ │
    │ │ AZ A                 │ │ AZ B                 │ │ AZ C                 │ │
    │ │ ┌──────────────────┐ │ │ ┌──────────────────┐ │ │ ┌──────────────────┐ │ │
    │ │ │ Primary Instance │ │ │ │ Replica Instance │ │ | │ Replica Instance │ │ │
    │ │ │ (Writer)         │ │ │ │ (Reader)         │ │ │ │ (Reader)         │ │ │
    │ │ │ Writes     Reads │ │ │ │ Reads            │ │ │ │ Reads            │ │ │
    │ │ └───│──────────↑───┘ │ │ └──────────────↑───┘ │ │ └──────────────↑───┘ │ │
    │ │     │          │     │ │  A Writes      │     │ │  A Writes      │     │ │
    │ │ ┌───↓──────────│───┐ │ │ ┌───↓──────────│───┐ │ │ ┌───↓──────────│───┐ │ │
    │ │ │     Data Copy    │ │ │ │     Data Copy    │ │ │ │     Data Copy    │ │ │
    │ │ └──────────────────┘ │ │ └──────────────────┘ │ │ └──────────────────┘ │ │
    │ └──────────────────────┘ └──────────────────────┘ └──────────────────────┘ │
    │   DB Cluster Volume(Amazon Aurora Storage)                                 │
    └────────────────────────────────────────────────────────────────────────────┘

    ■ DB Cluster
      • Aurora DB クラスターのストレージは、DB クラスター ボリュームと呼ばれる
      • 最大 128 TB のストレージで、データは 10 GB 単位で自動的にスケール
      • 6 つのコピーを 3 つの AZ にまたがって保存
      • 各 AZ にあるインスタンスは、同じ DB クラスター ボリュームに接続
      • 書き込みは、すべての AZ にあるインスタンスに同時実行
      • 読み込み用レプリカは最大 15 台
      • エンドポイントは、DB クラスター ボリュームに接続するインスタンスの DNS 名

    ■ エンドポイント
      • 用途に応じて、異なるエンドポイントを使用
      • クラスターエンドポイント: 常にプライマリインスタンスに接続
      • リーダーエンドポイント: 読み取り専用のレプリカに接続
      • インスタンスエンドポイント: 特定のインスタンスに接続
      • カスタムエンドポイント: 特定のインスタンスのグループに接続

    ■ 障害
      • 障害を自動検知し、数十秒以内にフェイルオーバー
      • 3 つの AZ にまたがって保存されるため、1つの AZ が障害を起こしても、他 AZ のインスタンスは引き続き使用可能。
      • プライマリインスタンスが障害を起こした場合、自動的に別インスタンスをプライマリに昇格

    ■ ストレージノードクラスタ
      • Protection Group: 6つのストレージノードのグループ
      • Storage Node: 6つのストレージノードのうちの1つ

- KEY: aws.Aurora.PostgreSQL
  EXPLAIN: |
    PostgreSQL のバージョン
  BODY: |
    • Major Version: PostgreSQL と対応関係あり
      • 1.y.z: 9.6系との互換性
      • 2.y.z: 10系との互換性
      • 3.y.z: 11系との互換性
    • Minor Version: PostgreSQL のバージョン
      • 1.0.y: 9.6.12系との互換性
      • 2.3.y: 10.7系との互換性
    • Patch Version: Aurora独自のバージョン

- KEY: aws.Aurora.ライフサイクル
  EXPLAIN: |
    ライフサイクル
  BODY: |
    ■ 起動
      • DB クラスターを起動すると、DB インスタンスも起動
      • 利用可能(AZ1~3)
    ■ 停止
      • DB クラスターを停止すると、全インスタンスも停止(削除されない)
      • 停止可能な期間は 7 日間
      • 停止中でもストレージは課金されるが、インスタンスの課金されない
      • 停止するとログが削除されるので必要に応じてバックアップを取得
    ■ 再起動
      • DB クラスターを再起動すると、全インスタンスも再起動
      • 再起動時に、DB クラスターのエンドポイントが変更されることがあるので注意
      • 再起動時に、DB クラスターのパラメータグループを変更することも可能
    ■ 削除
      • DB クラスターを削除すると、DB インスタンスも削除
      • 削除時にスナップショットを取得するかどうか選択可能
      • スナップショットを取得しない場合、DB クラスターと DB インスタンスは完全に削除される
      • スナップショットを取得して、後に復元することも可能
      • DNSの伝播時間についての考慮が必要
    ■ バックアップ
      • 継続的に S3 に増分バックアップ(AZ2)
      • バックアップの保持期間は 1 日から 35 日まで設定可能
    ■ 復元
      • バックアップから復元することが可能
      • ポイントインタイムリカバリ
        • 5分前～バックアップ保持期間までの任意の位置に秒単位で復元可能
        • 最新復元可能時刻はマネジメントコンソールで確認可能
        • (Latest Restorable Time 値またはEarliest Restorable Time 値)
      • 復元時に、DB クラスターのエンドポイントが変更されることがあるので注意
      • スナップショットから復元することも可能
      • スナップショット 2 種類
        • DB クラスターのスナップショット
        • DB インスタンスのスナップショット

- KEY: aws.Aurora.パラメタグループによる設定
  EXPLAIN: |
    パラメタグループによる設定
  BODY: |
    ■ パラメタ設定
      • 主に postgresql.conf 設定を省力化
      • 複数インスタンスに同じパラメーターを簡単にアタッチ可能
      • デフォルトのパラメータはチューニング済み

    ■ 注意
      • パラメータ変更が適用されるタイミング
        • 静的パラメタ：適用にインスタンスの再起動が必要
        • 動的パラメタ：即座に適用
      • パラメタ範囲
        • DB クラスターパラメタ グループ
          • DB インスタンスの起動時に、クラスター全体に適用
        • DB パラメタ グループ
          • DB インスタンスの起動時に特定インスタンスに適用
      • パラメータ変更に伴うテスト

- KEY: aws.Aurora.監視
  EXPLAIN: |
    ワークロード監視(Performance Insights)
  BODY: |
    • Aurora DB クラスターのワークロードを監視するためのメトリクス
      • CPU 使用率
      • ディスク I/O
      • ネットワーク I/O
      • ストレージ使用量
      • スロークエリ数
      • レプリケーション遅延時間
      • バックアップ遅延時間

    ■ CloudWatch メトリクス
      • Aurora DB クラスターのメトリクスを CloudWatch で監視可能
      • CloudWatch アラームを設定して、特定の条件を満たした場合に通知可能

    ■ Performance Insights
      • Aurora DB クラスターのパフォーマンスを可視化するためのツール
      • SQL クエリの実行時間や待機時間などをグラフで表示可能
      • パフォーマンスのボトルネックを特定するための情報を提供
      • Aurora DB クラスターのパフォーマンスを可視化するためのツール

    ■ 負荷チャート
      • 負荷をリアルタイムで可視化する監視ツール
      • 全てのデータベースエンジンは"Active"/"Idle"属性の接続がある
        • 1秒おきに"Active"な接続の詳細な情報をサンプリング
        • SQL文、状態(CPU処理中、待機中) 、接続元ホスト、接続ユーザー

    ■ カウンターメトリクスチャート
      • Performance Insights Dashboard にOS、DBのパフォーマンスメトリクス追加可能
      • 統計情報などの表示が可能

- KEY: aws.Aurora.メンテナンス
  EXPLAIN: |
    メンテナンス
  BODY: |
    ■ AWSがメンテナンスを定期実行
      • メンテナンスウィンドウで指定した曜日・時間帯に自動実施
      • 安全性・堅牢性に関わるソフトウェアパッチを自動適用
      • リブートやダウンタイムを伴うケースあり
      • 通常、数ヶ月に一度の頻度で発生（毎週必ずではない）
      • 指定した時間帯の数分間で実施（メンテナンス内容に依存）

    ■ 考慮事項
      • メンテナンス有無の定期的な確認
        • マネジメントコンソール、CLI, API
      • イベント通知の設定
      • 適切なメンテナンスウィンドウ設定
        • トラフィックが少ない曜日・時間帯

    ■ マネジメントコンソールでの確認方法
      • メンテナンス(Maintenance)列の表示を確認
        • 必須(required)                  メンテナンスアクションがリソースに適用(期限あり)
        • 利用可能(available)              メンテナンスアクションが利用可能
                                          (自動的にはリソースに適用されないので、必要に応じて手動で適用)
        • 次のウィンドウ(next window)       次回のメンテナンスウィンドウ中に適用
        • 進行中(in progress)             メンテナンスアクション適用中

      • 更新の適用
        • [アクション]-[Upgrade Now]
        • [アクション]-[Upgrade at Next Window]

    ■ AWS CLI でのメンテナンス確認と適用
      • AWS CLI によりメンテナンスがスケジュールされた場合の通知、適用を自動化可能
        • メンテナンスの確認              describe-pending-maintenance-actions
        • メンテナンスの適用              apply-pending-maintenance-action

      • 例 $ aws rds apply-pending-maintenance-action \
              --resource-identifier <arn> \
              --apply-action system-update \
              --opt-in-type immediate

- KEY: aws.Aurora.IAM認証のサポート
  EXPLAIN: |
    IAM認証の「認証トークン」
  BODY: |
    • 通常パスワードではなく、接続前に、権限に基づく認証トークン作成をIAMに依頼
    • その認証トークンをパスワードの代わりに使用
    • 認証トークンの有効期限は15分
    • データベースクラスターの1秒あたりの最大接続数は、インスタンスタイプとワークロードに応じて制限

      GRANT rds_iam TO foo;
      $export PGPASSWORD="$(aws rds generate-db-auth-token --hostname <DB_HOSTNAME> --port 5432 --username foo)"
      $psql "host=$HOST port=5432 dbname=$DBNAME uer=foo sslmode=verify-full sslrootcert=certificateFile"

- KEY: aws.Aurora.パスワード管理
  EXPLAIN: |
    パスワード管理(rds_password ロール)
  BODY: |
    ■ 機能概要
      • ロール/ユーザに対するパスワードを誰が変更可能かを制御する機能
      • rds_password ロールを持つメンバのみをパスワード変更とする
      • パスワード要件(有効期限など)の設定を可能に

    ■ 利用の仕方
      • rds.restrict_password_commands = 1 に設定(パラメータグループ)
      • rds_password ロール

    ■ 注意点
      • RDS/Aurora PostgreSQL 10.6以降で利用可能
      • rds_superuser は rds_password ロールを常に持つ

- KEY: aws.Aurora.リアルタイム監視
  EXPLAIN: |
    リアルタイム監視
  BODY: |
    ■ Database Activity Stream による監視
      • データベースアクティビティをニアリアルタイムで Kinesis Data Stream へプッシュ
      • SQL コマンド、接続情報
      • DBアクティビティ情報は暗号化
      • パートナー製品による監査に対応

- KEY: aws.Aurora.削除保護
  EXPLAIN: |
    Deletion Protection(インスタンス削除保護)
  BODY: |
    ■ 削除保護フラグ
      • オペミスによるDB クラスター削除防止
      • クラスター内の最後のインスタンス削除防止機能

    ■ 削除保護有効
      • インスタンスの削除リクエストはブロック
      • リクエスト前に削除保護の無効化が必要

- KEY: aws.Aurora.CloudWatchLogsとの連携
  EXPLAIN: |
    CloudWatch Logs との連携
  BODY: |
    ■ CloudWatch Logs へのログ出力
      • PostgreSQL のログを CloudWatch Logs に出力する機能
      • Aurora PostgreSQL 10.7 以降で利用可能

    ┌────────┐  ┌────────────┐ Event Subscription ┌───────────────┐ 
    │ Aurora ├─→│ CloudWatch ├┬──────────────────→│ Lambda        │ リアルタイム処理
    │        │  │ Logs       ││                   └───────────────┘
    └────────┘  └────────────┘│                   ┌───────────────┐┌─────────┐
                              ├──────────────────→│ CloudWatch    ││ Elastic │ 可視化
                              │                   │ Logs Insights ││ Search  │
                              │                   └───────────────┘└─────────┘
                              │ export            ┌───────────────┐ 
                              ├──────────────────→│ S3 Bucket     │ ログ保存
                              │                   └───────────────┘
                              │ Alarm             ┌───────────────┐ 
                              └──────────────────→│ SNS(NortifSrv)│ Adminへのアラート
                                                  └───────────────┘

     ■ CloudWatch Logs : 特定文字列検出のためのフィルター
      • ログデータから特定の文字列のフィルタリングが可能
      • 正規表現の利用ができない点に注意
      • 一致したパターンに応じた処理が可能
        • 特定文字列の出力頻度によりアラーム通知(メトリクスフィルタ)
        • Lambda関数を実行/Elasticsearch Service連携(サブスクリプションフィルタ)
      • ユースケース
        • メッセージレベルに応じたアラーム
        • 事前に想定されるパターンに応じて自動処理

- KEY: aws.Aurora.S3からのデータインポート
  EXPLAIN: |
    S3からのデータインポート
  BODY: |
    • S3バケットの保存データを直接 Aurora PostgreSQL にインポート可能
    • aws_s3 拡張モジュール使用
    • PostgreSQL のCOPY文でサポートされるファイル形式(csvなど)が利用可能
    • RDS/Aurora に付与したIAM ロールを通じてS3 へのアクセスを許可
    • 大量データのインポート、移行などのユースケースに対応

      => CREATE EXTENSION aws_s3 CASCADE;
      NOTICE: installing required extension "aws_commons"
      CREATE EXTENSION
      => SELECT aws_s3.table_import_from_s3(
          'aws_s3', '',
          '(format csv)',
          '(mys3bucket, path/myfile.csv, ap-northeast-1)');
      ----------------------------------------------------------------------
      30 rows imported into relation "aws_s3" from file path/myfile.csv of 912 bytes

#-------------------------------
# 実装
#-------------------------------
- KEY: aws.Aurora.use.category
  CATEGORY: 実装

- KEY: aws.Aurora.use.XXX
  EXPLAIN: |
    実装
  BODY: |
    XXXX
