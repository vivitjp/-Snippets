---
#-------------------------------
# AWS
#-------------------------------
- KEY: aws.vpc.category
  CATEGORY: VPC(Virtual Private Cloud)概要

- KEY: aws.vpc.components
  EXPLAIN: |
    様々なコンポーネント
  OPTIONS:
    COLS: 3
  BODY: |
    インターネットゲートウェイ
    サブネット
    仮想ルータ
    ルートテーブル
    VPC Peering
    NAT ゲートウェイ
    VPC エンドポイント
    Elastic IP
    バーチャル プライベート ゲートウェイ
    VPN コネクション
    カスタマ ゲートウェイ
    Elastic ネットワーク インタフェース
    Elastic ネットワーク アダプタ
    PrivateLink

- KEY: aws.vpc.type
  EXPLAIN: |
    様々な定義サンプル
  BODY: |
    ■ まずは全体のネットワーク空間をVPCとして定義

    10.0.0.0 /16
    ┌─────────────────┐
    │ VPC             │
    │                 │
    │                 │
    └─────────────────┘

    ■ 利用するサブネットを定義

    10.0.0.0 /16
    ┌──────────────────────────┐
    │ VPC   ┌────────────────┐ │
    │       │ 10.0.1.0/24    │ │
    │       │ Public Subnet  │ │
    │       └────────────────┘ │
    └──────────────────────────┘

    ■ インターネットへの接続を設定

    10.0.0.0 /16
    ┌─────────────────────────────────────────┐
    │ VPC   ┌────────────────┬──────────────┐ │
    │       │ 10.0.1.0/24    │ [172.16.0.0] ├──────[Internet]
    │       │ Public Subnet  │ [172.16.1.0] │ │
    │       │                │ ...          │ │
    │       └────────────────┴──────────────┘ │
    └─────────────────────────────────────────┘

    ■ プライベートサブネットを追加

    10.0.0.0 /16
    ┌─────────────────────────────────────────┐
    │ VPC   ┌────────────────┬──────────────┐ │
    │       │ 10.0.1.0/24    │ [172.16.0.0] ├──────[Internet]
    │       │ Public Subnet  │ [172.16.1.0] │ │
    │       │                │ ...          │ │
    │       └────────────────┴──────────────┘ │
    │       ┌────────────────┐                │
    │       │ 10.0.2.0/24    │                │
    │       │ Private Subnet │                │
    │       └────────────────┘                │
    └─────────────────────────────────────────┘

    ■ インターネットに接続しないネットワークも作成可能

    10.0.0.0 /16
    ┌──────────────────────────┐
    │ VPC   ┌────────────────┐ │
    │       │ 10.0.2.0/24    │ │
    │       │ Private Subnet │ │
    │       └────────────────┘ │
    └──────────────────────────┘

    ■ オンプレミスとの接続

    10.0.0.0 /16
    ┌─────────────┐          ┌──────────────────────────┐
    │ Office      │          │ VPC   ┌────────────────┐ │
    │ Data Center ├──────────┤       │ 10.0.2.0/24    │ │
    │             │ VPN,...  │       │ Private Subnet │ │
    │             │          │       └────────────────┘ │
    └─────────────┘          └──────────────────────────┘

- KEY: aws.vpc.category.VPC作成ウィザード
  CATEGORY: VPC作成ウィザード

- KEY: aws.vpc.wizard
  EXPLAIN: |
    VPCウィザード
  BODY: |
    VPCウィザード
    1.[VPCウィザード]の開始をクリック
    2.希望のパターンを選択
    3.選択をクリック
    4.[VPCの作成]をクリック

- KEY: aws.vpc.makeVPC0
  EXPLAIN: |
    VPC作成のステップ: インターネットへの接続を設定するVPCを作成
  BODY: |
    ■ インターネットへの接続を設定するVPCを作成
    ┌───────────────────────────────────────────────────────┐
    │ VPC  172.31.0.0/16                       [172.16.0.0] │
    │                                          [172.16.1.0] ├──────[Internet]
    │ ┌─────────────────┐   ┌─────────────────┐ ...         │
    │ │ ap-northeast-1a │   │ ap-northeast-1c │             │
    │ │┌───────────────┐│   │┌───────────────┐│             │
    │ ││ 172.31.0.0/24 ││   ││ 172.31.1.0/24 ││             │
    │ ││ Public Subnet ││   ││ Public Subnet ││             │
    │ │└───────────────┘│   │└───────────────┘│             │
    │ │ Available Zone  │   │ Available Zone  │             │
    │ └─────────────────┘   └─────────────────┘             │
    └───────────────────────────────────────────────────────┘

- KEY: aws.vpc.makeVPC1
  EXPLAIN: |
    VPC作成のステップ1: アドレスレンジを選択
  BODY: |
    ■ CIDR表記の再確認Classless Inter-Domain Routing）

      サブネットマスク: 16推奨(クラスB 65,534)
      推奨: 172.31.0.0/16 (RFC1918レンジ)
      衝突: 100.64.0.0/10 (RFC6598レンジ)

    【VPCの作成】
    ┌──────────────────────────────────────────────┐
    │ ネームタグ:         VPC-Hogehoge-201704-01    │
    │ IPv4 CIDR block:   172.31.0.0/16             │
    │ IPv6 CIDR block:   ◎ No IPv6 CIDR block     │
    │ テナンシー:         デフォルト                 │
    └──────────────────────────────────────────────┘

- KEY: aws.vpc.makeVPC2
  EXPLAIN: |
    VPC作成のステップ2: Availability ZoneにおけるSubnetを選択
  BODY: |
    ■ VPC CIDRとサブネット数
      CIDRに/16 を設定した場合の各サブネット数と使えるIPアドレス数

      サブネットマスク  サブネット数  サブネットあたりのIPアドレス数
        /18                  4            16379
        /20                 16             4091
        /22                 64             1019
        /24                256 ※           251
        /26               1024 ※            59
        /28              16384 ※            11
      
      ※ VPCあたりのサブネット作成上限数はデフォルト200個

    ■ アベイラビリティゾーン
      • 1リージョン内にAZが複数存在（大阪ローカルリージョンを除く)
      • AZはお互いに地理的・電源的・ネットワーク的に分離
      • 2つのAZを利用した冗長構成を容易に構築
      • リージョン内のAZ間は高速専用線接続（リージョン間も可能な限り高速専用線接続）

    【サブネットの作成】
    ┌──────────────────────────────────────────────┐
    │ ネームタグ:            Subnet-Public-A        │
    │ VPC:                  VPC-Hogehoge-201704-01 │
    │ VPC CIDRs:            CIDR: 172.31.0.0/16    │
    │                       Status: associated     │
    │ アベイラビリティゾーン: ap-northwest-1a        │
    │ IPv4 CIDR block:      172.31.1.0/24          │
    └──────────────────────────────────────────────┘

    ■ サブネットで利用できないIPアドレス(/24の例)
      HostAddress  用途
          .0       ネットワークアドレス
          .1       VPCルータ
          .2       Amazonが提供するDNSサービス
          .3       AWSで予約
          .255     ブロードキャストアドレス
                    (VPCではブロードキャストは非サポート)

- KEY: aws.vpc.makeVPC3
  EXPLAIN: |
    VPC作成のステップ3: インターネットへの経路を設定
  BODY: |
    ■ VPC内におけるルーティング
      • ルートテーブルはパケットがどこに向かえば良いかを示すもの
      • VPC作成時にデフォルトで１つルートテーブルが作成される
      • VPC内は作成時に指定したCIDRアドレスでルーティングされる

      【左メニュー】[ルートテーブル]
      送信先が同一のセグメントであれば同一セグメントに送信（VPC作成時にデフォルトで作成）
      ┌───────────────────────────────────────────────────┐
      │ 送信先           ターゲット   ステータス   伝達済     │
      ├───────────────────────────────────────────────────┤
      │ 172.31.0.0/16    local       アクティブ   いいえ    │  <--デフォルト作成
      └───────────────────────────────────────────────────┘

    ■ インターネットゲートウェイを作成、VPCにアタッチ
      【左メニュー】[インターネットゲートウェイ]

      インターネットゲートウェイの作成
      ┌────────────┬──────────────────────────────────────┐
      │ ネームタグ  │  VPC-Hogehoge-201704-01              │
      └────────────┴──────────────────────────────────────┘
      VPCにアタッチ
      ┌────────────┬──────────────────────────────────────┐
      │ VPC        │  vpc-xxxxx|VPC-Hogehoge-201704-01    │
      └────────────┴──────────────────────────────────────┘
      作成後
      ┌───────────────────────────────────────────────────────────────────────────────────┐
      │ 名前                    ID            状態       VPC                               │
      ├───────────────────────────────────────────────────────────────────────────────────┤
      │ VPC-Hogehoge-201704-01  igw-123456sw  attached  vpc-xxxxx|VPC-Hogehoge-201704-01  │
      └───────────────────────────────────────────────────────────────────────────────────┘

    ■ 仮想ルータとルートテーブルの関係(ルートLook up）
      省略

- KEY: aws.vpc.makeVPC4
  EXPLAIN: |
    VPC作成のステップ4: VPCへのIN/OUTトラフィックを許可(Security group)
  BODY: |
    ■ セキュリティグループ= ステートフルFirewall

      • インバウンドルール
      デフォルトで許可されているのは同じセキュリティグループ内通信のみ（外からの通信は禁止）
      ┌───────────────────────────────────────────────────────────────┐
      │ タイプ              プロトコル   ポート  送信元         削除      │
      ├───────────────────────────────────────────────────────────────┤
      │ すべてのトラフィック  すべて      すべて  sg-163x00351            │
      │ HTTP(80)            TCP(6)      80     0.0.0.0/0              │ Web公開
      └───────────────────────────────────────────────────────────────┘

    ■ Network ACLs = ステートレスFirewall

      • インバウンドルール
      サブネット単位で適用される。デフォルトでは全ての送信元IPを許可
      ┌──────────────────────────────────────────────────────────────────────────────┐
      │ ルール      タイプ               プロトコル   ポート範囲  送信元      許可/拒否   │
      ├──────────────────────────────────────────────────────────────────────────────┤
      │ 100        すべてのトラフィック   すべて       すべて     0.0.0.0/0   許可       │
      │ *          すべてのトラフィック   すべて       すべて     0.0.0.0/0   拒否       │
      └──────────────────────────────────────────────────────────────────────────────┘

    ■ ネットワークACL vs セキュリティグループ
      【ネットワークACL】                     【セキュリティグループ】
      • サブネットレベルで効果                 • サーバレベルで効果
      • Allow/DenyをIN/OUTで指定可能          • AllowのみをIN/OUTで指定可能
        (ブラックリスト型)                      (ホワイトリスト型)
      • ステートレス                          • ステートフル
        戻りトラフィックも明示的に許可設定        戻りのトラフィックを考慮しなくてよい
      • 番号の順序通りに適用                   • 全てのルールを適用
      • サブネット内のすべてのインスタンス      • インスタンス管理者がセキュリティグループ
        がACLの管理下に入る                     を適用すればその管理下になる

    ■ カスタマーマネージドプレフィックスリスト
      • ユーザ自身で複数 アドレスブロック に プレフィックス がまとめて設定可能に
      • セキュリティグループ、サブネット、Transit Gatewayのルーティングテーブルで利用可能
      • 作成したプレフィックスリストはRAMで他アカウントから参照可能

    ■ Ingress Routing
      • Internet Gateway/VGWに対するアウトバウンド・インバウンド双方のトラフィックを特定
        EC2インスタンスのENIに向ける事ができる
      • VPCに出入りする全トラフィックが特定EC2インスタンスを通過することを強制するため、
        IDS/IPSやFirewallによる監視・通信制御を効果的に実行可能
      • Ingress Routingは全てのリージョンで利用可能

      注意点
      • IGW/VGW用のルーティングテーブルを作成し、それをIGW/VGWにアタッチする。
      • サブネットに関連付けたルーティングテーブルやVPC作成時のルーティングテーブルは
        Ingress Routingには紐付けできない。
      • ENIをターゲットにするのでAZ/インスタンス障害時にlambdaなどでルーティングテーブルを
        切り替える仕組みが必要（TGWのインライン監査と同じ）
      • 他のサブネットのIGW/VGW向けのルーティングは指定したENIに向けること（非対称になる）
      • 指定できるCIDRはすでに作成されているサブネットと完全一致が必要

- KEY: aws.vpc.makeVPC5
  EXPLAIN: |
    VPC作成のステップ5: VPCセットアップの補足
  BODY: |
    ■ サブネット内のDHCP
      • サブネット内のENI(Elasticネットワークインタフェース)にIPを自動割当て
      • プライベートIPを固定にした場合はDHCP経由で該当のIPが割当てられる
        （EC2インスタンスのOS上のNIC設定はDHCP設定とする)
      • EC2インスタンスを再起動しても、割り当てられた固定IPは変わらない。

    ■ Route53 resolver(AmazonProvidedDNS)
      • Amazonが提供するDNSサービスで、以下の2つのアドレスが利用可能
          ①VPCのネットワーク範囲(CIDR)のアドレスに+2をプラスしたIP
          (10.0.0.0/16の場合は10.0.0.2)
          ②169.254.169.253
      • VPC内のEC2インスタンスからのみ参照可能
        (VPNや専用線経由では参照できない。Route 53 Resolver for Hybridsで解決)

- KEY: aws.vpc.category.設計と運用
  CATEGORY: 設計と運用

- KEY: aws.vpc.design.point
  EXPLAIN: |
    VPC設計のポイント
  BODY: |
    • CIDR(IPアドレス)は既存のVPC、社内のDCやオフィスと被らないアドレス帯をアサイン
      • プライベートアドレスで無い場合 100.64.0.0/10 CGNAT を使うのも方法
    • 複数のアベイラビリティゾーンを利用し、可用性の高いシステムを構築
    • パブリック/プライベートサブネットへのリソースの配置を慎重に検討
    • 適切なセキュリティ対策を適用する
    • システムの境界を明らかにし、VPCをどのように分割するか将来を見据えてしっかりと検討する

- KEY: aws.vpc.aws.cloud.vpc
  EXPLAIN: |
    AWSクラウドとVPC
  BODY: |
    • VPC内外のどちらにリソースやエンドポイントが存在するかサービスによって異なる
    • VPCからAWSクラウドへのリソースはIGW経由の通信となる
      • プライベートサブネットからは → NATゲートウェイ
      • S3であればVPCエンドポイントの利用も可能
      • パブリックサブネットからは → 自動割当てまたはEIPのパブリックIPから直接アクセス
    • S3, DynamoDBへのアクセスはVPCエンドポイント(Gateway型)が利用可能

- KEY: aws.vpc.endpoint
  EXPLAIN: |
    VPC Endpoint概要
  BODY: |
    ■ VPC Endpoint
      • グローバルIPをもつAWSのサービスに対して、VPC内部から直接アクセスするための出口
    ┌───────────────────────────────────────────┐
    │ AWS Cloud                                 │
    │  ┌───────────────────────┐                │
    │  │ VPC                   │                │
    │  │ ┌─────────────┐ ┌─────┴────┐ ┌───────┐ │
    │  │ │             ├─┤          ├─┤  S3   │ │
    │  │ │             │ │ VPC      │ └───────┘ │
    │  │ │             │ │ EndPoint │ ┌───────┐ │
    │  │ │             ├─┤          ├─┤  RDS  │ │
    │  │ └─────────────┘ └─────┬────┘ └───────┘ │
    │  └───────────────────────┘                │
    └───────────────────────────────────────────┘

    ■ Gateway型の動作
    ┌───────────────────────────────────────────┐
    │ AWS Cloud   Amazon Provided DNS           │
    │  ┌──────────│────────────┐                │
    │  │ VPC      │            │                │
    │  │ ┌────────│────┐ ┌─────┴────┐ ┌───────┐ │
    │  │ │  ┌─────┴───┐│ │          ├─┤  S3   │ │
    │  │ │  │ Routing ├──┤ VPC      │ └───────┘ │
    │  │ │  │ Table   ├──┤ EndPoint │ ┌───────┐ │
    │  │ │  └─────────┘│ │          ├─┤  RDS  │ │
    │  │ └─────────────┘ └─────┬────┘ └───────┘ │
    │  └───────────────────────┘                │
    └───────────────────────────────────────────┘

    ■ PrivateLink (Interface型)の動作
      • サブネットにエンドポイント用のプライベートIPアドレス生成
      • VPC内部のDNSがエンドポイント向けの名前解決に対してしてプライベートIPアドレスで回答
      • エンドポイント用プライベートIPアドレス向け通信が内部的にサービスに届ける

    ■ 機能比較 (Gateway型 vs PrivateLink(Interface型))
      • アクセス制御
        Gateway型      エンドポイントポリシー
                        IAM Policyと同じ構文でアクセス先のリソースを制限可能
        PrivateLink    セキュリティグループ
                        セキュリティグループでアクセス元IP、ポートを制御可能
                        対象のサービスの特定のリソースへのアクセス制御は不可
      • 利用料金
        Gateway型       無料
        PrivateLink     有料: サービスごとに、1プライベートIP毎に下記の料金
                              0.014 USD/時間（東京）+ 0.01 USD/ GB
                              https://aws.amazon.com/jp/vpc/pricing/
      • 冗長性              
        Gateway型       ユーザー側で意識する必要なし
        PrivateLink     マルチAZ設計: マルチAZで配置するように設定

- KEY: aws.vpc.setting
  EXPLAIN: |
    VPCの設定方法
  BODY: |
    ■ マネージメントコンソール            ブラウザUI

    ■ AWS CLI/AWS SDK
      • VPC作成
      aws ec2 create-vpc --cidr 10.10.0.0/16

      • サブネット作成
      aws ec2 create-subnet --vpc vpc-c15180a4 --cidr 10.10.1.0/24 --a us-west-2a
      aws ec2 create-subnet --vpc vpc-c15180a4 --cidr 10.10.2.0/24 --a us-west-2b

    ■ サードパーティツール

    ■ AWS CloudFormation
      • JSON/YAMLテンプレートを元にAWS環境を構築
      {
        "AWSTemplateFormatVersion" : "2010-09-09",
        "Resources" : {
          "myVPC" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
              "CidrBlock" : "10.0.0.0/16",
              "EnableDnsSupport" : "false",
              "EnableDnsHostnames" : "false",
              "InstanceTenancy" : "dedicated",
              "Tags" : [{
                "Key" : "foo",
                "Value" : "bar”
              }]
            }
          }
        }
      }

      • AWS CloudFormationデザイナー
        • GUIでテンプレートの作成が可能

- KEY: aws.vpc.operation
  EXPLAIN: |
    VPCの運用
  BODY: |
    ■ VPC Flow Logs
      • ネットワークトラフィックをキャプチャし、CloudWatch Logs、S3へPublishする機能
      • ネットワークインタフェースを送信元/送信先とするトラフィックが対象
      • セキュリティグループとネットワークACLのルールでaccepted/rejectされたトラフィックログを取得
      • キャプチャウインドウと言われる時間枠(約10分間)で収集、プロセッシング、保存
      • RDS, Redshift、ElasticCache WorkSpacesのネットワークインタフェーストラフィックも取得可能
      • 追加料金はなし(CloudWatch Logs,S3の標準料金は課金）

    ■ VPC Traffic Mirroring
      • EC2インスタンスのENIからネットワークトラフィックをミラーリングする機能
      • ネットワークトラフィックをコピー(ミラー)し、VXLANでカプセル化して宛先に送信

      ユースケース
      1. 脅威検出(フォレンジック)
      2. コンテンツモニタリング
      3. 問題判別
        • VPCフローログには含まれない、パケット内容の取得が可能

      構成: 「ソース」「フィルタ」「ターゲット」とそれらを結びつける「セッション」の4つのリソース

    ■ GuardDuty による脅威の検知と通知
      ログを解析して脅威を判定
      • 脅威の種類
          悪意のあるスキャン
          インスタンスへの脅威
          アカウントへの脅威
      • データソース
          DNS Logs
          CloudTrail

      • AWS環境における、脅威検出を目的としたマネージドサービス
      • EC2またはIAMにおける脅威を検出
      • 機械学習による、異常検知の仕組み
      • エージェント、センサー、ネットワークアプライアンス等は不要
      • エコシステムの充実
      • シンプルなコスト形体と30日間の無料枠

      利用例：Elasticsearch Service + kibanaによる可視化

    ■ Amazon VPCの代表的なクオータ（要確認）
      リソース                                              数
      • リージョン当たりのVPC の数                             5
      • VPC 当たりのサブネットの数                           200
      • AWS アカウント当たり、1 リージョン内のElastic IP数      5
      • ルートテーブル当たりのルートの数                      100
      • VPCあたりのセキュリティグループの数                   500
      • セキュリティグループあたりのルール数(In/Out)           50
      • ネットワークインタフェースあたりのセキュリティグループ    5
      • VPC当たりのアクティブなVPCピア接続                    125
      • VPCあたり(仮想プライベートゲートウェイ)のVPN接続数      10
