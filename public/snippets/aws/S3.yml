---
#-------------------------------
# AWS
#-------------------------------
- KEY: aws.S3.category
  CATEGORY: S3(Simple Storage Service)

- KEY: aws.S3.概要
  EXPLAIN: |
    概要
  BODY: |
    • オブジェクトストレージサービス
    • データ(ファイル)を「オブジェクト」として保存
    • オブジェクト(複数)は「バケット」に格納
    • バケットはAWSリージョン内で一意な名前を持つ
    • バケットはグローバルで一意な名前を持つ

    ■ 耐久性 & 可用性
      • S3 のデータ耐久性はイレブンナイン(99.999999999%)(耐久性)
         • 自動的に 同リージョン内の 3AZ 以上にバックアップ
         • リージョン障害時にはアクセスできない
      • 可用性 99.99 %(稼働)

    ■ オブジェクトキー
      • オブジェクトキー名は「バケット名/オブジェクト名」で指定
      • 例: 「BucketName/Project/Word123.txt」
            Project/WordFiles: プレフィックス
            123.txt: オブジェクト名
      • マネジメントコンソールではフォルダのような階層で表示
      • 実際は「階層」は存在せず、「/」区切りのプレフィックスをグループ化(「フォルダ」概念)して表示

- KEY: aws.S3.VPCからアクセスパターン
  EXPLAIN: |
    VPCからアクセスパターン
  BODY: |
    ■ 1.EC2（パブリックサブネット）> Internet Gateway
      • コスト無
      • PublicSubnet から InternetGateway 経由で S3 にアクセス
    ┌─────────────────────────────────────────────────┐
    │ AWS Cloud                                       │
    │ ┌─────────────────────────────────────────────┐ │
    │ │ Region                                      │ │
    │ │  ┌──────────────────────────┐               │ │
    │ │  │ VPC                      │               │ │
    │ │  │ ┌────────────────┐ ┌─────┴────┐ ┌──────┐ │ │
    │ │  │ │ Public Subnet  ├─┤ Internet ├─┤  S3  │ │ │
    │ │  │ │     [EC2]      │ │ Gateway  │ └──────┘ │ │
    │ │  │ └────────────────┘ └─────┬────┘          │ │
    │ │  │ ┌────────────────┐       │               │ │
    │ │  │ │ Private Subnet │       │               │ │
    │ │  │ │                │       │               │ │
    │ │  │ └────────────────┘       │               │ │
    │ │  └──────────────────────────┘               │ │
    │ └─────────────────────────────────────────────┘ │
    └─────────────────────────────────────────────────┘

    ■ 2.EC2（プライベートサブネット）> NAT Gateway
      • コスト高
      • PrivateSubnet から NAT Gateway/InternetGateway 経由で S3 にアクセス
    ┌──────────────────────────────────────────────────┐
    │ AWS Cloud                                        │
    │ ┌──────────────────────────────────────────────┐ │
    │ │ Region                                       │ │
    │ │  ┌───────────────────────────┐               │ │
    │ │  │ VPC                       │               │ │
    │ │  │ ┌─────────────────┐ ┌─────┴────┐ ┌──────┐ │ │
    │ │  │ │ Public Subnet   │ │ Internet ├─┤  S3  │ │ │
    │ │  │ │ ┌─────────────┐ │ │ Gateway  │ └──────┘ │ │
    │ │  │ │ │ NAT Gateway ├─┼─┤          |          │ │
    │ │  │ │ └──────┬──────┘ │ │          │          │ │
    │ │  │ └────────│────────┘ └─────┬────┘          │ │
    │ │  │ ┌────────│────────┐       │               │ │
    │ │  │ │      [EC2]      │       │               │ │
    │ │  │ │ Private Subnet  │       │               │ │
    │ │  │ └─────────────────┘       │               │ │
    │ │  └───────────────────────────┘               │ │
    │ └──────────────────────────────────────────────┘ │
    └──────────────────────────────────────────────────┘

    ■ 3.EC2（プライベートサブネット）> VPC Endpoint(Gatewayタイプ)
      • コスト無
      • PrivateSubnet から VPC Endpoint(Gateway)経由で S3 にアクセス
      • アクセスは【グローバルIP】
    ┌──────────────────────────────────────────────────┐
    │ AWS Cloud                                        │
    │ ┌──────────────────────────────────────────────┐ │
    │ │ Region                                       │ │
    │ │  ┌───────────────────────────┐               │ │
    │ │  │ VPC                       │               │ │
    │ │  │ ┌─────────────────┐       │               │ │
    │ │  │ │ Public Subnet   │       │               │ │
    │ │  │ └─────────────────┘       │               │ │
    │ │  │ ┌─────────────────┐ ┌─────┴────┐ ┌──────┐ │ │
    │ │  │ │ Private Subnet  ├─┤ VPC      ├─┤  S3  │ │ │
    │ │  │ │      [EC2]      │ │ Endpoint │ └──────┘ │ │
    │ │  │ │                 │ │ Gateway  │          │ │
    │ │  │ └─────────────────┘ └─────┬────┘          │ │
    │ │  └───────────────────────────┘               │ │
    │ └──────────────────────────────────────────────┘ │
    └──────────────────────────────────────────────────┘

    ■ 4.EC2（プライベートサブネット）> VPC Endpoint(Interfaceタイプ)
      • コスト低
      • PrivateSubnet から VPC Endpoint(Interface)経由で S3 にアクセス
      • アクセスは【プライベートIP】
    ┌───────────────────────────────────────────────────┐
    │ AWS Cloud                                         │
    │ ┌───────────────────────────────────────────────┐ │
    │ │ Region                                        │ │
    │ │  ┌───────────────────────────┐                │ │
    │ │  │ VPC                       │                │ │
    │ │  │ ┌─────────────────┐       │                │ │
    │ │  │ │ Public Subnet   │       │                │ │
    │ │  │ └─────────────────┘       │                │ │
    │ │  │ ┌─────────────────┐ ┌─────┴─────┐ ┌──────┐ │ │
    │ │  │ │ Private Subnet  ├─┤ VPC       ├─┤  S3  │ │ │
    │ │  │ │      [EC2]      │ │ Endpoint  │ └──────┘ │ │
    │ │  │ │                 │ │ Interface │          │ │
    │ │  │ └─────────────────┘ └─────┬─────┘          │ │
    │ │  └───────────────────────────┘                │ │
    │ └───────────────────────────────────────────────┘ │
    └───────────────────────────────────────────────────┘

- KEY: aws.S3.バケットポリシー
  EXPLAIN: |
    バケットポリシー
  BODY: |
    • バケットと内包オブジェクトへのアクセス許可を付与するリソースベースのポリシー
    • JSON で定義
    • バケットポリシーは S3 バケットに直接アタッチ

    ■ 注意
      • 同一アカウント内でのアクセス許可設定はIAMポリシーによって制御
        • IAMポリシーとバケットポリシーを併用時、一方で拒否されるとアクセス「拒否」
      • 別アカウントからのアクセス
        • バケットポリシーとIAMポリシーの両方で許可する必要あり
      • サイズ制限 20 KB

    ■ アクセスコントロールリスト(ACL)
      • バケットポリシーは ACL よりも優先される
      • バケットポリシーで許可されていても、ACL で拒否されている場合はアクセス拒否
      • 「バケット・オブジェクト」への「アクセス」を許可
        • 基本的な読み取り/書き込み許可を他の AWS アカウントに付与
      • ACL は S3 のサービスが開始された当初からあったアクセス制御手段
        • その後 IAM が提供されたため、アクセス制御の手段が複数になりました。
      • 現在では、バケットポリシーや IAM ポリシーのほうが柔軟な制御が可能

    ■ サンプル(IP アドレス制限)
      {
        "Version": "2012-10-17",
        "Id": "S3PolicyId1",
        "Statement": [
          {
            "Sid": "IPAllow",
            "Effect": "Deny",                    <-- アクセス拒否
            "Principal": "*",
            "Action": "s3:*",
            "Resource": [
              "arn:aws:s3:::DOC-EXAMPLE-BUCKET",
              "arn:aws:s3:::DOC-EXAMPLE-BUCKET/*"
            ],
            "Condition": {
              "NotIpAddress": {
                "aws:SourceIp": "192.0.2.0/24"   <-- このIPアドレス以外はアクセス拒否
              }
            }
          }
        ]
      }

    ■ サンプル(CloudFrontで使用)
      {
        "Version": "2008-10-17",
        "Id": "PolicyForCloudFrontPrivateContent",
        "Statement": [
          {
            "Sid": "AllowCloudFrontServicePrincipal",
            "Effect": "Allow",
            "Principal": {
              "Service": "cloudfront.amazonaws.com"
            },
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::20231210tekitobucket--us-west-2/*",
            "Condition": {
              "StringEquals": {
                "AWS:SourceArn": "arn:aws:cloudfront::YOUR_ACCOUNT_ID:distribution/ENW7MC67VLORD"
              }
            }
          }
        ]
      }

- KEY: aws.S3.ライフサイクル
  EXPLAIN: |
    ライフサイクル機能
  BODY: |
    • 指定期間経過後、一定ファイルを別ストレージタイプ(Glacier)に移動してコスト削減、または削除できる機能
    • ライフサイクルのルールは最大 1,000個
    • ライフサイクルでのオブジェクト移動は 0:00(UTC, JST: AM9:00)
    • 例: 削除日数 1 日
      • 09:00 前に作成 -> 翌日 09:00 に削除
      • 09:00 後に作成 -> 翌々日の 09:00 時に削除

- KEY: aws.S3.ストレージタイプ
  EXPLAIN: |
    ストレージタイプ
  TABLE:
    OPTION:
      ALIGN:
        - left
        - left
        - right
        - right
        - left
        - left
        - left
        - left
      HAS_TITLE: true
      WIDTH:
        - 14%
        - 22%
        - 5%
        - 5%
        - 5%
        - 5%
        - 5%
    BODY: |
      ストレージクラス	対象	耐久性	可用性	AZ	最小\nストレージ\n期間	請求可能な\n最小Object\nサイズ	その他の\n考慮事項
      S3 Standard。(STANDARD)	ミリ秒アクセスで頻繁にアクセスされたデータ(月に 2 回以上)	100.00%	99.99%	>= 3	なし	なし	なし
      S3 Standard–IA。(STANDARD_IA)	存続期間が長く、ミリ秒単位のアクセスデータであまり頻繁にアクセスされない(1 か月に 1 回)	100.00%	99.90%	>= 3	30 日間	128 KB	GB 単位の取り出し料金が適用
      S3 Intelligent-Tiering。(INTELLIGENT_TIERING)	認識されていない、変更されている、または予測不可能なアクセスパターンを持つデータ	100.00%	99.90%	>= 3	なし	なし	オブジェクトごとのモニタリングとオートメーションの料金が適用。取り出し料なし。
      S3 One Zone-IA。(ONEZONE_IA)	再作成可能で、ミリ秒単位でアクセスされたデータでアクセス頻度が低く（月に 1 回)	100.00%	99.50%	1	30 日間	128 KB	GB 単位の取り出し料金が適用。AZの損失においては回復性なし。
      S3 Express One Zone。(EXPRESS_ONEZONE)	単一AZ内のレイテンシーの影響を受けやすいアプリケーションに対する 1 桁のミリ秒単位のデータアクセス	100.00%	99.95%	1	なし	なし	S3 Express One Zone(EXPRESS_ONEZONE) のオブジェクトは選択した単一AZに保存。
      S3 Glacier Instant Retrieval(GLACIER_IR)	存続期間が長く、ミリ秒のアクセスで四半期に一度アクセスされるアーカイブデータ	100.00%	99.90%	>= 3	90 日間	128 KB	GB 単位の取り出し料金が適用。
      S3 Glacier Flexible Retrieval。(GLACIER)	存続期間が長く、取得時間は分から数時間になり、年に 1 回アクセスされたアーカイブデータ	100.00%	99.99%(オブジェクトを復元後)	>= 3	90 日間	NA*	GB 単位の取り出し料金が適用。アクセス前にまずアーカイブされたオブジェクトを復元する必要あり。
      S3 Glacier Deep Archive。(DEEP_ARCHIVE)	存続期間が長く、年に 1 回未満でアクセスされ、取得時間は何時間に渡ってアクセスされるアーカイブデータ	100.00%	99.99%(オブジェクトを復元後)	>= 3	180 日間	NA**	GB 単位の取り出し料金が適用。アクセス前にまずアーカイブされたオブジェクトを復元する必要あり。
      低冗長化ストレージ。(REDUCED_REDUNDANCY)。非推奨	重要ではない、ミリ秒単位で頻繁にアクセスされるデータ	99.99%	99.99%	>= 3	なし	なし	なし

- KEY: aws.S3.ストレージタイプ
  EXPLAIN: |
    ストレージタイプ解説
  BODY: |
    ■ S3 標準(Standard)
      • アクセス頻度の高いデータ向けに高い耐久性、可用性、パフォーマンスのオブジェクトストレージ
      • 【可用性】99.99 %
      • 【ライフサイクル】他ストレージクラスへ移動可能

    ■ S3 標準 - 低頻度アクセス(Infrequent Access)(Standard-IA)
      • アクセス頻度は低いが、必要に応じてすぐに取り出すことが必要なデータに最適
      • 【可用性】99.9 %
      • 【ライフサイクル】他ストレージクラスへ移動可能
      • 【課金】格納後 30 日以内に削除された場合、30 日分の課金発生

    ■ S3 Intelligent-Tiering
      • アクセスパターンが不明または変化するデータに対して自動的にコスト削減
      • 【ライフサイクル?】30 日間無アクセス、低頻度アクセス階層に移動
      • 【ライフサイクル?】90 日間無アクセス、アーカイブインスタントアクセス階層に移動
      • 【可用性】99.9 %
      • 【課金】128 KB より小さなオブジェクトは、常に高頻度アクセス階層料金で課金

    ■ S3 1 ゾーン - 低頻度アクセス(S3 One Zone-IA)
      • アクセス頻度は低いが、必要に応じてすぐに取り出すことが必要なデータに最適
      • 他のクラスと違い、単一AZのみに保存されているので、Standard-IA より 20% コスト削減
      • 【可用性】99.5 %
      • 【ライフサイクル】他ストレージクラスへ移動可能
      • 【課金】格納後 30 日以内に削除された場合、30 日に満たなかった分も日割での課金発生

    ■ S3 Glacier Instant Retrieval
      • アクセスはほとんどないが、即時取り出しを必要とするアーカイブデータ向け
      • S3 Standard と同じミリ秒単位でのデータの取り出し
      • 四半期に一度データにアクセスする場合、S3 Standard-IA に比べて最大で 68%のコスト削減
      • 【可用性】99.9 %
      • 【課金】格納後 90 日以内に削除された場合、90 日に満たなかった分も日割での課金発生

    ■ S3 Glacier Flexible Retrieval(旧 S3 Glacier)
      • 即時アクセスを必要としないアクセス頻度の低い長期データ用
      • 【可用性】99.99 %
      • 【取り出し時間】数分から数時間
      • 【課金】格納後 90 日以内に削除された場合、90 日に満たなかった分も日割での課金発生

    ■ S3 Glacier Deep Archive
      • クラウド上の最も低コストなストレージで数時間で取り出し可能な長期アーカイブやデジタル保存用
      • 7 ～ 10 年という長期間保存用に設計されており、磁気テープライブラリの理想的な代替策
      • 【取り出し時間】12 時間以内
      • 【課金】格納後 180 日以内に削除された場合、180 日に満たなかった分も日割での課金発生

- KEY: aws.S3.バージョニング
  EXPLAIN: |
    バージョニング
  BODY: |
    • パフォーマンスに影響を与えず、偶発的な上書きや削除から保護
    • アップロードごとに新しいバージョンを生成するオプション
    • 削除されたオブジェクトの取得
    • 過去のバージョンへのロールバック
    • デフォルト: 無効
    • 有効にすると、オブジェクトのバージョン ID 生成
      • バージョン ID はオブジェクトのメタデータとして保存
      • バージョン ID はオブジェクトキーの一部として使用

- KEY: aws.S3.暗号化
  EXPLAIN: |
    暗号化
  BODY: |
    ■ サーバー側の暗号化
      • Server Side Encryption
        • SSE-S3
          • S3 管理キーで暗号化
          • 追加料金なし
        • SSE-KMS(Key Management Service)
          • KMSの顧客マスタキー(CMK)で暗号化
          • KMSの料金が別途必要
        • SSE-C
          • 独自の暗号化キーを設定して暗号化

      • ディスクに書き込む前に暗号化
      • ダウンロードする際に自動的に復号
      • 目的: ディスク盗難時のデータ漏えい防止(AWSデータセンターで物理的ディスク盗難)
      • 設定デメリットがなく、「要件」がなくとも SSE-S3 での暗号化はデフォルトで設定
      • 要件に従い、SSE-KMS や SSE-C などを採用します。

    ■ クライアント側の暗号化
      • CSE(Client Side Encryption)
        • S3 に送る前にデータを暗号化する方法
        • クライアント側暗号化ライブラリ(AWS Encryption SDK)で実装可能

      • 機密性が高いデータについて、S3 からの想定外のダウンロードによる情報漏洩を防止

- KEY: aws.S3.S3バケットの作成
  EXPLAIN: |
    S3バケットの作成(コンソール)
  BODY: |
    ■ S3バケットの作成
      • リージョン
        • バケット作成リージョン指定
      • パケットタイプ
        • 汎用: 通常のストレージ
        • ディレクトリ: ディレクトリストレージ(低レイテンシー)
      • バケット名
        • グローバルで一意な名前を指定
        • バケット名=DNS名(DNSルールに従う)
          • 小文字の英字、数字、ハイフン(-)のみで、3～63文字
          • ハイフンでの始終端は不可で、連続したハイフンは使用不可
      • パブリックアクセスブロック(デフォルト)
        • パブリックアクセスのブロックを構成する4つの設定はドキュメント参照

- KEY: aws.S3.S3TransferAcceleration
  EXPLAIN: |
    S3 Transfer Acceleration
  BODY: |
    • 課題: 中央リージョンのバケットに世界中からULするにはデータ転送距離により遅延が問題
    • 遠方リージョンからの転送を高速化する機能
    • 大オブジェクトなら 50～500% 転送速度改善
    • Transfer Acceleration はバケット単位で有効化
    • バケットへのファイル転送は世界中に存在する CloudFront のエッジロケーションを経由してUL
    •  S3 バケットはエッジロケーションから AWS 内の最適化されたネットワークで通信
    • Transfer Acceleration 利用はAWS 自動判断
      • 転送速度が遅いと判断された場合は、エッジロケーションを経由して転送
        • 例: 東京リージョンのバケットに、アメリカから転送する場合
          • エッジロケーション経由で転送
          • 転送速度改善
      • 転送速度が速いと判断された場合は、エッジロケーションを経由せずに直接転送
        • 例: 東京リージョンのバケットに、東京から転送する場合
          • エッジロケーションを経由せずに直接転送
          • 転送速度改善なし(請求なし)
    • もし S3 Transfer Acceleration が遅いと判断された場合
      • "よくある質問" に記載(遅くなるのに無駄に利用してコスト増はしない)
        「その転送で使用する S3 Transfer Acceleration の料金を AWS が請求することはなく、
          S3 Transfer Acceleration システムをバイパスする可能性があります。」

    • 使用の前提条件
      • 「バケットは名にはピリオド(.)が含まれていない」
      • その他、ドキュメント参照
      • Amazon S3 Transfer Acceleration の速度比較ツールも利用可能

- KEY: aws.S3.アクセスログ
  EXPLAIN: |
    アクセスログ
  BODY: |
    • S3 のサーバアクセスログを別バケットに保存
    • 要注意: 同じバケットに保存すると無限ループ発生

- KEY: aws.S3.S3Select
  EXPLAIN: |
    S3 Select
  BODY: |
    • S3 に格納した CSV/JSON データをシンプルな構造化クエリ言語(SQL)の SELECT 文で検索・集計
    • 検索対象: 単一オブジェクト
      • Athena は複数ファイル対象
    • クエリスキャンのデータと、返されたサブセットデータのサイズで課金
    • AWS ドキュメント > Amazon S3 Select を使用したデータのフィルタリングと取得

- KEY: aws.S3.StorageLens
  EXPLAIN: |
    Storage Lens
  BODY: |
    • S3 バケットの使用状況を可視化
      • 例: ストレージコスト、オブジェクト数、リクエスト数、データ転送量など  
    • ストレージコストの最適化とデータ保護のベストプラクティスの推奨事項を確認
    • 不要データの存在、ライフサイクル確認での容量増加など分析
    • デフォルトでダッシュボード「default-account-dashboard」が作成、分析可能
    • 詳細分析には有料メトリクス

- KEY: aws.S3.リクエスタ支払いバケット
  EXPLAIN: |
    リクエスタ支払いバケット
  BODY: |
    • バケットのデータ保存容量とデータ転送コストはバケット所有者負担
    • 別アカウントとバケット共有指定の場合もバケット所有者負担
    • ダウンロードが大量発生すると負担増大
    • リクエスタ支払い
      • データ取得先アカウントが料金負担
      • 所有者を除き、通常方法ではアクセス不可
      • HTTP アクセスはリクエストヘッダに"x-amz-request-payer"付与
      • リクエスタ側が明示的にデータアクセスに対して料金負担を了承
      • AWS CLI の場合は、オプションに「--request-player」付与

- KEY: aws.S3.アクセスポイント
  EXPLAIN: |
    アクセスポイント
  BODY: |
    • バケットに複数のユーザー/アカウント: バケットポリシー設定が煩雑
    • 用途ごとにアクセスポイント作成で、アクセスポイントごとのポリシー定義
    • アクセスポイントは、バケットのサブドメイン名を持つ DNS 名
      • 例: mybucket-1234567890.us-west-2.s3-accesspoint.amazonaws.com

    ■ アクセスポイントポリシー定義
    {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Principal": {
            "AWS": "arn:aws:iam::123456789012:user/Alice"
          },
          "Action": ["s3:GetObject", "s3:PutObject"],
          "Resource": "arn:aws:s3:us-west-2:123456789012:accesspoint/my-access-point/object/Alice/*"
        }
      ]
    }

- KEY: aws.S3.パフォーマンスの最適化
  EXPLAIN: |
    パフォーマンスの最適化
  BODY: |
    ■ Before: シリアル・キー・プレフィックスのオブジェクト作成で、パフォーマンス上の問題発生
      • 例: 1,000 個のオブジェクトを作成する場合
        • 0001, 0002, 0003, ..., 1000
        • S3 はオブジェクトのキーを lexicographically ソート
        • オブジェクトのキーが連続していると、同じプレフィックスに対してリクエストが集中
        • リクエストのスループットが低下

      • ランダムにして対処
        BucketName/232a-2022-11-02/aaa/xxx000000001.log
        BucketName/5akg-2022-11-02/aaa/xxx000000002.log
        BucketName/gsrt-2022-11-02/aaa/xxx000000003.log

    ■ After:  問題発生せず

      BucketName/2022-11-02/aaa/xxx000000001.log
      BucketName/2022-11-02/aaa/xxx000000002.log
      BucketName/2022-11-02/aaa/xxx000000003.log

#-------------------------------
# 静的ウェブサイトのホスティング
#-------------------------------
- KEY: aws.S3.category.静的ウェブサイトのホスティング
  CATEGORY: 静的ウェブサイトのホスティング

- KEY: aws.S3.S3Select
  EXPLAIN: |
    S3 Select

- KEY: aws.S3.ホスティング.概要
  EXPLAIN: |
    概要
  BODY: |
    • S3 バケット単体で静的ウェブサイト構築
    • HTTP(非暗号化プロトコル)のみ
    • HTTPS の場合は他のサービスが必要
      • CloudFront との併用が最も簡単

- KEY: aws.S3.ホスティング.バケットを作成
  EXPLAIN: |
    バケットを作成(マネージメントコンソール)
  BODY: |
    • バケット名(example.comなど)
    • バケットのリージョン(東京リージョンなど)
      • 選択リージョンにより、S3ウェブサイトエンドポイント決定
    • バケットのタイプ(汎用)
    • [作成] を選択

- KEY: aws.S3.ホスティング.静的ウェブサイトホスティング有効化
  EXPLAIN: |
    静的ウェブサイトホスティング有効化
  BODY: |
    • S3 ナビゲーションペイン
    • [汎用バケット] を選択
    • パケットリストから指定のバケットを選択
    • [プロパティ] タブを選択
      • [静的ウェブサイトホスティング] を選択
      • [このバケットを使用してウェブサイトをホストする] を選択
      • [静的ウェブサイトホスティング] で[有効化]を選択
      • インデックスドキュメント: index.html
      • [オプション] 
        • エラードキュメント: error.html
          • 未指定はAWSのデフォルトページ
        • リダイレクトツール指定
          • [Rredirection rules]に JSON ルール記述
      • [保存] を選択
      • ウェブサイトエンドポイント
        • ページ下部 [静的ウェブサイトホスティング] の下に表示

- KEY: aws.S3.ホスティング.パブリックアクセスブロック設定を編集
  EXPLAIN: |
    パブリックアクセスブロック設定を編集
  BODY: |
    • S3 ナビゲーションペイン
    • [汎用バケット] を選択
    • パケットリストから指定のバケットを選択
    • [Permissions(アクセス許可)]を選択
    • [ブロックパブリックアクセス (バケット設定)] で [編集] を選択

    • パブリックアクセス【許可】
      [すべてのパブリックアクセスをブロック] 非選択(チェックを外す)

    • パブリックアクセス【拒否】
      [すべてのパブリックアクセスをブロック] 選択(チェックを入れる)
      • [バケットポリシー] で IPアドレス制限設定

    ■ 注意:アカウントのブロックパブリックアクセス(*BPA)設定
      • S3ではバケットのBPAがデフォルトでオフ
      • バケットポリシー追加前に、アカウントのBPA設定を変更
      • BPA【有効】
        • バケットポリシーでのパブリックアクセス[許可]は【無視】
        • [ブロックパブリックアクセス (バケット設定)] 下にメモ表示
      • BPA【無効】
        • バケットポリシーでのパブリックアクセス[許可]は【有効】
        • バケットポリシーでのパブリックアクセス[拒否]は【無視】

- KEY: aws.S3.ホスティング.バケットポリシー
  EXPLAIN: |
    バケットポリシー 許可 & 拒否
  BODY: |
    • [バケット] バケット名選択
    • [Permissions(アクセス許可)]を選択
    • [バケットポリシー] で[編集]を選択
    • [バケットポリシーエディタ] に JSON ルール記述
    • [保存] を選択

    ■ パブリックアクセス【許可】
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "PublicReadGetObject",
            "Effect": "Allow",
            "Principal": "*",
            "Action": ["s3:GetObject"],
            "Resource": [
              "arn:aws:s3:::BUCKET_NAME/*" <--- バケット名に置換
            ]
          }
        ]
      }

    ■ パブリックアクセス【拒否】
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "PublicReadGetObject",
            "Effect": "Deny",
            "Principal": "*",
            "Action": ["s3:GetObject"],
            "Resource": [
              "arn:aws:s3:::BUCKET_NAME/*" <--- バケット名に置換
            ],
            "Condition": {
              "NotIpAddress": {
                "aws:SourceIp": ["<IPアドレス>"] <--- IPアドレスに置換
              }
            }
          }
        ]
      }

- KEY: aws.S3.ホスティング.インデックスドキュメント
  EXPLAIN: |
    インデックスドキュメント
  BODY: |
    [index.html] をローカルに作成(名前は指定通り)

      <html xmlns="http://www.w3.org/1999/xhtml" >
        <head>
          <title>My First Web Page</title>
        </head>
        <body>
          <h1>Hello World!</h1>
          <p>Welcome to my first web page hosted on S3.</p>
        </body>
      </html>

      • S3 ナビゲーションペインで [汎用バケット] 選択
      • [バケットリスト] 該当バケット名を選択
      • アップロード
        • ファイルをコンソールバケットのリストにドラッグ&ドロップ
        • [Upload] を選択してアップロード
        • その他のファイルも同様にアップロード

- KEY: aws.S3.ホスティング.アクセスクリーンアップ
  EXPLAIN: |
    アクセス & クリーンアップ
  BODY: |
    ■ アクセス
      • ウェブサイトエンドポイントをブラウザで開く
        • http://example.com.s3-website-ap-northeast-1.amazonaws.com/
        • [index.html] が表示される

    ■ クリーンアップ(学習用で料金発生を防ぐため)
      • [index.html] を削除
        • [バケットリスト] 該当バケット名を選択
        • [Objects] タブを選択
        • [index.html] を選択して削除

#-------------------------------
# 実装
#-------------------------------
- KEY: aws.S3.category.実装
  CATEGORY: 実装

- KEY: aws.S3.実装.作成
  EXPLAIN: |
    ファイルアップロード(SDK)
  BODY: |
    import { readFile } from "node:fs/promises";
    import {
      PutObjectCommand,
      S3Client,
      S3ServiceException,
    } from "@aws-sdk/client-s3";

    /**
    * Upload a file to an S3 bucket.
    * @param {{ bucketName: string, key: string, filePath: string }}
    */
    export const main = async ({ bucketName, key, filePath }) => {
      const client = new S3Client({});
      const command = new PutObjectCommand({
        Bucket: bucketName,
        Key: key,
        Body: await readFile(filePath),
      });

      try {
        const response = await client.send(command);
        console.log(response);
      } catch (caught) {
        if (
          caught instanceof S3ServiceException &&
          caught.name === "EntityTooLarge"
        ) {
          console.error(
            `アップロードエラー: ${bucketName}. サイズ超過.\
            5GB以上は S3 console(160GB max) または マルチパートアップロードAPI(5TB max)`,
          );
        } else if (caught instanceof S3ServiceException) {
          console.error(
            `アップロードエラー: ${bucketName}.  ${caught.name}: ${caught.message}`,
          );
        } else {
          throw caught;
        }
      }
    };
