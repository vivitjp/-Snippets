---
#-------------------------------
# Nextjs
#-------------------------------

- KEY: nextjs.overview
  EXPLAIN: Nextjs 概説
  BODY: |
    Next.jsを使うべき5つの理由 + 実装Tips
    https://qiita.com/Yuki_Oshima/items/5c0dfd8f7af8fb76af8f

    ■ SSR/SSG
    ■ ファイルベースルーティング
    ■ 開発サーバの部分的な高速リロード(Fast Refresh)
    ■ 画像最適化
    ■ ゼロコンフィグ

- KEY: nextjs.install
  EXPLAIN: インストール
  BODY: |
    ■ インストール
    npx create-next-app@latest          // インストール後の npm/yarn 使用を決定
    yarn create next-app

    Need to install the following packages:
    create-next-app@14.2.5
    Ok to proceed? (y) y

    √ What is your project named? ... next13
    √ Would you like to use TypeScript? ... No / Yes
    √ Would you like to use ESLint? ... No / Yes
    √ Would you like to use Tailwind CSS? ... No / Yes
    √ Would you like to use `src/` directory? ... No / Yes
    √ Would you like to use App Router? (recommended) ... No / Yes  <---- * app or src
    √ Would you like to customize the default import alias (@/*)? ... No / Yes
    Creating a new Next.js app in B:\@Next\next_13\next13.

    Using npm.
    Initializing project with template: app-tw 

    Installing dependencies:
    - react    
    - react-dom
    - next

    Installing devDependencies:
    - typescript
    - @types/node
    - @types/react
    - @types/react-dom
    - postcss
    - tailwindcss
    - eslint
    - eslint-config-next

    Success! Created next13 at B:\@Next\next_13\next13

    ■ 開発環境の立ち上げ
    npm run dev
    yarn dev

    ■ ブラウザ確認
    http://localhost:3000

- KEY: nextjs.install.old
  EXPLAIN: インストール(古バージョン)
  BODY: |
    $ npx create-next-app@13 --use-npm

    npmでバージョン確認
    https://www.npmjs.com/package/create-next-app?activeTab=versions

    15.0.0-rc.1       rc
    15.0.2-canary.2   canary
    15.0.1            latest
    13.5.7            next-13 <-- npx create-next-app@13 --use-npm
    14.1.1            next-12-3-2

- KEY: nextjs.package.json
  EXPLAIN: package.json
  BODY: |
    {
      "name": "next13",
      "version": "0.1.0",
      "private": true,
      "scripts": {
        "dev": "next dev",
        "build": "next build",
        "start": "next start",
        "lint": "next lint"
      },
      "dependencies": {
        "next": "14.2.5",
        "react": "^18",
        "react-dom": "^18"
      },
      "devDependencies": {
        "@types/node": "^20",
        "@types/react": "^18",
        "@types/react-dom": "^18",
        "eslint": "^8",
        "eslint-config-next": "14.2.5",
        "postcss": "^8",
        "tailwindcss": "^3.4.1",
        "typescript": "^5"
      }
    }

- KEY: nextjs.directory
  EXPLAIN: 基本ファイル
  BODY: |
    ./
      app/                              // Top
        dir1/                           // URL sub dir
          page.tsx                      // 各 sub dir のデフォルトページ
        globals.css                     // 共通CSS
        layout.tsx                      // Root HTML
        not-found.tsx                   // 404 Error ページ
        page.tsx                        // Root ページ
      components/
        atoms/
      utilities/
      hooks/
      node_modules/                     // モジュール
      public/                           // output
      next-env.d.ts
      next.config.mjs
      ...その他コンフィグ

- KEY: nextjs.root.env
  EXPLAIN: |
    Root: .env
  BODY: |
    ■ サーバーサイド
      [.env]
      ENDPOINT='https://example.com/'

      [page.tsx]
      const endPoint = process.env.ENDPOINT || '';

    ■ クライアントサイド

      * AWSでの認証時には注意: パラメータストアを利用すること

      [.env]
      NEXT_PUBLIC_ENDPOINT='https://example.com/'

      [page.tsx]
      const endPoint = process.env.NEXT_PUBLIC_ENDPOINT || '';

- KEY: nextjs.app.router.v13
  EXPLAIN: AppRouter(v13~) 構成
  BODY: |
    ■ 13以前
    ./
      src/                              // Root
        └── pages/
            ├── index.tsx               // root: / 
            └── hello/
                ├── page.tsx            // /hello?id=123
                └── [id].tsx            // /hello/123

    ■ 13以後(appの場合)
    ./
      app/                              // 名称指定: Root
        ├── page.tsx                    // 名称指定: export default コンポーネント
        ├── layout.tsx                  // 名称指定: Root Layout(HTML/BODY)
        ├── loading.tsx                 // 名称指定: Root Loading Component
        ├── template.tsx                // 名称指定: 共通UI定義(ページ遷移で毎回レンダリング)
        ├── global-error.tsx            // 名称指定: Root Error Page
        ├── hello/                      // PATH: /hello
        │   ├── error.tsx               // 名称指定: /hello Level Error Page
        │   ├── layout.tsx              // 名称指定: /hello Level Layout(Section)
        │   ├── loading.tsx             // 名称指定: /Hello Loading
        │   ├── page.tsx                // 名称指定(デフォルトファイル)
        │   ├── template.tsx            // 名称指定: 共通UI定義
        │   └── [id]/                   // 引数: /hello/123
        │       ├── page.tsx
        │       └── [name]/             // 引数: /hello/123/john
        │           └── page.tsx
        ├── address/                    // PATH: /address
        │   ├── page.tsx                // 名称指定
        │   └── _components             // プライベートpath(ルーティング非対象)
        │       └── partsA.tsx
        ├── patha/                      // PATH: /patha
        │   └── [...ids].tsx            // 引数(MUST)
        ├── pathb/                      // PATH: /pathb
        │   └── [[...ids]].tsx          // 引数(OPTIONAL)
        ├── (myGroup)/                  // グループ化: Routing path から除外
        │   ├── group1/                 // PATH: /group1
        │   │   └── page.tsx
        │   └── group2/                 // PATH: /group2
        │       └── page.tsx
        ├── api/                        // 名称任意
        │   └── name/                   // API PATH /api/name
        │       └── route.tsx           // 名称指定: API route file(GET,POST,...)
        ├── segment/                    // 名称任意
        │   ├── @seg/                   // Parallel Routes Slot
        │   │   └── page.tsx
        │   └── layout.tsx              // レイアウトの引数として @seg 呼び出し(場所注意)
        ├── _components/                // コンポーネント(プライベート)
        │   ├── atom/
        │   ├── molecules/
        │   └── organism/

- KEY: nextjs.app.router.query
  EXPLAIN: AppRouter Query
  BODY: |
    ■ DIR: ./app/hello/page.tsx
    ■ URL: http://localhost:3000/hello?id=123
    ■ コード
      "use client"                      // useSearchParams に必須

      import { useSearchParams } from "next/navigation"

      export default function XXX() {   // 関数名は任意
        const searchParams = useSearchParams()
        const id = searchParams.get("id")

        return (
          <div> Hello TOP {id} </div>
        )
      }

    ■ 注: "use client"
    ・useSearchParams などの hooks は client 側での実装なので "use client" 必須
    ・ない場合の Error

        × You're importing a component that needs useSearchParams.
        It only works in a Client Component but none of its parents are 
        marked with "use client", so they're Server Components by default.

- KEY: nextjs.app.router.dynamic.single
  EXPLAIN: AppRouter 動的Routing(引数-単数)
  BODY: |
    ■ DIR: ./app/hello/[id]/page.tsx    // 13以前とは形式異なる
    ■ URL: http://localhost:3000/hello/123

    ■ コード
      type Props = {
        params: { id: string }          // paramsは既定属性
      }

      export default function Hello({ params }: Props) {
        const { id } = params

        return (
          <div> Hello {id} </div>
        )
      }

- KEY: nextjs.app.router.dynamic.multiple
  EXPLAIN: AppRouter 動的Routing(引数-複数)
  BODY: |
    ■ DIR: ./app/hello/[id]/[name]/page.tsx
    ■ URL: http://localhost:3000/hello/123/john

    ■ コード
      type Props = {
        params: { id: string; name: string }  // paramsは既定属性
      }

      export default function Hello({ params }: Props) {
        const { id, name } = params

        return (
          <div> Hello {id} {name} </div>
        )
      }

- KEY: nextjs.app.router.dynamic.array
  EXPLAIN: AppRouter 動的Routing(引数-配列) 必須
  BODY: |
    ■ DIR: ./app/patha/[...ids]/page.tsx            // 一重[...引数]
    ■ URL: http://localhost:3000/patha/abc/123/efg  // OK: 複数の連続するパラメタ
    ■ URL: http://localhost:3000/patha/             // NG: NOパラメタ

    ■ コード
      type Props = {
        params: { ids: string[] }     // paramsは既定属性 & 引数(例:ids) 必須
      }
      export default function PathA({ params }: Props) {
        return (
          <div> PATH-A: {params.ids.join("-")} </div>
        )
      }

- KEY: nextjs.app.router.dynamic.array
  EXPLAIN: AppRouter 動的Routing(引数-配列) Optional
  BODY: |
    ■ DIR: ./app/pathb/[[...ids]]/page.tsx          // 二重[[...引数]]
    ■ URL: http://localhost:3000/pathb/abc/123/efg  // OK: 複数の連続するパラメタ
    ■ URL: http://localhost:3000/pathb/             // OK: NOパラメタ

    ■ コード
      type Props = {
        params: { ids?: string[] }        // paramsは既定属性 & 引数(例:ids) Optional
      }
      export default function PathB({ params }: Props) {
        return (
          <div> PATH-B: {params.ids?.join("-") || "unknown"} </div>
        )
      }

- KEY: nextjs.layout.root
  EXPLAIN: |
    FILE: layout.tsx(root HTML)
  BODY: |
    ■ Root Layout(HTML: Server Component By default)

      import type { Metadata } from "next";
      import { Inter } from "next/font/google";
      import "./globals.css";

      const inter = Inter({ subsets: ["latin"] });

      export const metadata: Metadata = {
        title: "Next Sample 13",
        description: "Generated by create next app",
      };

      export default function RootLayout({ children }: Readonly<{
        children: React.ReactNode;
      }>) {
        return (
          <html lang="ja">                // Root Level には HTML & Body
            <body className={inter.className}>
              <div>Root Layout</div>
              <div>{children}</div>
            </body>
          </html>
        );
      }

- KEY: nextjs.layout.pages
  EXPLAIN: |
    FILE: layout.tsx(sub paths)
  BODY: |
    ■ 各Page の nested Layout(Server Component By default)
    pages.tsx と同じフォルダ内にあり、pagesを wrap する

      export default function DashboardLayout({
        children,
      }: {
        children: React.ReactNode
      }) {
        return <section>{children}</section>
      }

- KEY: nextjs.layout.parallel.routes
  EXPLAIN: |
    Layout: Parallel Routes
  BODY: |
    ■ Tree
      sub/                              // Sub path
        ├── layout.tsx                  // sub Layout
        └── @segA                       // segment dir
            └ page.tsx                  // segment page

    ■ [sub/@segA/page.tsx]
      export default function page() {
        return <div>Segment A</div>
      }

    ■ [sub/layout.tsx]
      export default function RootLayout({
        children,
        seg1,                           // segment 自動取り込み
      }: Readonly<{
        children: React.ReactNode
        seg1: React.ReactNode
      }>) {
        return (
          <body className={inter.className}>
            {seg1}
            <div>{children}</div>
          </body>
        )
      }

- KEY: nextjs.css.global
  EXPLAIN: |
    CSS: global(Tailwind Sample)
  BODY: |
    @tailwind base;
    @tailwind components;
    @tailwind utilities;

    :root {
      --foreground-rgb: 0, 0, 0;
      --background-start-rgb: 214, 219, 220;
      --background-end-rgb: 255, 255, 255;
    }

    @media (prefers-color-scheme: dark) {
      :root {
        --foreground-rgb: 255, 255, 255;
        --background-start-rgb: 0, 0, 0;
        --background-end-rgb: 0, 0, 0;
      }
    }

    body {
      color: rgb(var(--foreground-rgb));
      background: linear-gradient(
        to bottom,
        transparent,
        rgb(var(--background-end-rgb))
      )
      rgb(var(--background-start-rgb));
    }

    @layer utilities {
      .text-balance {
        text-wrap: balance;
      }
    }

- KEY: nextjs.not.found
  EXPLAIN: |
    Not Found
  BODY: |
    ■ DIR: ./app/not-found.tsx          // Server Compo

    ■ コード(同期)
      import Link from 'next/link';

      export default function NotFound() {
        return (
          <div>
            <h2>Not Found</h2>
            <Link href='/'>Return Home</Link>
          </div>
        );
      }

    ■ コード(非同期)
      import Link from 'next/link'
      import { headers } from 'next/headers'
      
      export default async function NotFound() {
        const headersList = headers()
        const domain = headersList.get('host')
        const data = await getSiteData(domain)

        return (
          <div>
            <h2>Not Found: {data.name}</h2>
            <p>View <Link href="/blog">all posts</Link></p>
          </div>
        )
      }

- KEY: nextjs.loading
  EXPLAIN: |
    Loading Component(自動表示)
  BODY: |
    ■ Loading(Root & Local)

    同レベルPATHのpageが読み込むコンポーネントの表示に遅延が発生
    自動で読み込まれて表示

    [/app/loading.tsx]                  // Root Level
    "use client"
    import { Circles } from "react-loader-spinner"

    export default function Loading() {
      return (
        <Circles
          height="100"
          width="100"
          color="#eee8aa"
          visible={true}
        />
      )
    }

- KEY: nextjs.error.root
  EXPLAIN: |
    🔺 Error: Root
  BODY: |
    ■ Global Error(優先)

    ■ DIR: ./app/global-error.tsx       // Client Compo

- KEY: nextjs.error.pages
  EXPLAIN: |
    Error: 各Page
  BODY: |
    ■ DIR: ./app/<SUB>/error.tsx        // 各/<SUB> 以下の Client Compo

    "use client"                      // Client Components
    import { useEffect } from "react"

    export default function Error({ error, reset }: {
      error: Error & { digest?: string }
      reset: () => void
    }) {
      useEffect(() => {
        console.error(error)
      }, [error])

      return (
        <div>
          <h2>Local Error</h2>
          <button onClick={ ()=>reset() }>  // ReRender
            Try again
          </button>
        </div>
      )
    }

- KEY: nextjs.api
  EXPLAIN: API Route
  BODY: |
    ■ route.tsx                         必須 API ファイル名
    ./
      app/
        ├── layout.tsx
        ├── sub
        │   └── api/                    // 名称任意
        │       └── route.tsx           // GET /sub/api/
        └── api/                        // 名称任意
            └── address/
                └── route.tsx           // GET /api/address/

    ■ [route.tsx]                       // * index.tsx は無効
    export async function GET() {
      const URL = "https://vivit-mock-company.vercel.app/10"
      const res = await fetch(URL, {
        headers: {
          "Content-Type": "application/json",
        },
      })
      const data = await res.json()
      return Response.json({ data })
    }

- KEY: nextjs.link
  EXPLAIN: Link(next/link)
  BODY: |
    ■ リンク
    import Link from 'next/link';

    export default function Navbar() {  // Server Component
      return (
        <nav>
          <Link href="/about">About</Link>
        </nav>
      );
    }

    ■ 出力(#hash link でスクロール)
    <Link href="/dashboard#settings">Settings</Link>
    生成: <a href="/dashboard#settings">Settings</a>

    ■ スクロールOff
    <Link href="/dashboard" scroll={false}> Dashboard </Link>

    ■ typedRoutes(v13~)                 // Routeの型補完
    [next.config.mjs]
    /** @type {import('next').NextConfig} */
    const nextConfig = {
      experimental: {
        typedRoutes: true,
      },
    };
    export default nextConfig;

- KEY: nextjs.link.usePathname
  EXPLAIN: Link(next/link) + usePathname
  BODY: |
    ■ コンポーネントのpath取得
    'use client'                        // ★Client Component

    import { usePathname } from 'next/navigation'
    import Link from 'next/link'

    export function Links() {
      const pathname = usePathname()

      return (
        <nav>
          <Link
            className={`link ${pathname === "/" ? "active" : ""}`}
            href="/"
          >
            Home/
          </Link>
        </nav>
      )
    }

- KEY: nextjs.useRouter
  EXPLAIN: |
    useRouter(next/navigation: v13~)
  BODY: |
    ■ DIR: ./app/login/page.tsx
    ■ URL: http://localhost:3000/login

    ■ コード
    "use client"                        // Hooks には必須

    import { useRouter } from "next/navigation" // 新パッケージ
    // import { useRouter } from "next/router"  ★DEPRECATED

    export default function Login() {
      const router = useRouter()

      const id = 456
      const login = () => {
        router.push(`/hello/${id}`)                  //引数付きの遷移
        router.push('/dashboard', { scroll: false }) //Scroll Off
      }

      return (
        <div>
          <button onClick={login}>Log In</button>
        </div>
      )
    }

- KEY: nextjs.redirect
  EXPLAIN: redirect
  BODY: |
    ■ コード
    [app/person/[id]/page.tsx]
    import { redirect } from 'next/navigation'

    export default async function Profile({ params }: { params: { id: string } }) {
      const personId = await fetchPersonId(params.id)
      if (!personId) redirect('/login')
      ...
    }

    ■ 注意
    ・デフォルト: 307(一時リダイレクト)
    ・サーバー アクションで: 303(See Other)
        POSTの結果として成功ページにリダイレクト
    ・try/catch ブロックの外側で呼び出すこと
    ・レンダリングプロセス中にクライアント コンポーネントでコール可能
    ・イベントハンドラーではコール不可: 代わりに useRouter フック使用可
    ・絶対 URL(外部リンク) もOK
    ・レンダリング プロセスの前にリダイレクト: next.config.js またはミドルウェア使用

- KEY: nextjs.history.pushState
  EXPLAIN: window.history.pushState
  BODY: |
    ■ pushState
    ページをリロードせずにブラウザの履歴スタックを更新するメソッド

    ■ 定義
    pushState(state, unused)
    pushState(state, unused, url)

      state: firefoxには16MBの制限
      第2引数は未使用(歴史的意義)
      url: 相対/絶対PATH

    ■ 考察
    pushState() の呼び出しは window.location = "#foo" とほぼ同じ

    現在の URL と同一オリジンにある、あらゆる URL にすることが可能
    (比較) window.location: ハッシュのみを変更したのであれば同じ文書にとどまる

    URL 変更は非必須
    (比較) window.location = "#foo"; 現ハッシュが #foo でない場合のみ新規の履歴項目作成

    履歴項目に任意のデータ(state)関連づけ可能
    (比較) ハッシュアプローチ: state を短い文字列にエンコードする必要あり


    ■ コード
    const state = { page_id: 1, user_id: 5 };
    const url = "hello.html";
    history.pushState(state, "", [url]);

    ■ コード(クエリパラメタの変更)
    const url = new URL(location);
    url.searchParams.set("foo", "bar");
    history.pushState({}, "", url);

    ■ コード
    'use client'
    import { useSearchParams } from 'next/navigation'

    export default function SortProducts() {
      const searchParams = useSearchParams()

      function updateSorting(sortOrder: string) {
        const params = new URLSearchParams(searchParams.toString())
        params.set('sort', sortOrder)
        window.history.pushState(null, '', `?${params.toString()}`)
      }

      return (
        <>
          <button onClick={() => updateSorting('asc')}>Sort 正順</button>
          <button onClick={() => updateSorting('desc')}>Sort 逆順</button>
        </>
      )
    }

- KEY: nextjs.history.replaceState
  EXPLAIN: window.history.replaceState
  BODY: |
    ■ replaceState
    ブラウザの履歴スタック上の現在のエントリを置き換え
    前の状態に戻ることはできない

    ■ 定義
    replaceState(state, unused)
    replaceState(state, unused, url)

      state=null 可
      第2引数は未使用(歴史的意義)
      新しい URL は現在の URL と同じオリジン => オリジン違うと例外発生

    ■ コード
    const stateObj = { foo: "bar" };
    history.pushState(stateObj, "", "bar.html");

    ■ コード
    'use client'

    import { usePathname } from 'next/navigation'

    export function LocaleSwitcher() {
      const pathname = usePathname()

      function switchLocale(locale: string) {
        const newPath = `/${locale}${pathname}`
        window.history.replaceState(null, '', newPath)
      }

      return (
        <>
          <button onClick={() => switchLocale('en')}>English</button>
          <button onClick={() => switchLocale('fr')}>French</button>
        </>
      )
    }

- KEY: nextjs.image
  EXPLAIN: Image
  BODY: |
    ■ 画像フォルダ

    /app/...
    /public/

    ■ Image タグ使用
      width, height, alt など必須項目あり

    import Image from "next/image"
    export default function Images() {
      return (
        <Image src="/image/mount.jpg" width={500} height={500} alt="image" />
      )
    }

    ■ 静的Import(注意: pathが public から開始)

    import mt from "/public/image/mt1.jpg"
    export default function Images() {
      return (
        <Image src={mt} alt="image" />
      )
    }

- KEY: nextjs.style
  EXPLAIN: Next の Style 比較
  BODY: |
    ■ 種類
    StyledComponent
    CSS Modules
    Styled JSX
    Sass/SCSS
    Tailwind CSS

    ■ StyledComponent

      import styled from 'styled-components';

      const Title = styled.h1`
        color: green;
      `;

      function Component() {
        return <Title>Hello, World!</Title>;
      }

      export default Component;

    ■ CSS Modules

      【styles/Button.module.css】
      .error {
        color: white;
        background-color: red;
      }

      【components/Button.js】
      import styles from './Button.module.css'

      export function Button() {
        return (
          <button className={styles.error}>
            Delete
          </button>
        )
      }

    ■ Styled JSX

      function Button() {
        return (
          <>
            <button>Click me</button>
            <style jsx>{`
              button {
                background-color: blue;
                color: white;
              }
            `}</style>
          </>
        )
      }

    ■ Sass/SCSS

      【styles/Button.module.scss】
      $primary-color: blue;

      .button {
        background-color: $primary-color;
        color: white;
        
        &:hover {
          background-color: darken($primary-color, 10%);
        }
      }

      【components/Button.js】
      import styles from './Button.module.scss'

      export function Button() {
        return <button className={styles.button}>Click me</button>
      }

    ■ Tailwind CSS

      function Button() {
        return (
          <button className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
            Click me
          </button>
        )
      }
