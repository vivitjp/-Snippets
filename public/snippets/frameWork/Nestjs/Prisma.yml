---
#-------------------------------
# Prisma
#-------------------------------
- KEY: prisma.basic.title
  CATEGORY: Install & Setup

- KEY: prisma.install
  EXPLAIN: インストール & セットアップ
  BODY: |
    ■ インストール
    npm install prisma --save-dev
    npx prisma init
    npx prisma init --datasource-provider postgresql --create-db

    ■ セットアップ
    npx prisma db push --accept-data-loss
    npx prisma generate
    npx prisma studio

    ■ 環境変数
    DATABASE_URL="prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIU...""
    npx prisma migrate dev --name init

- KEY: prisma.migraton.typORM
  EXPLAIN: |
    TypeORM からの移行
  BODY: |
    ■ TypeORM: Find one
    const user = await userRepository.findOne({ 
      where: { id: 1 } 
    });

    ■ Prisma: Find one
    const user = await prisma.user.findUnique({ 
      where: { id: 1 } 
    });

    ■ TypeORM: Create
    const user = await userRepository.save({
      email: 'alice@prisma.io',
      name: 'Alice'
    });

    ■ Prisma: Create
    const user = await prisma.user.create({
      data: {
        email: 'alice@prisma.io',
        name: 'Alice'
      }
    });

    ■ TypeORM: Update
    await userRepository.update(1, { 
      name: 'New name' 
    });

    ■ Prisma: Update
    await prisma.user.update({
      where: { id: 1 },
      data: { name: 'New name' }
    });

    ■ TypeORM: Delete
    await userRepository.delete(1);

    ■ Prisma: Delete
    await prisma.user.delete({
      where: { id: 1 }
    });


    ■ Update your controllers
    import { prisma } from '../client'

    export class CreateUserAction {
      async run(req: Request, res: Response) {
        const { email, name } = req.body
        
        const result = await prisma.user.create({
          data: {
            email,
            name,
          },
        })
        return res.json(result)
      }
    }

- KEY: prisma.schema.model
  EXPLAIN: |
    Model: User
  BODY: |
    ■ prisma/schema.prisma

    generator client {
      provider = "prisma-client-js"
      output   = "../src/app/generated/prisma"
    }

    datasource db {
      provider = "postgresql"
      url      = env("DATABASE_URL")
    }

    model User {
      id    Int     @id @default(autoincrement())
      email String  @unique
      name  String?
      posts Post[]
    }

    model Post {
      id        Int     @id @default(autoincrement())
      title     String
      content   String?
      published Boolean @default(false)
      authorId  Int
      author    User    @relation(fields: [authorId], references: [id])
    }

- KEY: prisma.client.Setup
  EXPLAIN: |
    Prisma Client
  BODY: |
    ■ src/lib/prisma.ts

    import { PrismaClient } from '../src/app/generated/prisma'
    import { withAccelerate } from '@prisma/extension-accelerate'

    const globalForPrisma = global as unknown as { 
        prisma: PrismaClient
    }

    const prisma = globalForPrisma.prisma || new PrismaClient().$extends(withAccelerate())

    if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma

    export default prisma

- KEY: prisma.client.findMany
  EXPLAIN: |
    Client Get: findMany()
  BODY: |
    import prisma from '@/lib/prisma'

    export default async function Home() {
      const users = await prisma.user.findMany();
      return (
        <div>
          {users.map((user) => (
            <div key={user.id} >
              {user.name}
            </div>
          ))}
        </div>
      );
    }

- KEY: prisma.client
  EXPLAIN: |
    Client Post: create()
  BODY: |
    import Form from "next/form";
    import prisma from "@/lib/prisma";
    import { revalidatePath } from "next/cache";
    import { redirect } from "next/navigation";

    export default function NewPost() {
      async function createPost(formData: FormData) { // FormData ??
        "use server";

        const title = formData.get("title") as string;
        const content = formData.get("content") as string;

        await prisma.post.create({
          data: { title, content, authorId: 1 },
        });

        revalidatePath("/posts");
        redirect("/posts");
      }

      return (
        <Form action={createPost} >
          <div>
            <label htmlFor="title" > Title </label>
            <input type="text" id="title" name="title" />
          </div>
          <div>
            <label htmlFor="content" > Content </label>
            <textarea id="content" name="content" rows={6} />
          </div>
          <button type="submit"> Create Post </button>
        </Form>
      );
    }
