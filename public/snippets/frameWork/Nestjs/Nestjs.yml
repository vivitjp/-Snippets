---
#-------------------------------
# Nestjs
#-------------------------------

- KEY: nest.install
  EXPLAIN: インストール
  BODY: |
    npm i -g @nestjs/cli
    yarn global add @nestjs/cli

    ■ dependencies
    @nestjs/common
    @nestjs/core
    @nestjs/platform-express

    ■ devDependencies
    @nestjs/cli
    @nestjs/schematics
    @nestjs/testing

- KEY: nest.new.project
  EXPLAIN: Project作成
  BODY: |
    nest new my-app                               // DIR指定
    nest new .                                    // カレントDIR

    ■ Windows: path 問題
    npx @nestjs/cli new my-app                    // npx 使用

    Which package manager would you ❤️  to use? yarn
    ▹▸▹▹▹ Installation in progress... ☕
    Failed to execute command: yarn install --silent
    ✖ Installation in progress... ☕
    {
      "name": "@nestjs",  // <-----修正: @ 削除 再度、yarn
      "version": "0.0.1",

    npx @nestjs --version
    8.3.0

- KEY: nest.files
  EXPLAIN: 構成ファイル
  BODY: |
    ■ 主な構成ファイル
    nest-cli.json
    src/app.controller.ts
    src/app.module.ts
    src/app.service.ts
    src/main.ts

    ■ 主なテストファイル
    src/app.controller.spec.ts
    src/app.module.spec.ts
    src/app.service.spec.ts
    test/app.e2e-spec.ts
    test/jest-e2e.json

- KEY: nest.cli.command
  EXPLAIN: CLI コマンド
  BODY: |
    ■ Module作成
    npx nest g module <SUB_MODULE>                //g===generate

    ■ Controller作成
    npx nest g controller <SUB_MODULE> --no-spec  //no test

    ■ service作成
    npx nest g service <SUB_MODULE> --no-spec

    ■ resolver作成(graphQL)
    npx nest g resolver tasks <SUB_MODULE> --no-spec

- KEY: nest.start
  EXPLAIN: 開発サーバーの起動
  BODY: |
    ■ 起動
    $ npm run start                               // development
    $ npm run start:dev                           // watch
    $ npm run start:prod                          // production

    ■ アクセス
    localhost:3000

    ■ Unit Tests
    $ npm run test
    $ npm run test:e2e
    $ npm run test:cov                            // coverage

- KEY: nest.settings
  EXPLAIN: 設定ファイル
  BODY: |
    ■ nest-cli.json
    {
      "$schema": "https://json.schemastore.org/nest-cli",
      "collection": "@nestjs/schematics",
      "sourceRoot": "src"
    }

- KEY: nest.dir.root
  EXPLAIN: ルート(bootstrap)
  BODY: |
    import { NestFactory } from '@nestjs/core';
    import { AppModule } from './app.module';

    async function bootstrap(){
      //ルートモジュールクラス
      const app = await NestFactory.create(AppModule);
      //起動ポート
      await app.listen(3000);
    }
    bootstrap();

- KEY: nest.dir.service
  EXPLAIN: 1.サービス(AppService)
  BODY: |
    import { Injectable } from '@nestjs/common';

    @Injectable()
    export class AppService {
      getHello(): string {
        return 'Hello World!';
      }
    }

- KEY: nest.dir.control
  EXPLAIN: 2.コントロール(AppController)
  BODY: |
    import { Controller, Get } from '@nestjs/common';
    import { AppService } from './app.service';

    @Controller()
    export class AppController {
      // service.tsで宣言したクラスをDI
      constructor(private readonly appService: AppService){}

      @Get()
      getHello(): string {
        return this.appService.getHello();
      }
    }

- KEY: nest.dir.module
  EXPLAIN: 3.モジュール(AppModule)
  BODY: |
    import { Module } from '@nestjs/common';
    import { AppController } from './app.controller';
    import { AppService } from './app.service';
    import { TasksModule } from './tasks/tasks.module'; // 他のモジュール追加

    @Module({
      imports: [TasksModule],                      // 他のモジュール追加
      controllers: [AppController],
      providers: [AppService],
    })
    export class AppModule {}

- KEY: nest.sample.main
  EXPLAIN: main.ts
  BODY: |
    import { NestFactory } from '@nestjs/core';
    import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
    import { initializeTransactionalContext } from 'typeorm-transactional';
    import { AppModule } from './app.module';
    import { HttpExceptionFilter } from './app/filters/http-exception.filter';
    import { LoggingInterceptor } from './app/aspect/logging.interceptor';
    import * as cookieParser from 'cookie-parser';
    import * as requestContext from 'request-context';
    import { MIDDLEWARE_NAME_SPACE } from './app/log/base-logger.log';
    import { writeFileSync } from 'fs';
    import { dump } from 'js-yaml';

    async function bootstrap(){
      initializeTransactionalContext();
      const app = await NestFactory.create(AppModule, {
        cors: {
          // 許可オリジンをenvから取得
          origin: [process.env.FRONTEND_DOMAIN || 'http://localhost:3001'], 
          // preflightの時はControllerまでアクセスしに行かないようにする
          preflightContinue: false, 
          // GET、POST、PUT、OPTIONSのみ許可する
          methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'], 
          // 許可するヘッダー項目を指定する
          allowedHeaders: ['Origin','X-Requested-With','Content-Type','Accept','Authorization','Cookie','Referer'],
          credentials: true,
        },
        // ログレベルを記載 https://docs.nestjs.com/techniques/logger
        logger: ['log', 'debug', 'error', 'warn'],
      });

      app.setGlobalPrefix('v1');                                  // v1プレフィックスを有効化
      app.use(cookieParser());                                    // cookieParserの適用
      app.useGlobalFilters(new HttpExceptionFilter());            // FilterのGlobal設定
      app.useGlobalInterceptors(new LoggingInterceptor());        // InterceptorのGlobal設定
      app.use(requestContext.middleware(MIDDLEWARE_NAME_SPACE));  // request-contextのGlobal設定

      //Swagger
      const unintegratedSiteOptions = new DocumentBuilder()
        .setTitle('TRYT Worker API Documents')
        .setDescription('TRYT Worker API Documents')
        .setVersion('1.0')
        .build();
      const document = SwaggerModule.createDocument(app, unintegratedSiteOptions);
      const yamlDocument = dump(document);
      writeFileSync('../docs/openapi.yml', yamlDocument, 'utf8');

      //URL API
      SwaggerModule.setup('v1/api', app, document);

      await app.listen(Number(process.env.LISTEN_PORT));
    }
    bootstrap();

- KEY: nest.sample.model
  EXPLAIN: Model(Entity)
  BODY: |
    ■ Base
    import { CreateDateColumn, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';

    export class Base {
      @PrimaryGeneratedColumn({ comment: 'ID' })  //シーケンス自動生成(挿入時)
      id: number;

      @CreateDateColumn()                         //日付自動生成(挿入時)
      created_at: Date;

      @UpdateDateColumn()                         //日付自動生成(挿入時・更新時)
      updated_at: Date;
    }

    ■ Extended
    import { IsOptional, Max, MaxLength } from 'class-validator';
    import { Base } from '../entities/base.entity';
    import { Entity, Column, Index } from 'typeorm';

    @Entity('general')
    export class DataGeneral extends Base {
      @Index()                                    // 検索Index作成
      @MaxLength(10)                              // validation(最大10文字)
      @Column('varchar', { length: 16, comment: '名前', nullable: false })
      name: string;

      @Max(100)                                   // validation(最大値100)
      @Column({ comment: '年齢' })
      age: number;

      @IsOptional()                               // validation(オプショナル)
      @Column({ comment: '有効', default: false })
      act?: boolean;
      // act? でなくとも、default: false の指定があれば SQL はinsert OK
      // TS と SQL 必須項目は別物
    }

- KEY: nest.sample.service
  EXPLAIN: Service
  BODY: |
    ■ 注意: Deprecated
    const person = await getConnection();
    const person = await getManager();
    const person = await getRepository();

    ■ constructor と DI
    import { Injectable } from '@nestjs/common';
    import { InjectRepository } from '@nestjs/typeorm';
    import { Repository } from 'typeorm';
    import { DataGeneral } from './general.entity'; // ⭕Entity

    @Injectable()
    export class DataGeneralService {
      constructor(
        @InjectRepository(DataGeneral)            // ⭕忘れずに
        private readonly repoGeneral: Repository<DataGeneral>,
      ) {}

- KEY: nest.sample.service.get
  EXPLAIN: Service:Get
  BODY: |
    async findAll(): Promise<DataGeneral[]> {
      return await this.repoGeneral.find();
    }

    async findAll_QB(): Promise<DataGeneral[]> {
      return await this.repoGeneral.createQueryBuilder().getMany();
    }

    async getByName(name: string): Promise<DataGeneral | null> {
      return await this.repoGeneral.findOne({
        where: { name }
      });
    }

    async getByID(id: number): Promise<DataGeneral | null> {
      return await this.repoGeneral.findOne({
        where: { id }
      });
    }

    async getByID_QB(id: number): Promise<DataGeneral | null> {
      return await this.repoGeneral
        .createQueryBuilder()
        .where('id=:id', { id })
        .getOne();
    }

- KEY: nest.sample.service.insert
  EXPLAIN: Service:Insert
  BODY: |
    ■ repository.insert()
    async insert(
      data: Partial<DataGeneral> | Partial<DataGeneral>[],
    ): Promise<boolean> {
      try {
        await this.repoGeneral.insert(data);
        return true;
      } catch (error) {
        console.log(error?.sqlMessage);
        throw error;
      }
    }

    ■ repository.insert()の戻り値
    const result: InsertResult = await this.repoGeneral.insert(data);

    InsertResult {
      identifiers: [ { id: 4 } ],
      generatedMaps: [
        {
          id: 4,
          created_at: 2023-09-21T22:47:30.725Z,
          updated_at: 2023-09-21T22:47:30.725Z,
          act: false
        }
      ],
      raw: ResultSetHeader {
        fieldCount: 0,
        affectedRows: 1,
        insertId: 4,
        info: '',
        serverStatus: 2,
        warningStatus: 0,
        changedRows: 0
      }
    }

    ■ .createQueryBuilder().insert()
    async insert_QB(
      data: Partial<DataGeneral> | Partial<DataGeneral>[],
    ): Promise<boolean> {
      try {
        await this.repoGeneral
          .createQueryBuilder()
          .insert()
          .into(DataGeneral)
          .values(data)                           //配列もOK, {act: false}
          .execute();
        return true;
      } catch (error) {
        console.log(error?.sqlMessage);
        throw error;
      }
    }

- KEY: nest.sample.service.update
  EXPLAIN: Service:Update
  BODY: |
    ■ repository.update()
    async update(name: string, data: Partial<DataGeneral>): Promise<boolean> {
      try {
        await this.repoGeneral.update(
          { name },                               //SQL:where
          { ...data },                            //SQL:values
        );
        return true;
      } catch (error) {
        console.log(error?.sqlMessage);
        throw error;
      }
    }

    ■ repository.update()の戻り値
    const result: UpdateResult = await this.repoGeneral.update(...);

    UpdateResult { generatedMaps: [], raw: [], affected: 1 } //成功
    UpdateResult { generatedMaps: [], raw: [], affected: 0 } //失敗

    ■ .createQueryBuilder().update()
    async update_QB(name: string, data: Partial<DataGeneral>): Promise<boolean> {
      try {
        await this.repoGeneral
          .createQueryBuilder()
          .update(DataGeneral)
          .set(data)
          .where('name=:name', { name })
          .execute();
        return true;
      } catch (error) {
        console.log(error?.sqlMessage);
        throw error;
      }
    }

- KEY: nest.sample.service.upsert
  EXPLAIN: Service:Upsert
  BODY: |
    ■ repository.upsert()
    async upsert(data: Partial<DataGeneral>): Promise<boolean> {
      try {
        await this.repoGeneral.upsert(
          { ...data }, //SQL:values
          { conflictPaths: ['name'] },            //重複チェックカラム **Unique Index化必須!
        );

        return true;
      } catch (error) {
        console.log(error?.sqlMessage);
        throw error;
      }
    }

    ■ .createQueryBuilder().upsert()
    async upsert_QB(data: Partial<DataGeneral>): Promise<boolean> {
      try {
        await this.repoGeneral
          .createQueryBuilder()
          .insert()
          .into(DataGeneral)
          .values(data)
          .orUpdate(['name', 'age'], ['name'])    //([update対象カラム,...],[重複チェックカラム])
          .execute();

        return true;
      } catch (error) {
        console.log(error?.sqlMessage);
        throw error;
      }
    }

- KEY: nest.sample.service.delete
  EXPLAIN: Service:Delete
  BODY: |
    ■ .delete()
    async delete(name: string): Promise<boolean> {
      try {
        await this.repoGeneral.delete({ name });
        return true;
      } catch (error) {
        console.log(error?.sqlMessage);
        throw error;
      }
    }

    ■ .delete()の戻り値
    const result: DeleteResult = await this.repoGeneral.delete(...)

    DeleteResult { raw: [], affected: 1 }         //成功
    DeleteResult { raw: [], affected: 0 }         //失敗

    ■ .createQueryBuilder().delete()
    async delete_QB(name: string): Promise<boolean> {
      try {
        await this.repoGeneral
          .createQueryBuilder()
          .delete()
          .from(DataGeneral)
          .where('name=:name', { name })
          .execute();
        return true;
      } catch (error) {
        console.log(error?.sqlMessage);
        throw error;
      }
    }

- KEY: nest.sample.controller
  EXPLAIN: controllerの基礎
  BODY: |
    ■ URL PATH
    /tasks      GET    getTasks          @Get()
    /tasks/[id] GET    getTaskById       @Get(/:id)
    /tasks      POST   createTask        @Post()
    /tasks/[id] PATCH  updateTask        @Patch(/:id)
    /tasks/[id] DELETE deleteTask        @Delete(/:id)

    ■ 実装
    @Controller('tasks')
    export class TasksController {
      @Get()                                      // 取得: GET
      getTasks(){ ... }

      @Get('/:id')                                // 取得: GET
      getTaskById( ... ){ ... }

      @Post()                                     // 生成: CREATE
      createTask( ... ){ ... }

      @Patch('/:id')                              // 更新: UPDATE
      updateTask( ... ){ ... }

      @Delete('/:id')                             // 削除: DELETE
      deleteTask( ... ){ ... }
    }

- KEY: nest.sample.controller.Controller
  EXPLAIN: Controller
  BODY: |
    import { Controller,Get,Post,Body,HttpException,Param,ParseIntPipe,Put,Delete }
      from '@nestjs/common';
    import { GeneralRequest } from './dto/general.request.entity';
    import { DataGeneralService } from './general.service';
    import { ERROR_OBJECT } from '@/constants/errors';

    @Controller('general')
    export class DataGeneralController {
      constructor(private readonly service: DataGeneralService) {}

      @Get()
      async serviceName() {
        try { ... } catch (e) {
          throw new HttpException({ ...ERROR_OBJECT, error: e.message }, 500);
        }
      }
    }

- KEY: nest.sample.controller.error
  EXPLAIN: Controller:ErrorObject
  BODY: |
    import { HttpStatus } from "@nestjs/common";
    export const ERROR_OBJECT = {
      status: HttpStatus.INTERNAL_SERVER_ERROR,
      error: "Internal server error.",
    };

- KEY: nest.sample.controller.get
  EXPLAIN: Controller:Get()
  BODY: |
    🟠curl -XGET http://localhost:3000/general/

    @Get()
    async findAll() {
      try {
        return await this.service.findAll_QB();
      } catch (e) {
        throw new HttpException({ ...ERROR_OBJECT, error: e.message }, 500);
      }
    }

- KEY: nest.sample.controller.getByName
  EXPLAIN: Controller:Get('name/:name')
  BODY: |
    🟠curl -XGET http://localhost:3000/general/name/john

    @Get('name/:name')
    async findByName(@Param('name') name: string) {
      try {
        return await this.service.getByName(name);
      } catch (e) {
        throw new HttpException({ ...ERROR_OBJECT, error: e.message }, 500);
      }
    }

- KEY: nest.sample.controller.getByID
  EXPLAIN: Controller:Get('id/:id')
  BODY: |
    🟠curl -XGET http://localhost:3000/general/id/1

    @Get('id/:id')
    async findByID(@Param('id', ParseIntPipe) id: number) {
      try {
        return await this.service.getByID(id);
      } catch (e) {
        throw new HttpException({ ...ERROR_OBJECT, error: e.message }, 500);
      }
    }

- KEY: nest.sample.controller.insert
  EXPLAIN: Controller:Post()
  BODY: |
    🟠curl -XPOST -H "Content-Type: application/json"
      -d '{"name":"Bill","age":18}' http://localhost:3000/general/

    @Post()
    async insert(@Body() data: GeneralRequest): Promise<boolean> {
      try {
        return await this.service.insert(data);
      } catch (e) {
        throw new HttpException({ ...ERROR_OBJECT, error: e.message }, 500);
      }
    }

- KEY: nest.sample.controller.update
  EXPLAIN: Controller:Put(':name')
  BODY: |
    🟠curl -XPUT -H "Content-Type: application/json"
      -d '{"age":28}' http://localhost:3000/general/Bill

    @Put(':name')
    async update(
      @Param('name') name: string,
      @Body() data: GeneralRequest,
    ): Promise<boolean> {
      try {
        return await this.service.update(name, data);
      } catch (e) {
        throw new HttpException({ ...ERROR_OBJECT, error: e.message }, 500);
      }
    }

- KEY: nest.sample.controller.upsert
  EXPLAIN: Controller:Post('ups')
  BODY: |
    🟠curl -XPOST -H "Content-Type: application/json"
      -d '{"name":"Bill","age":9}' http://localhost:3000/general/ups

    @Post('ups')
    async upsert(@Body() data: GeneralRequest): Promise<boolean> {
      try {
        return await this.service.upsert(data);
      } catch (e) {
        throw new HttpException({ ...ERROR_OBJECT, error: e.message }, 500);
      }
    }

- KEY: nest.sample.controller.delete
  EXPLAIN: Controller:Delete(':name')
  BODY: |
    🟠curl -XDELETE http://localhost:3000/general/Bill2

    @Delete(':name')
    async delete(@Param('name') name: string): Promise<boolean> {
      try {
        return await this.service.delete(name);
      } catch (e) {
        throw new HttpException({ ...ERROR_OBJECT, error: e.message }, 500);
      }
    }
