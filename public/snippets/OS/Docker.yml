---
#-------------------------------
# Docker
#-------------------------------

- KEY: docker.image
  EXPLAIN: image コマンド1
  BODY: |
    docker image ls                         //リスト
    docker image build -t <myImage[:TAG]> . //作成(CWDにDockerfile) -t:名前
    docker image history <myImage/821...>   //履歴表示
    docker image inspect <myImage>          //詳細表示
    docker image rm <myImage/821...>        //イメージ削除
    docker image prune                      //未使用全削除

- KEY: docker.image.build
  EXPLAIN: image.build コマンド
  BODY: |
    docker image build -t my-ubuntu .
    // コマンド実行DIRに Dockerfile があること
    // -t/--tag はimageのタグ名(小文字のみ)
    // . ディレクトリはCOPY先Root指定

- KEY: docker.image.more
  EXPLAIN: image コマンド2
  BODY: |
    docker search <IMAGE_KEYWORD>            //Docker レジストリ検索
    docker image pull <IMAGE_NAME[:TAG]>     //ダウンロード
    docker image push <REGISTRY_URL/RESPOSITRY_NAME>[:VERSION] //アップロード

- KEY: docker.container.run
  EXPLAIN: コンテナ起動
  BODY: |
    docker container run -d --name <myCont> -p 80:80 <myImage>  //作成＆起動 WEB Daemon
    docker container run -it --name <myCont> -p 80:80 <myImage> //作成＆起動 WEB
    docker container run -it --name <myCont> <myImage>          //作成＆起動 shell起動
    --detatch(-d)          // daemon実行
    --name <名>            // コンテナ名付
    --publish(-p) 80:80    // 内:外
    --rm                   // 停止後削除
    --interactive(-i)      // 
    --tty(-t)              // terminal

- KEY: docker.container.exec
  EXPLAIN: 起動コンテナでコマンド実行
  BODY: |
    docker container exec -it <myCont> bash             //bash実行可能にする
    docker container exec -it <myCont> <command>        //コマンド実行&終了
    --interactive(-i)      // 
    --tty(-t)              // terminal

- KEY: docker.container.process
  EXPLAIN: container コマンド(プロセス)
  BODY: |
    docker container create  <myCont[:TAG]>  //作成のみ
    docker container start   <myCont>    //起動
    docker container pause   <myCont>    //一時停止
    docker container unpause <myCont>    //再開
    docker container stop    <myCont>    //停止
    docker container kill    <myCont>    //強制停止
    docker container restart <myCont>    //再起動
    docker container top     <myCont>    //プロセス表示
    docker container attach  <myCont>    //内部接続(CMDでshell指定しないと接続不可)
    docker container rm [-f] <myCont>    //削除(-f 強制)
    docker container prune               //未使用全削除

- KEY: docker.container.Utilities
  EXPLAIN: container コマンド(Utilities)
  BODY: |
    docker container inspect <myCont>    //詳細表示
    docker container logs    <myCont>    //ログ表示
    docker container commit  <myCont>    //変更からIMAGE作成
    docker container diff    <myCont>    //ファイルの更新差分
    docker container export  <myCont>    //ファイルからtar作成
    docker container port    <myCont>    //ポート一覧
    docker container rename  <myCont>    //コンテナ名変更
    docker container stats   <myCont>    //使用中コンテナのリソース
    docker container update  <myCont>    //設定アップデート適用
    docker container wait    <myCont>    //1以上のコンテナが停止まで待機

- KEY: docker.container.fileCopy
  EXPLAIN: container コマンド(fileCopy)
  BODY: |
    docker container cp <PATH/LOCAL_FILE> <myCont>:<PATH>  //ファイルコピー(local2Cont)
    docker container cp <myCont>:<PATH/LOCAL_FILE> .       //ファイルコピー(Cont2local)

- KEY: docker.container.network
  EXPLAIN: network コマンド
  BODY: |
    docker network create --subnet <MASK> <myNetwork>     //作成
    docker network connect <myNetwork> <myCont>           //接続
    docker network connect --ip <IP> <myNetwork> <myCont> //IP 割当
    docker network disconnect <myNetwork> <myCont>        //切断
    docker network inspect <myNetwork>                    //詳細表示
    docker network rm <myNetwork>                         //削除
    docker network prune                                  //未使用全削除

- KEY: docker.Dockerfile.basicCommand
  EXPLAIN: Dockerfile
  BODY: |
    FROM <IMAGE>                  // ベースイメージ指定
    LABEL title="sampleImage"\    // ラベル(タイトル,バージョン,詳細)
      version="1.0"\
      description="Sample"
    ENV 変数=値                    // 環境変数
    ARG 変数=値                    // Dockerfile内でのみ ${変数} で呼び出し可能
    WORKDIR <CONT_PATH>           // コンテナのPATH移動
    RUN <LINUX_COMMAND> \         // 任意のコマンド実行(レイヤー作成)
      && <LINUX_COMMAND>           
    SHELL ["COMMAND", "PARAMS"]   // shell種類指定
    COPY <HOST_PATH> <CONT_PATH>  // ファイル/DIRコピー(相対PATH:外部は build -f で指定) 
    ADD <URL> [<CONT_PATH>]       // リモートファイルダウンロード/tar展開
    VOLUME <CONT_PATH>            // マウント予定PATH(run -v CONT_PATH)
    EXPOSE <PORT_NUMBER>          // 外部公開PORT(実際には run -p での記述が必要)
    ENTRYPOINT ["COMMAND"]        // 優先度高い起動時実行コマンド
    CMD ["COMMAND", "PARAM", ...] // コンテナ起動時の実行命令

- KEY: docker.Dockerfile.FROM
  EXPLAIN: FROMについて
  BODY: |
    FROM ubuntu:20.04

- KEY: docker.Dockerfile.RUN
  EXPLAIN: RUNについて
  BODY: |
    RUN apt update
    RUN apt install -y vim

- KEY: docker.Dockerfile.COPY
  EXPLAIN: COPYについて
  BODY: |
    COPY HOST IMAGE(LINUX DIR)
    COPY .vimrc /root/.vimrc

- KEY: docker.Dockerfile.CMD
  EXPLAIN: CMDについて
  BODY: |
    CMD date +"%Y/%m/%d %H:%M:%S ( UTC )"
