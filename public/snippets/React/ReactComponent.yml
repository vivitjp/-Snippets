---
#-------------------------------
# React Component
#-------------------------------
- KEY: ts.react.Component.category
  CATEGORY: React Component

- KEY: ts.react.funcComponent
  EXPLAIN: 関数コンポーネント
  BODY: |
    ■ コンポーネントの引数型
    type Props = {
      foo: string;
      age?: number;
    }

    ■ コンポーネント
    const MyComponent: React.FC<Props> = ({ foo, age=0 }) => {
        return <span>{foo}:{age}</span>
    }

    ■ コール(2方法)
    <MyComponent foo="bar" />
    { MyComponent({ foo: "hoo", age: 20 }) }

- KEY: ts.react.classComponent
  EXPLAIN: クラスコンポーネント
  BODY: |
    ■ コンポーネントの引数型
    type Props = {
      foo: string;
      age?: number;
    }
     
    ■ コンポーネント
    class MyComponent extends React.Component<Props, {}> {
      render() {
        return <span>{this.props.foo}:{this.props.age || 0}</span>
      }
    }

    ■ コール(2方法)
    <MyComponent foo="bar" />
    { MyComponent({ foo: "hoo", age: 20 }) }

#-------------------------------
# React Component Samples
#-------------------------------
- KEY: ts.react.Component.Samples.category
  CATEGORY: React Component Samples

- KEY: rc.button
  EXPLAIN: Button
  BODY: |
    ■ ハンドラ
    const handleClickButton = useCallback(
      (e: React.MouseEvent<HTMLButtonElement>) => {
        e.stopPropagation()
      },
      []
    )

    <button onClick={handleClickButton} value="">
      Submit
    </button>

- KEY: rc.input.text
  EXPLAIN: Text
  BODY: |
    ■ ハンドラ
    const handleChangeText = useCallback(
      (e: React.ChangeEvent<HTMLInputElement>) => {
        const value = e.currentTarget.value
        setText(value)
      },
      []
    )

    <input
      type="text"
      onChange={handleChangeText}
      value={text}
      placeholder="name"
    />

- KEY: rc.input.button
  EXPLAIN: InputButton
  BODY: |
    ■ ハンドラ
    const handleClickInputButton = useCallback(
      (e: React.MouseEvent<HTMLInputElement>) => {
        e.stopPropagation()
      },
      []
    )

    <input type="button" onClick={handleClick} value="Click" />

- KEY: rc.input.checkbox
  EXPLAIN: Checkbox
  BODY: |
    ■ ハンドラ
    const handleChangeCheck = useCallback(
      (e: React.ChangeEvent<HTMLInputElement>) => {
        const value = e.currentTarget.checked
        setIsChecked(value)
      },
      []
    )

    <input
      type="checkbox"
      id={checkId}
      onChange={handleChangeCheck}
      checked={isChecked}
    />
    <label htmlFor={checkId}>On</label>

- KEY: rc.input.radio
  EXPLAIN: Radio
  BODY: |
    ■ ハンドラ
    const handleChangeRadio = useCallback(
      (e: React.ChangeEvent<HTMLInputElement>) => {
        const value = parseInt(e.currentTarget.value ?? "0")
        setRadio(value)
      },
      []
    )

    <input
      type="radio"
      id={radioId1}
      name="myRadio"
      onChange={handleChangeRadio}
      value={1}
      checked={radio === 1}
    />
    <label htmlFor={radioId1}>1</label>

- KEY: rc.select
  EXPLAIN: Select
  BODY: |
    type Options = {
      title: string
      value: string
    }

    type Select = {
      options: Options[]
      handleChangeSelect: (e: React.ChangeEvent<HTMLSelectElement>) => void
    }

    const [selectedValue, setSelectedValue] = useState<number>(1)

    ■ ハンドラ
    const handleChangeSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {
      const value = parseInt(e.currentTarget.value ?? 1)
      setSelectedValue(value)
    }

    const SelectSet = ({ options, onChange }: Select) => {
      return (
        <select onChange={handleChangeSelect}>
          {!!options.length &&
            options.map((n, index) => (
              <option key={index} value={n.value} >
                {n.title}
              </option>
            ))}
        </select>
      )
    }

#-------------------------------
# カスタムコンポーネント
#-------------------------------
- KEY: ts.react.Component.Custom.category
  CATEGORY: React Component Custom Samples

- KEY: qw.custom.input
  EXPLAIN: input カスタムコンポーネント
  BODY: |
    type Props = {
      checkList: readonly boolean[]
      labels: readonly string[]
      handler: (index: number) => void
    } & React.ComponentPropsWithoutRef<"input">

    export const Checks: React.FC<Props> = ({
      checkList, labels, handler, ...args
    }) => {
      const id = useId()

      ■ ハンドラ
      const handleChange = (index: number) => handler(index)

      return (
        <ul>
          {labels.map((title, idx) => (
            <li key={idx}>
              <label htmlFor={id}>{title}</label>
              <input
                {...args}
                id={id}
                type="checkbox"
                checked={checkList[idx]}
                onChange={() => handleChange(idx)}
              />
            </li>
          ))}
        </ul>
      )
    }

- KEY: qw.custom.inputRef
  EXPLAIN: input+Ref カスタムコンポーネント
  BODY: |
    type Props = {
      text: string
      setText: React.Dispatch<React.SetStateAction<string>>
      title: string
    } & React.ComponentPropsWithRef<"input">

    export const InputRef = forwardRef<HTMLInputElement, Props>(
      ({ text, setText, title, ...args }, ref) => {
        const id = useId()

        ■ ハンドラ
        const handleChangeText = (e: React.ChangeEvent<HTMLInputElement>) => {
          const value = e.currentTarget.value
          setText(value)
        }

        return (
          <div>
            <label htmlFor={id}>{title}</label>
            <input {...args} id={id} ref={ref} onChange={handleChangeText} />
          </div>
        )
      }
    )

- KEY: qw.custom.inputRef.fileUpload
  EXPLAIN: input+Ref ファイルアップロード
  BODY: |
    import { Box, Button, Flex } from "@chakra-ui/react";
    import { ChangeEvent, Dispatch, SetStateAction, useRef, useState } from "react";

    export const FileUploadButton = ({
      setSavedData,
      type = ".txt",
    }: {
      setSavedData: Dispatch<SetStateAction<string | undefined>>;
      type?: string;
    }) => {
      const refInput = useRef<HTMLInputElement>(null);
      const handleButton = () => {
        refInput.current?.click();
      };
      const [msg, setMsg] = useState("");

      const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {
        if (!e.target.files || e.target.files.length === 0) {
          console.error("保存データファイル選択");
          return;
        }

        const file = e.target.files[0];
        const reader = new FileReader();
        reader.onload = (event) => {
          const content = event.target?.result;
          try {
            setSavedData(content as string);
            setMsg("ロードされました");
          } catch (error) {
            console.error(error);
            setMsg("ロード失敗しました");
          }
        };
        reader.readAsText(file);
      };

      return (
        <Flex alignItems={"center"}>
          <Button onClick={handleButton}>保存データファイル使用</Button>
          <input
            ref={refInput}
            hidden={true}
            type="file"
            accept={type}
            onChange={handleFileChange}
          />
          <Box ml={5}>{msg}</Box>
        </Flex>
      );
    };

#-------------------------------
# まとめコンポーネント
#-------------------------------
- KEY: ts.react.Component.Wrapper.category
  CATEGORY: React Component Wrapper Samples

- KEY: qw.custom.joiner
  EXPLAIN: 複数コンポーネントのまとめ
  BODY: |
    type Props = {
      header: React.ReactNode
      body: React.ReactNode
    }

    const MyCompo = ({ header, body }: Props) => {
      return (
        <Column>
          {header}
          {body}
        </Column>
      )
    }

    export default function Sample() {  // default は Nextjs には非推奨
      const name = "ABC"
      return <MyCompo header={<Row>{name}</Row>} body={"ボディ"} />
    }
