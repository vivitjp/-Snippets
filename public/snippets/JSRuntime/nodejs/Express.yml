# ----------------------------
# ExpressTopics
# ----------------------------

- KEY: express.install
  EXPLAIN: バージョンとinstall
  BODY: |
    4.x API: 2024-06

    npm i express

    //TypeScript構築
    npm i -D typescript @types/node @types/express

    //hot reload 環境構築(コンパイラ+HotReloader)
    npm i -D ts-node nodemon

- KEY: express.kickStart.ts
  EXPLAIN: Kick Start()
  BODY: |
    ■ [tsconfig.json]
    {
      "compilerOptions": {
        "target": "es2016",
        "module": "commonjs",
        "strict": true,
        "esModuleInterop": true,
        "skipLibCheck": true,
        "forceConsistentCasingInFileNames": true,
        "outDir": "./dist"
      },
      "include": ["src/**/*"]
    }

    ■ [package.json]
    "scripts": {
      "start": "node src/server.ts",
      "dev": "nodemon src/index.ts"   // <-- 追加
    },

- KEY: express.kickStart
  EXPLAIN: Kick Start(Code)
  BODY: |
    ■ [src/index.ts]
    import express, { NextFunction, Request, Response } from "express"
    import cookieParser from "cookie-parser"

    // Constants
    const PORT = 8080

    // App
    const app = express()

    // Middleware: cookie
    app.use(cookieParser())

    // Middleware: log
    app.use((req: Request, res: Response, next: NextFunction) => {
      console.log("Time:", Date.now())
      next() // 次のミドルウェア関数に処理移行
    })

    // Routing
    app.get("/hello", (req: Request, res: Response) => {
      // Cookie送信
      res.cookie("username", "John")
      // Body送信
      res.send("Hello World")
    })

    // Routing: パスパラメタ & クエリパラメタ
    app.get('/login/:id', (req: Request, res: Response) => {

      // ■ Request
      req.body                          // Body(POST,PUTの本体)
      req.cookies                       // Cookies受信
                                          1回目: [Object: null prototype] {}
                                          2回目: { username: 'John' }
      req.params                        // パスパラメタ -> { id: '100' }
      req.query                         // クエリパラメタ -> { age: '15' }
      req.session                       // Session -> undefined

      // ■ Request 他属性
      req.get.name                      // 不明
      req.baseUrl                       // 
      req.hostname                      // localhost
      req.httpVersion                   // 1.1
      req.method                        // GET
      req.ip                            // ::ffff:127.0.0.1
      req.originalUrl                   // /login/100?age=15
      req.path                          // /login/100
      req.complete                      // false

      // ■ Response
      res.cookie('username', 'John');   // Cookie送信
      res.send('Hello Login');          // Body送信
    });

    // 起動
    app.listen(PORT, function () {
      console.log(`Listening at ${PORT}');
    });

    ■ アクセス
    node app.js
    curl http://localhost:3000 -> Hello World!

- KEY: express.genetator
  EXPLAIN: express-generator
  BODY: |
    (sudo)npm install express-generator -g

    express myapp                                 // ひな形生成

      create : myapp
      create : myapp/package.json
      create : myapp/app.js
      ...
      create : myapp/bin
      create : myapp/bin/www

    cd myapp 
    npm install                                   // 依存モジュールインストール

    npm run start                                 // サーバー起動
    node bin/www                                  // サーバー起動

- KEY: express.genetator.dir
  EXPLAIN: generator ディレクトリ
  BODY: |
    .
    ├── app.js                                    // expressサーバーの設定
    ├── bin
    │   └── www                                   // サーバーの起動
    ├── package.json
    ├── public                                    // 静的ファイル置き場
    │   ├── images
    │   ├── javascripts
    │   └── stylesheets
    │       └── style.css
    ├── routes                                    // サーバー側のコントローラ
    │   ├── index.js
    │   └── users.js
    └── views                                     // サーバー側で画面を作成する際のテンプレート
        ├── error.jade
        ├── index.jade
        └── layout.jade

- KEY: express.routing
  EXPLAIN: ルーティング
  BODY: |
    var app = express();

    app.get('/', (req, res)=>{ ... });             // GET URI/

    app.post('/books', (req, res)=>{ ... });       // POST URI/books

    app.put('/books/:id', (req, res)=>{ ... });    // PUT URI/books/1

    app.delete('/books/:id', (req, res)=>{ ... }); // DELETE URI/books/1

    ■ 特別パスに対して Middleware 実行
    app.all('/secret', (req, res, next) => {
      console.log('Accessing the secret section ...')
      next() // pass control to the next handler
    })

- KEY: express.basic.route.byMethod
  EXPLAIN: |
    ルーティング by route()
  BODY: |
    ■ 一括指定可能
    app.route('/book')
    .get ((req, res) => { res.send('Get a random book') })
    .post((req, res) => { res.send('Add a book') })
    .put ((req, res) => { res.send('Update the book') })

- KEY: express.basic.route.express.Router
  EXPLAIN: |
    ルーティング モジュラ定義
  BODY: |
    ■ [modular/myMod.ts]
    const express = require('express')
    const router = express.Router()     // ■ Modular定義

    const timeLog = (req, res, next) => { console.log(); next(); }
    router.use(timeLog)
    router.get('/', (req, res) => { res.send('home page') })
    router.get('/about', (req, res) => { res.send('About') })
    module.exports = router

    ■ [app.ts]
    const myMod = require('./myMod')

    app.use('/myMod', myMod)

- KEY: express.basic.route.path
  EXPLAIN: |
    ルーティング Path
  BODY: |
    ■ Root
    app.get('/', (req, res) => { res.send('') })

    ■ Sub Path
    app.get('/about', (req, res) => { res.send('') })

    ■ ファイル指定
    app.get('/random.text', (req, res) => { res.send('') })

    ■ 文字列パターン
    app.get('/ab?cd', (req, res) => {  res.send('') })
    app.get('/ab+cd', (req, res) => {  res.send('') })
    app.get('/ab*cd', (req, res) => {  res.send('') })
    app.get('/ab(cd)?e', (req, res) => { res.send('')})

    ■ 正規表現
    app.get(/a/, (req, res) => { res.send('') })
    app.get(/.*fly$/, (req, res) => { res.send('') })

- KEY: express.basic.route.parameter
  EXPLAIN: |
    ルーティング パスパラメタ
  BODY: |
    ■ 1) パスパラメタ(単数)
    app.get('/users/:userId/books/:bookId', (req, res) => { })
    Request URL: <DOMAIN>/users/34/books/8989
    req.params: { "userId": "34", "bookId": "8989" }

    ■ 2) パスパラメタ(複数)
    app.get('/flights/:from-:to', (req, res) => { })
    Request URL: <DOMAIN>/flights/LAX-SFO
    req.params: { "from": "LAX", "to": "SFO" }

    app.get('/plantae/:genus.:species', (req, res) => { })
    Request URL: <DOMAIN>/plantae/Prunus.persica
    req.params: { "genus": "Prunus", "species": "persica" }

    ■ 3) パスパラメタ(数値)
    app.get('/user/:userId(\d+)', (req, res) => { })  // \\d+ エスケープ注意
    Request URL: http://localhost:3000/user/42
    req.params: {"userId": "42"}

- KEY: express.basic.route.handler
  EXPLAIN: |
    ルーティング ハンドラ
  BODY: |
    ■ 通常ハンドラ
    app.get('/example/a', (req, res) => { res.send('')})

    ■ コールバックハンドラ(単数)
    app.get('/example/b', (req, res, next) => {
      console.log('')
      next()
    }, (req, res) => { res.send('') })

    ■ コールバックハンドラ(複数1)
    const cb0 = function (req, res, next) { console.log(''); next(); }
    const cb1 = function (req, res, next) { console.log(''); next(); }
    const cb2 = function (req, res) { res.send('') }
    app.get('/example/c', [cb0, cb1, cb2])

    ■ コールバックハンドラ(複数2)
    const cb0 = function (req, res, next) { console.log(''); next(); }
    const cb1 = function (req, res, next) { console.log(''); next(); }
    app.get('/example/d', [cb0, cb1], (req, res, next) => {
      console.log('')
      next()
    }, (req, res) => { res.send('') })

- KEY: express.request.response
  EXPLAIN: |
    ルーティング Request & Response
  BODY: |
    router.get('/', (req, res) => { ... });

    // Request 属性には () がない
    req.body          request body            (KV, 要Middleware:body-parser)
    req.cookies       cookie                  (KV, 要Middleware:cookie-parser)
    req.params        url pathパラメータ       (KV) /books/:id => /books/1 => req.params.id=1
    req.query         リクエストパラメータ      (KV) /books?order=asc => req.query.order=asc
    req.get           HTTPヘッダー値
    req.session       セッション               (KV, 要Middleware:express-session)

    res.download()    ファイルのダウンロード要求
    res.end()         応答処理終了
    res.json()        JSON 送信
    res.jsonp()       JSONP サポートを使用して JSON 送信
    res.redirect()    リクエストリダイレクト
    res.render()      ビュー テンプレートをレンダリング
    res.send()        汎用送信
    res.sendFile()    ファイルをオクテット ストリームとして送信
    res.sendStatus()  応答ステータスコードを設定、その文字列表現を応答本文として送信

- KEY: express.cookie
  EXPLAIN: Cookie
  BODY: |
    ■ 応答クッキー & 要求クッキー
    (KV, 要Middleware:cookie-parser)

    app.get("/hello", (req: Request, res: Response) => {
      // Cookie受信(Clientブラウザからのクッキー: 以前に送信した内容) 
      req.cookies                       // 型 KV

      // Cookie送信(Clientへ送るクッキー: 新しい内容)
      res.cookie("username", "John")    // 型 KV

      // Object送信(JSONに変換され、bodyParser() middlewareでデコード)
      res.cookie('cart', { items: [1, 2, 3] })
    })

    ■ 設定
    Domain        String        Cookie のドメイン名(デフォルトはアプリのドメイン名)
    encode        関数          Cookie 値のエンコード同期関数。デフォルト: encodeURIComponent)
    expires       Date          GMT での Cookie の有効期限。未指定/0 でセッション Cookie 作成
    httpOnly      Boolean       Web サーバーのみが Cookie にアクセスできるようにフラグ設定
    maxAge        Number        現在時刻を基準とした有効期限をミリ秒単位で設定
    path          文字列        クッキーのパス。デフォルトは「/」です。
    Partitioned   Boolean       Cookie がパーティション化されたストレージに保存の必要ありを提示
    priority      文字列        「Priority」Set-Cookie 属性の値
    secure        Boolean       Cookie が HTTPS のみで使用されるようにマーク
    signed        Boolean       Cookie に署名する必要があるかどうかを示す
    SameSite      Boolean/String  Set-Cookie 属性のブール値または文字列値

    ■ Optionサンプル
    res.cookie(name, value [, options])

    res.cookie('name', 'tobi', {  
      domain: '.example.com',
      path: '/admin',
      secure: true
    })

    res.cookie('rememberme', '1', {
      expires: new Date(Date.now() + 24 * 3600000),  // 24時間後削除
      = maxAge: 24 * 3600000
      httpOnly: true
    })

    ■ Optionサンプル: 複数 Cookie
    res
    .status(201)
    .cookie('access_token', 'Bearer ' + token, {  // Token
      expires: new Date(Date.now() + 8 * 3600000) // 8時間後削除
    })
    .cookie('test', 'test')
    .redirect(301, '/admin')

    ■ Optionサンプル: signed cookies
    res.cookie('name', 'tobi', { 
      signed: true     // cookieParser(secret) に渡されたシークレットで値に署名
    })
    //  req.signedCookie で戻り値にアクセス可能

    ■ Cookie 消去
    res.cookie('name', 'tobi', { path: '/admin' })
    res.clearCookie('name', { path: '/admin' })

- KEY: express.middleware
  EXPLAIN: Middleware
  BODY: |
    ■ handlerの基本I/F(エラーハンドラ除外)
    function(req, res, next) {
      // middlewareの処理
      next();
    }

      例) myLogger
      const myLogger = function(req, res, next) {
        console.log('LOGGED')
        next()
      }

    ■ 3種類のmiddleware
    Application-level                             // Rootレベル
    Router-level                                  // 特定routing
    Error-handling                                // エラーハンドリング

    ■ Application-level                           // Rootレベル
    var app = express();
    app.use(myLogger)                             // Middleware設置
    app.get('/', (req, res) => {                  // 全Routingで反応
      res.send('Hello World!')
    })
    app.listen(3000)

    ■ Router-level                                // 特定routing
    var router = express.Router();
    router.get('/:id', myLogger, businessLogic)   // 'GET /:id'
    router.get('books/:id', myLogger)             // 'GET books/:id'

- KEY: express.middleware.newAttribute
  EXPLAIN: Middleware(属性追加)
  BODY: |
    ■ app.js
    const express = require('express')

    ■ 内部Middleware定義
    const requestTime = function(req, res, next) {
      req.requestTime = Date.now()                // 属性&値: requestTime 追加
      next()
    }

    const app = express()
    app.use(requestTime)                          // Middleware設置

    app.get('/', (req, res) => {
      const responseText = `Hello World! Req at: ${req.requestTime}`
      res.send(responseText)
    })

    app.listen(3000)

- KEY: express.middleware.errorHandling
  EXPLAIN: Middleware(エラーハンドリング)
  BODY: |
    ■ 外部Middleware定義
    async function cookieValidator(cookies) {
      try {
        await externallyValidateCookie(cookies.testCookie)
      } catch {
        throw new Error('Invalid cookies')
      }
    }

    ■ app.js
    const express = require('express')
    const cookieParser = require('cookie-parser')
    const cookieValidator = require('./cookieValidator')

    const app = express()

    ■ 外部Middlewareを利用して
    async function validateCookies(req, res, next) {
      await cookieValidator(req.cookies)
      next()
    }

    app.use(cookieParser())                       // Middleware設置
    app.use(validateCookies)                      // Middleware設置
    app.use((err, req, res, next) => {            // error handler
      res.status(400).send(err.message)
    })

    app.listen(3000)

- KEY: express.middleware.errorHandlers
  EXPLAIN: Middleware(エラーハンドラー)
  BODY: |
    ■ エラーハンドリングの順番
    app.use(logErrors);                           // エラーログ出力用
    app.use('/api', clientErrorHandler);          // REST API用(/api の想定)
    app.use(errorHandler);                        // エラーベージ表示用

    ■ エラーログ出力
    function logErrors(err, req, res, next) {
      console.error(err.stack);
      next(err);
    }

    ■ REST API用のレスポンス返却
    function clientErrorHandler(err, req, res, next) {
      res.status(500).json({
        message: err.message,
        error: err
      });
    }

    ■ 画面用のレスポンス返却
    function errorHandler(err, req, res, next) {
      res.status(err.status || 500);
      res.render('error', {
        message: err.message,
        error: err
      });
    }

- KEY: express.middleware.parameters
  EXPLAIN: Middleware(パラメタ付き)
  BODY: |
    ■ 外部Middleware定義(Factory関数)
    module.exports = function (options) {
      return function (req, res, next) {
        // Implement the middleware function based on the options object
        next()
      }
    }

    ■ 利用
    const mw = require('./my-middleware.js')

    app.use(mw({ option1: '1', option2: '2' }))   // パラメタ付き

- KEY: express.template.engine
  EXPLAIN: テンプレートエンジン(Jade)
  BODY: |
    app.set('views', path.join(__dirname, '../app/views')); // テンプレート格納PATH
    app.set('view engine', 'jade');               // エンジン指定

- KEY: express.authentication
  EXPLAIN: 認証(Passport)
  BODY: |
    Passport: node.jsの認証モジュールでデファクト

    ■ パッケージ例
    passport-local              Username and password
    passport-twitter            Twitter
    passport-facebook           Facebook
    passport-google-oauth       Google

    ■ Passportのフォルダ構成
    passport全体の設定 => passport.js
    個別のStrategyの設定 => passport/
    認証フィルタはmiddleware化する

    config/
      app.js                    passportの初期化
      passport.js               passportの全体的な設定 
      passport/                 Strategyごとの認証ロジックの設定
        local.js                Username and password認証用
        twitter.js              twitter認証用
      middlewares/
        authorization.js        routingで利用する認証フィルタ

    ■ Passport全体の設定(config/passport.js)
    module.exports = () => {
      passport.serializeUser((user, done) => {    // sessionにユーザー情報格納
        done(null, user.id);
      });
      
      passport.deserializeUser((id, done) => {    // sessionからユーザー情報復元
        User.findById(id).exec((err, user) => {   // DBからユーザー取得
          done(err, user)
        });
      });
      
      passport.use(require('./passport/local'));  // 利用strategy設定
      ...
    }

    ■ Strategyの個別設定(config/passport/local.js)
    var LocalStrategy = require('passport-local').Strategy; // Strategyロード

    module.exports = new LocalStrategy({          // Strategyことの認証ロジックを追加する
      // 認証ロジック
    });

    ■ ログインなど特定routing時の認証
    app.post('/login', 
      passport.authenticate('local', {
        failureRedirect: '/login'                 // 認証失敗時
      }),
      function(req, res) {
        res.redirect('/');                        // 認証成功時
      }
    );

- KEY: express.dotenv
  EXPLAIN: 環境変数(dotenv)
  BODY: |
    var app = express();

    require('dotenv').config({                    // 環境(dev/prod)ごとにロード設定変更
      path: 'config/environment/.env.' + app.get('env')
    });

- KEY: express.session
  EXPLAIN: セッション
  BODY: |
    ■ オンメモリ
    var app = express();
    var session = require('express-session');

    app.use(session({
      secret: 'secret-key',
      resave: false,
      saveUninitialized: true
    }));

    Session IDがcookieに保存
    デフォルトSession ID名: connect.sid

    ■ Redis Session Store
    var app = express();
    var session = require('express-session');
    var RedisStore = require('connect-redis')(session);  // Session Storeロード

    app.use(session({
      secret: 'secret-key',
      resave: true,
      saveUninitialized: true,
      store: new RedisStore({                     // Session Storeの設定
        url: <REDIS_URL>                          // redis://localhost:6379
      })
    }));

- KEY: express.logging
  EXPLAIN: ロギング(例:morgan)
  BODY: |
    var logger = require('morgan');
    app.use(logger('dev'));                       // combined,common,dev,short,tiny

    ■ 出力内容
    PUT /api/articles/5621dc5633d2c52b7c166873 500 12.569 ms - 47
    GET /new-post 200 771.074 ms - 1885
    GET /stylesheets/style.css 200 13.891 ms - 102
    GET /bower_components/bootstrap/dist/css/bootstrap-theme.min.css 200 18.804 ms - 23357
