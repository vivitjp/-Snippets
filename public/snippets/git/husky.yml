---
#-------------------------------
# husky
#-------------------------------

- KEY: husky.install
  EXPLAIN: インストール
  BODY: |
    ■ husky Git
    https://typicode.github.io/husky/

    ■ husky & lint-staged
    npm install -D husky lint-staged
    yarn add --dev husky lint-staged

    ■ husky 初期化
    [DEP] npx husky install
    npx husky init

      以下のファイルを生成
      .husky/_/prepare-commit-msg
      .husky/_/pre-commit                           // コミット前
      .husky/_/pre-rebase
      .husky/_/pre-push                             // プッシュ前
      .husky/_/pre-auto-gc
      .husky/_/pre-applypatch
      .husky/_/post-rewrite
      .husky/_/post-merge
      .husky/_/post-commit
      .husky/_/post-checkout
      .husky/_/post-applypatch

    ■ 手動生成(pre-commitフックの設定ファイル生成)
    npx husky add .husky/pre-commit "npx lint-staged"

    ■ DIR内の構成
    .husky/husky.sh             // 中身が空?
    .husky/pre-commit

- KEY: husky.setting.pre-commit
  EXPLAIN: 設定(pre-commit)
  BODY: |
    ■ [pre-commit](必須)

      #!/usr/bin/env sh
      . "$(dirname -- "$0")/husky.sh"

      npx lint-staged

- KEY: husky.setting.package.json
  EXPLAIN: 設定(package.json) 必須
  BODY: |
    ■ [package.json](必須)
      "lint-staged": {
        "*.{js,jsx,ts,tsx}": "npm run lint"
      },

- KEY: husky.setting.lintstagedrc
  EXPLAIN: 設定(lintstagedrc) 必須
  BODY: |
    ■ [.lintstagedrc.js](必須)

    ■ Sample 1
    export default {
      '**/*.{ts,tsx}': [
        () => 'tsc --incremental false --noEmit', // 型チェック
      ],
    };

    ■ Sample 2 (Callback Samples)
    export default {
      '**/*.ts?(x)': () => 'tsc -p tsconfig.json --noEmit',
      'src/**/*.{js,jsx,ts,tsx}': 'eslint --fix --no-ignore --max-warnings=0',
      'src/**/*.{css,scss}': 'stylelint --fix',
      'src/**/*': 'prettier --write --ignore-unknown'
    }

    ■ Sample 3 (Next Sample)
      const path = require('path');

      const buildEslintCommand = (filenames) =>
        `next lint --fix --file ${filenames
          .map((f) => path.relative(process.cwd(), f))
          .join(' --file ')}`;

      module.exports = {
        '*.{ts,tsx}': [
          () => 'tsc --incremental false --noEmit', // 型チェック
          buildEslintCommand,
          
          // Prettierフォーマット(必要に応じて)
          // "prettier --write --ignore-path .gitignore './**/*.{js,jsx,ts,tsx,json,css}'",
        ],
      };
