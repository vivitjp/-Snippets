---
#-------------------------------
# Jest
#-------------------------------

#-------------------------------
# Setup & 破棄
#-------------------------------

- KEY: jest.describe.setupEach
  EXPLAIN: before/afterEach
  BODY: |
    beforeEach(() => {
      initializeDatabase();
    });
    afterEach(() => {
      clearDatabase();
    });
    test('TITLE', () => {
      expect(isSelected(VALUE)).toBeTruthy();
    });

- KEY: jest.describe.setupAll
  EXPLAIN: before/afterAll
  BODY: |
    beforeAll(() => {
      return initializeDatabase();
    });
    afterAll(() => {
      return clearDatabase();
    });
    test('TITLE', () => {
      expect(isSelected(VALUE)).toBeTruthy();
    });

#-------------------------------
# Describe & test(it)
#-------------------------------
- KEY: jest.describe
  EXPLAIN: describe種類
  BODY: |
    describe('Group Title', ()=>{ })
    describe.only.('Group Title', ()=>{ })  # 実行指定
    describe.skip.('Group Title', ()=>{ })  # 実行せず
    describe.each([])('Group Title', ()=>{ }) # 配列

- KEY: jest.it
  EXPLAIN: it種類
  BODY: |
    it('Title', ()=>{ ... })         # 実行(同期)
    it('Title', async ()=>{ await }) # 実行(非同期)
    it.only.('Title', ()=>{ })       # 単独実行(複数可)
    it.skip.('Title', ()=>{ })       # 非実行
    it.each([])('Title', ()=>{ })    # 配列を引数に実行
    it.todo('Title', ()=>{ })        # 実行予定
    it.concurrent('Title', ()=>{ })  # 非同期同時実行

- KEY: jest.it.syncAsync
  EXPLAIN: it(同期・非同期)
  BODY: |
    it('Title', ()=>{ ... })   # 実行(同期)
    it('Title', async ()=>{    # 実行(非同期)
      await query()
      expect(A).toBe(B)
    })
    it('Title', ()=>{          # 実行(非同期)
      query().then(()=>{ expect(A).toBe(B) })
    })

#-------------------------------
# 配列パラメタ
#-------------------------------
- KEY: jest.it.each.array
  EXPLAIN: パラメタ(配列)
  BODY: |
    test.each([
      [1, 2, 3],
      [2, 3, 5],
    ])("adds %i + %i to equal %i", (a, b, total) => {
      expect(sum(a, b)).toBe(total)
    })

- KEY: jest.it.each.object
  EXPLAIN: パラメタ(オブジェクト配列)
  BODY: |
    test.each([
      { a: 1, b: 2, total: 3 },
      { a: 2, b: 3, total: 5 },
    ])("adds $a + $b to equal $total", ({ a, b, total }) => {
      expect(sum(a, b)).toBe(total)
    })

- KEY: jest.it.each.literalObject
  EXPLAIN: パラメタ(リテラルオブジェクト配列)
  BODY: |
    test.each`
      a    | b    | total
      ${1} | ${2} | ${3}
      ${2} | ${3} | ${5}
    `("adds $a + $b to equal $total", ({ a, b, total }) => {
      expect(sum(a, b)).toBe(total)
    })

#-------------------------------
# Mock関数
#-------------------------------

- KEY: jest.mock.mockFn
  EXPLAIN: Mock関数(コールバック)
  BODY: |
    const mockFn = jest.fn(x => x ** 2);
    const result = getArr([1,2,3], mockFn);
    expect(mockFn.mock.calls.length).toBe(3);     //呼び出し回数
    expect(mockFn.mock.calls[0][0]).toBe(1);      //パラメタ1
    expect(mockFn.mock.calls[1][0]).toBe(2);      //パラメタ2
    expect(mockFn.mock.results[0].value).toBe(1); //結果
    expect(mockFn.mock.results[1].value).toBe(4); //結果

- KEY: jest.mock.returnValue
  EXPLAIN: Mock関数(戻り値)
  BODY: |
    const mockFn = jest.fn();
    mockFn.mockReturnValueOnce(4)  //戻り値1指定
          .mockReturnValueOnce(9); //戻り値2指定
    expect(mockFn()).toBe(4);
    expect(mockFn()).toBe(9);

#-------------------------------
# SpyOn
#-------------------------------
- KEY: jest.spyOn
  EXPLAIN: spyOn
  BODY: |
    const spy = jest.spyOn(axios, 'get');  //Axios:GET 上書き
    spy.mockResolvedValue({                //戻り値
      data:{id:1, title:'Hello'}
    });
    const res = await getJsonAxios(1);     //コール
    expect(res.title).toBe("Hello");
    spy.mockRestore();                     //リセット

#-------------------------------
# Matcher: Expect
#-------------------------------

- KEY: jest.matcher.expect.anything
  EXPLAIN: null,undefined以外
  BODY: |
    const mockFn = jest.fn();
    [1].map(x => mockFn(x));
    expect(mockFn).toBeCalledWith(expect.anything());
    //null,undefined 以外、すべてに一致

- KEY: jest.matcher.expect.any
  EXPLAIN: any(型)に一致
  BODY: |
    function randomCall(fn: (arg: number) => void) {
      return fn(Math.floor(Math.random() * 6 + 1))
    }
    const mockFn = jest.fn()
    randomCall(mockFn)
    expect(mockFn).toBeCalledWith(expect.any(Number))

- KEY: jest.matcher.expect.arrayContaining1
  EXPLAIN: 配列要素包含
  BODY: |
    const expected = ["A", "B"]
    expect(["A", "B", "C"]).toEqual(expect.arrayContaining(expected))
    expect(["B", "C"]).not.toEqual(expect.arrayContaining(expected))

- KEY: jest.matcher.expect.arrayContaining2
  EXPLAIN: 配列正規表現複数包含
  BODY: |
    const expected = [
      expect.stringMatching(/^A/),
      expect.stringMatching(/^[BR]o/)
    ]
    expect(["Ali", "Rob", "Eve"]).toEqual(expect.arrayContaining(expected))
    expect(["Rob", "Eve"]).not.toEqual(expect.arrayContaining(expected))

- KEY: jest.matcher.expect.objectContaining
  EXPLAIN: オブジェクト属性包含
  BODY: |
    const expected = { a: "a" }
    expect({ a: "a" }).toEqual(expect.objectContaining(expected))
    expect({ a: "a", b: "b" }).toEqual(expect.objectContaining(expected))
    expect({ b: "b" }).toEqual(expect.not.objectContaining(expected))

- KEY: jest.matcher.expect.stringContaining
  EXPLAIN: 文字列部分一致
  BODY: |
    const expected = "Hello"
    expect("Hello world!").toEqual(expect.stringContaining(expected))
    expect("Hi world!").toEqual(expect.not.stringContaining(expected))

- KEY: jest.matcher.expect.stringMatching
  EXPLAIN: 正規表現部分一致
  BODY: |
    const expected = /Hello/
    expect("Hello world!").toEqual(expect.stringMatching(expected))
    expect("Hi world!").toEqual(expect.not.stringMatching(expected))

#-------------------------------
# Matcher
#-------------------------------

- KEY: jest.matcher.toBe
  EXPLAIN: プリミティブ(参照一致)
  BODY: |
    expect(7).toBe(7);               //プリミティブ一致
    const obj = { A: "a" }
    expect(obj).not.toBe({ A: "a" }) //不一致

- KEY: jest.matcher.toEqual
  EXPLAIN: オブジェクト型と値(再帰的)
  BODY: |
    const object = { id: "A", name: { first: "B" } }
    expect(object).toEqual({ id: "A", name: { first: "B" } })
    expect(object).not.toEqual({ id: "A", name: { first: "C" } })

- KEY: jest.matcher.toStrictEqual
  EXPLAIN: toEqualとの違い
  BODY: |
    //■ 違い1: undefined
    const object = { id: "A", name: undefined }
    expect(object).toEqual({ id: "A" })
    expect(object).not.toStrictEqual({ id: "A" })
     
    //■ 違い2: arrayの空要素
    const arr = [, 2, 3]
    expect(arr).toEqual([undefined, 2, 3])
    expect(arr).not.toStrictEqual([undefined, 2, 3])
    expect(arr).toStrictEqual([, 2, 3])
     
    //■ 違い3: インスタンス
    class A { x = 1 }
    expect(new A()).toEqual({ x: 1 })
    expect(new A()).not.toStrictEqual({ x: 1 })

- KEY: jest.matcher.not
  EXPLAIN: 反転
  BODY: |
    expect(7).not.toBe(8);

- KEY: jest.matcher.toContain
  EXPLAIN: 部分一致(配列/文字列)
  BODY: |
    expect(["A","B","C"]).toContain('A');
    expect("ABCDEFG").toContain('CD');

- KEY: jest.matcher.toContainEqual
  EXPLAIN: 配列要素の型と値
  BODY: |
    expect([{A: "a"},{B: "b"}]).toContainEqual({A: "a"});
    expect([1,2,3]).toContainEqual(1)

- KEY: jest.matcher.toMatch
  EXPLAIN: 文字列/正規表現
  BODY: |
    expect("ABCDEFG").toMatch("CD")
    expect("ABCDEFG").toMatch(/CD/)
    expect("ABCDEFG").toMatch(/cd/i)
    expect("ABCDEFG").toMatch(new RegExp("CD"))
    expect("ABCDEFG").toMatch(new RegExp("cd", "i"))

- KEY: jest.matcher.toMatchObject
  EXPLAIN: Object属性セット判定
  BODY: |
    const object = { a: "a", b: "b" }
    expect(object).toMatchObject({ a: "a", b: "b" })
    expect(object).toMatchObject({ a: "a" })
    expect(object).not.toMatchObject({ a: "x" })

- KEY: jest.matcher.toHaveLength
  EXPLAIN: lengthの一致
  BODY: |
    expect([1, 2, 3]).toHaveLength(3);
    expect('abc').toHaveLength(3);
    expect('').not.toHaveLength(5);

- KEY: jest.matcher.toHaveProperty
  EXPLAIN: オブジェクト属性
  BODY: |
    const object = {
      flag: true,
      age: 4,
      sub: { type: ["a", "b"], area: 20, color: "white" },
    }
    expect(object).toHaveProperty("flag")
    expect(object).toHaveProperty("age", 4)
    expect(object).toHaveProperty("sub.area", 20)
    expect(object).not.toHaveProperty("sub.open")
    expect(object).toHaveProperty(["sub", "area"], 20)
    expect(object).toHaveProperty("sub.type", ["a", "b"])
    expect(object).toHaveProperty(["sub", "type"], ["a", "b"])
    expect(object).toHaveProperty(["sub", "type", 0], "a")
    expect(object).not.toHaveProperty(["sub", "open"])

- KEY: jest.matcher.toBeInstanceOf
  EXPLAIN: インスタンス
  BODY: |
    class A {}
    expect(new A()).toBeInstanceOf(A);
    expect(() => {}).toBeInstanceOf(Function);
    expect(new A()).not.toBeInstanceOf(Function);

- KEY: jest.matcher.resolves.rejects
  EXPLAIN: 非同期 resolve/rejects
  BODY: |
    test('TITLE', async () => {
      await expect(fetchData()).resolves.toBe(EXPECTED);
    });
    test('TITLE', async () => {
      await expect(fetchData()).rejects.toMatch(EXPECTED);
    });

- KEY: jest.matcher.functionCalled
  EXPLAIN: 関数呼び出し
  BODY: |
    ■.toHaveBeenCalled()
      const mockFn = jest.fn()
      method(mockFn, "A")
      expect(mockFn).toHaveBeenCalled()
    ■.toHaveBeenCalledTimes(number)
    ■.toHaveBeenCalledWith(arg1, arg2, ...)
    ■.toHaveBeenLastCalledWith(arg1, arg2, ...)
    ■.toHaveBeenNthCalledWith(nthCall, arg1, arg2, ...)

- KEY: jest.matcher.functionReturned
  EXPLAIN: 関数戻り値
  BODY: |
    ■.toHaveReturned()=toReturn()
      const mockFn = jest.fn(()=>true)
      mockFn()
      expect(mockFn).functionReturned()
    ■.toHaveReturnedTimes(number)
      mockFn()
      mockFn()
      expect(mockFn).toHaveReturnedTimes(2)
    ■.toHaveReturnedWith(value)     //戻り値
      const data = {id: 123};
      const method = jest.fn(data => data.id);
      method(data);
      expect(method).toHaveReturnedWith(123);
    ■.toHaveLastReturnedWith(value)
    ■.toHaveNthReturnedWith(nthCall, value)

- KEY: jest.matcher.numbers
  EXPLAIN: 数値比較
  BODY: |
    ■.toBeCloseTo(数,小数点)          //浮動小数点等価性
      expect(0.2 + 0.1).not.toBe(0.3)
      expect(0.2 + 0.1).toBeCloseTo(0.3, 5)
    ■.toBeGreaterThan(数)            //以上かつ不等
    ■.toBeGreaterThanOrEqual(数)     //以上
    ■.toBeLessThan(数)               //未満
    ■.toBeLessThanOrEqual(数)        //以下
    ■.toBeNaN()
      expect(NaN).toBeNaN();
      expect(1).not.toBeNaN();

- KEY: jest.matcher.define
  EXPLAIN: 定義
  BODY: |
    ■.toBeDefined()                  //非undefinedの検証
      expect(method()).toBeDefined();
    ■.toBeUndefined()                //undefinedの検証
      expect(method(1)).toBeUndefined();

- KEY: jest.matcher.truthy.falsy
  EXPLAIN: 真偽・NULL
  BODY: |
    ■.toBeTruthy()               //真
      expect(method()).toBeTruthy();
    ■.toBeFalsy()                //偽
      expect(method()).toBeFalsy();
    ■.toBeNaN()                  //NaNの検証
    ■.toBeNull()                 //nullの検証
      expect(method()).toBeNull();

#-------------------------------
# Matcher カスタム
#-------------------------------

- KEY: jest.matcher.extend
  EXPLAIN: カスタム・マッチャー
  BODY: |
    expect.extend({
      toBeWithinRange(received, floor, ceiling) {
        const pass = received >= floor && received <= ceiling;
        if (pass) {
          return {
            message: () =>
              `expected ${received} not to be within range ${floor} - ${ceiling}`,
            pass: true,
          };
        } else {
          return {
            message: () =>
              `expected ${received} to be within range ${floor} - ${ceiling}`,
            pass: false,
          };
        }
      },
    });

#-------------------------------
# Matcher Error
#-------------------------------

- KEY: jest.matcher.toThrow
  EXPLAIN: エラー
  BODY: |
    const method = (title: string) => { throw Error(title) }
    test("throws on octopus", () => {
      expect(() => { method("Error") }).toThrow()
    })
