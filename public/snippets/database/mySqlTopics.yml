---
#-------------------------------
# mySqlTopics  ⛔要編集
#-------------------------------

- KEY: mysql.topics
  EXPLAIN: コマンド
  BODY: |
    DROP TABLE IF EXISTS m_users_access_levels;
    DROP TABLE IF EXISTS i_users_access_actions;
    DROP TABLE IF EXISTS m_access_actions;

    ■ Master
    CREATE TABLE m_access_actions (
      id                 tinyint      NOT NULL               COMMENT 'アクションID',
      action_name        varchar(255) NOT NULL               COMMENT 'アクション名',
      action_level       tinyint      NOT NULL               COMMENT 'アクションレベル',
      -- ---------------------------------------------------------
      created_at         bigint       NOT NULL default (UNIX_TIMESTAMP() * 1000) COMMENT '作成日',
      updated_at         bigint       NOT NULL default (UNIX_TIMESTAMP() * 1000) COMMENT '更新日',
      created_by         varchar(10)  NOT NULL default 'SYSTEM'                  COMMENT '作成者',
      updated_by         varchar(10)  NOT NULL default 'SYSTEM'                  COMMENT '更新者',
      -- ---------------------------------------------------------
      PRIMARY KEY (`id`)
    );

    INSERT INTO m_access_actions(id,action_name,action_level)values
    (11,'新規会員登録',        1),
    (12,'プロフィール更新',    1),
    (13,'求人閲覧',            2),
    (14,'求人の気になる登録',  2),
    (15,'応募',    3),
    (16,'メッセージ画面閲覧',  3),
    (51,'CRMアクティブ',       3),
    (52,'CAアクティブ',        2),
    (53,'α取り込みリスト',     0);

    ■ 中間テーブル
    CREATE TABLE i_users_access_actions (
      m_users_id           varchar(50) NOT NULL                 COMMENT 'ユーザーID',
      m_access_actions_id  tinyint     NOT NULL                 COMMENT 'アクションID',
      action_date          bigint      NOT NULL default false   COMMENT 'ユーザーアクション日付',
      -- ---------------------------------------------------------
      PRIMARY KEY (`m_users_id`,`m_access_actions_id`),
      FOREIGN KEY i_users_access_actions_m_users_id_fk(m_users_id) references m_users(id) ON DELETE CASCADE,
      FOREIGN KEY i_users_access_actions_m_access_actions_id_fk(m_access_actions_id) references m_access_actions(id) -- CASCADE不指定
    );

    ■ 
    CREATE TABLE m_users_access_levels(
      m_users_id           varchar(50) NOT NULL               COMMENT 'ユーザーID',
      level_0_action_date  bigint               default null  COMMENT 'レベル 0 の最新日時',
      level_1_action_date  bigint               default null  COMMENT 'レベル 1以上 の最新日時',
      level_2_action_date  bigint               default null  COMMENT 'レベル 2以上 の最新日時',
      level_3_action_date  bigint               default null  COMMENT 'レベル 3 の最新日時',
      -- ---------------------------------------------------------
      PRIMARY KEY (`m_users_id`),
      FOREIGN KEY m_users_access_levels_m_users_id_fk(m_users_id) references m_users(id) ON DELETE CASCADE
    ) COMMENT = 'ユーザーACCESSアクションをレベル(以上)別にまとめた求職者との中間テーブル(SHIRAHAからの検索用)';



    DROP FUNCTION IF EXISTS function_i_users_access_actions_max_date_morethen;
    DELIMITER //
    CREATE FUNCTION function_i_users_access_actions_max_date_morethen(USER_ID VARCHAR(50), TARGET_LEVEL TINYINT) 
      RETURNS BIGINT DETERMINISTIC
    BEGIN
      SET @MAX_DATE = (
        SELECT max(users.action_date) as max_date
        FROM i_users_access_actions users, m_access_actions actions
        WHERE users.m_access_actions_id = actions.id
          AND actions.action_level >= TARGET_LEVEL  -- ここが LEVEL 比較ロジック
          AND m_users_id=USER_ID
        GROUP BY users.m_users_id
      );
      RETURN @MAX_DATE;
    END;
    //
    DELIMITER ;


    DROP FUNCTION IF EXISTS function_i_users_access_actions_max_date_exact;
    DELIMITER //
    CREATE FUNCTION function_i_users_access_actions_max_date_exact(USER_ID VARCHAR(50), TARGET_LEVEL TINYINT) 
      RETURNS BIGINT DETERMINISTIC
    BEGIN
      SET @MAX_DATE = (
        SELECT max(users.action_date) as max_date
        FROM i_users_access_actions users, m_access_actions actions
        WHERE users.m_access_actions_id = actions.id
          AND actions.action_level = TARGET_LEVEL  -- ここが LEVEL 比較ロジック
          AND m_users_id=USER_ID
        GROUP BY users.m_users_id
      );
      RETURN @MAX_DATE;
    END;
    //
    DELIMITER ;


    DROP PROCEDURE IF EXISTS procedure_i_users_access_actions_udpate_date;
    DELIMITER //
    CREATE PROCEDURE procedure_i_users_access_actions_udpate_date(IN USER_ID VARCHAR(50))
    BEGIN
      SET @LEVEL_0 = (SELECT function_i_users_access_actions_max_date_exact   (USER_ID, 0));
      SET @LEVEL_1 = (SELECT function_i_users_access_actions_max_date_morethen(USER_ID, 1));
      SET @LEVEL_2 = (SELECT function_i_users_access_actions_max_date_morethen(USER_ID, 2));
      SET @LEVEL_3 = (SELECT function_i_users_access_actions_max_date_exact   (USER_ID, 3));
      
      INSERT INTO m_users_access_levels (m_users_id, level_0_action_date, level_1_action_date,level_2_action_date,level_3_action_date)
      VALUES (USER_ID, @LEVEL_0, @LEVEL_1, @LEVEL_2, @LEVEL_3)
      ON DUPLICATE KEY UPDATE level_0_action_date=@LEVEL_0, level_1_action_date=@LEVEL_1, level_2_action_date=@LEVEL_2, level_3_action_date=@LEVEL_3;
    END;
    //
    DELIMITER ;

    DROP TRIGGER IF EXISTS trigger_i_users_access_actions_insert;
    DELIMITER //
    CREATE TRIGGER trigger_i_users_access_actions_insert
    AFTER INSERT ON i_users_access_actions FOR EACH ROW
    BEGIN
      call procedure_i_users_access_actions_udpate_date(NEW.m_users_id);
    END;
    //
    DELIMITER ;


    DROP TRIGGER IF EXISTS trigger_i_users_access_actions_udpate;
    DELIMITER //
    CREATE TRIGGER trigger_i_users_access_actions_udpate
    AFTER UPDATE ON i_users_access_actions FOR EACH ROW
    BEGIN
      call procedure_i_users_access_actions_udpate_date(OLD.m_users_id);
    END;
    //
    DELIMITER ;
